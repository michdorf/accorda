import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js
var require_chord_pro_peg_parser = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function peg$subclass(child, parent) {
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
    function peg$SyntaxError(message, expected, found, location) {
      this.message = message;
      this.expected = expected;
      this.found = found;
      this.location = location;
      this.name = "SyntaxError";
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }
    peg$subclass(peg$SyntaxError, Error);
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function literal(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        "class": function _class(expectation) {
          var escapedParts = "", i;
          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
          }
          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },
        any: function any(expectation) {
          return "any character";
        },
        end: function end(expectation) {
          return "end of input";
        },
        other: function other(expectation) {
          return expectation.description;
        }
      };
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function classEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = new Array(expected2.length), i, j;
        for (i = 0; i < expected2.length; i++) {
          descriptions[i] = describeExpectation(expected2[i]);
        }
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
      var peg$FAILED = {}, peg$startRuleFunctions = {
        ChordSheet: peg$parseChordSheet
      }, peg$startRuleFunction = peg$parseChordSheet, peg$c0 = function peg$c02(lines, line) {
        return {
          type: "chordSheet",
          lines: [].concat(_toConsumableArray(lines), [line])
        };
      }, peg$c1 = function peg$c110(line) {
        return line;
      }, peg$c2 = function peg$c210(lyrics, tokens, chords, comment) {
        return {
          type: "line",
          items: [lyrics ? {
            type: "chordLyricsPair",
            chords: "",
            lyrics
          } : null].concat(_toConsumableArray(tokens), [chords ? {
            type: "chordLyricsPair",
            chords,
            lyrics: ""
          } : null, comment ? {
            type: "comment",
            comment
          } : null]).filter(function(x) {
            return x;
          })
        };
      }, peg$c3 = "#", peg$c4 = peg$literalExpectation("#", false), peg$c5 = /^[^\r\n]/, peg$c6 = peg$classExpectation(["\r", "\n"], true, false), peg$c7 = function peg$c72(comment) {
        return comment;
      }, peg$c8 = function peg$c82(chords, lyrics) {
        return {
          type: "chordLyricsPair",
          chords: chords || "",
          lyrics
        };
      }, peg$c9 = function peg$c92(lyrics) {
        return lyrics.map(function(c) {
          return c["char"] || c;
        }).join("");
      }, peg$c10 = "[", peg$c11 = peg$literalExpectation("[", false), peg$c12 = "]", peg$c13 = peg$literalExpectation("]", false), peg$c14 = function peg$c142(chords) {
        return chords.map(function(c) {
          return c["char"] || c;
        }).join("");
      }, peg$c15 = /^[^\]\r\n]/, peg$c16 = peg$classExpectation(["]", "\r", "\n"], true, false), peg$c17 = "\\", peg$c18 = peg$literalExpectation("\\", false), peg$c19 = function peg$c192() {
        return {
          type: "char",
          "char": "\\"
        };
      }, peg$c20 = function peg$c202() {
        return {
          type: "char",
          "char": "]"
        };
      }, peg$c21 = function peg$c212(sequence) {
        return sequence;
      }, peg$c22 = "%{", peg$c23 = peg$literalExpectation("%{", false), peg$c24 = "}", peg$c25 = peg$literalExpectation("}", false), peg$c26 = function peg$c262(variableName, valueTest, expressions) {
        return _objectSpread(_objectSpread({
          "type": "ternary",
          variable: variableName.length > 0 ? variableName : null,
          valueTest
        }, expressions), {}, {
          location: location().start
        });
      }, peg$c27 = "=", peg$c28 = peg$literalExpectation("=", false), peg$c29 = function peg$c292(testValue) {
        return testValue;
      }, peg$c30 = "|", peg$c31 = peg$literalExpectation("|", false), peg$c32 = function peg$c322(trueExpression, falseExpression) {
        return {
          "type": "ternary",
          trueExpression,
          falseExpression,
          location: location().start
        };
      }, peg$c33 = function peg$c332(falseExpression) {
        return falseExpression;
      }, peg$c34 = /^[a-zA-Z0-9\-_]/, peg$c35 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false), peg$c36 = function peg$c362() {
        return {
          type: "char",
          "char": "|"
        };
      }, peg$c37 = function peg$c372() {
        return {
          type: "char",
          "char": "}"
        };
      }, peg$c38 = /^[^|[\]\\{}%#\r\n]/, peg$c39 = peg$classExpectation(["|", "[", "]", "\\", "{", "}", "%", "#", "\r", "\n"], true, false), peg$c40 = function peg$c402() {
        return {
          type: "char",
          "char": "["
        };
      }, peg$c41 = "{", peg$c42 = peg$literalExpectation("{", false), peg$c43 = function peg$c432() {
        return {
          type: "char",
          "char": "{"
        };
      }, peg$c44 = "%", peg$c45 = peg$literalExpectation("%", false), peg$c46 = function peg$c462() {
        return {
          type: "char",
          "char": "%"
        };
      }, peg$c47 = function peg$c472() {
        return {
          type: "char",
          "char": "#"
        };
      }, peg$c48 = function peg$c482(tagName, tagColonWithValue) {
        return {
          type: "tag",
          name: tagName,
          value: tagColonWithValue,
          location: location().start
        };
      }, peg$c49 = ":", peg$c50 = peg$literalExpectation(":", false), peg$c51 = function peg$c512(tagValue) {
        return tagValue.map(function(c) {
          return c["char"] || c;
        }).join("");
      }, peg$c52 = /^[a-zA-Z\-_]/, peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false), peg$c54 = /^[^}\\\r\n]/, peg$c55 = peg$classExpectation(["}", "\\", "\r", "\n"], true, false), peg$c56 = peg$otherExpectation("whitespace"), peg$c57 = /^[ \t\n\r]/, peg$c58 = peg$classExpectation([" ", "	", "\n", "\r"], false, false), peg$c59 = peg$otherExpectation("space"), peg$c60 = /^[ \t]/, peg$c61 = peg$classExpectation([" ", "	"], false, false), peg$c62 = "\n", peg$c63 = peg$literalExpectation("\n", false), peg$c64 = "\r", peg$c65 = peg$literalExpectation("\r", false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{
        line: 1,
        column: 1
      }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
      }
      function error(message, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text2, ignoreCase) {
        return {
          type: "literal",
          text: text2,
          ignoreCase
        };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
          type: "class",
          parts,
          inverted,
          ignoreCase
        };
      }
      function peg$anyExpectation() {
        return {
          type: "any"
        };
      }
      function peg$endExpectation() {
        return {
          type: "end"
        };
      }
      function peg$otherExpectation(description) {
        return {
          type: "other",
          description
        };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p;
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
        return {
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        };
      }
      function peg$fail(expected2) {
        if (peg$currPos < peg$maxFailPos) {
          return;
        }
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected2);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
      }
      function peg$parseChordSheet() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseLineWithNewline();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseLineWithNewline();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLine();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLineWithNewline() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseLine();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNewLine();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLine() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseLyrics();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseToken();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseToken();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseChord();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseComment();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseSpace();
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s1, s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseToken() {
        var s0;
        s0 = peg$parseTag();
        if (s0 === peg$FAILED) {
          s0 = peg$parseChordLyricsPair();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMetaTernary();
          }
        }
        return s0;
      }
      function peg$parseComment() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseSpace();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 35) {
            s2 = peg$c3;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c4);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (peg$c5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c5.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c6);
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseChordLyricsPair() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parseChord();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseLyrics();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseLyrics();
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLyrics() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseLyricsChar();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseLyricsChar();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseChord() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseEscape();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = void 0;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c10;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseChordChar();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseChordChar();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c12;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c13);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c14(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseChordChar() {
        var s0, s1, s2, s3;
        if (peg$c15.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c16);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseEscape();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c17;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c18);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c19();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c12;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c13);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c20();
              }
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseMetaTernary() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c23);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMetaVariableName();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMetaValueTest();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseMetaTernaryTrueFalseExpressions();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c24;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c25);
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26(s3, s4, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseMetaValueTest() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
          s1 = peg$c27;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseMetaTestValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseMetaTestValue() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseChar();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseChar();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        return s0;
      }
      function peg$parseMetaTernaryTrueFalseExpressions() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseMetaExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseMetaTernaryFalseExpression();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c32(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseMetaTernaryFalseExpression() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseMetaExpression();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c33(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseMetaVariableName() {
        var s0, s1;
        s0 = [];
        if (peg$c34.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c35);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c34.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c35);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseMetaExpression() {
        var s0, s1, s2, s3;
        s0 = [];
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parseChar();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseChar();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parseMetaTernary();
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parseChar();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseChar();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = input.substring(s1, peg$currPos);
            } else {
              s1 = s2;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parseMetaTernary();
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLyricsChar() {
        var s0, s1;
        s0 = peg$parseChar();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 93) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c13);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
              s1 = peg$c30;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c36();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 125) {
                s1 = peg$c24;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c25);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37();
              }
              s0 = s1;
            }
          }
        }
        return s0;
      }
      function peg$parseChar() {
        var s0, s1, s2, s3;
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c39);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseEscape();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c17;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c18);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c19();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 124) {
                s3 = peg$c30;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c31);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c36();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                  s3 = peg$c10;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c40();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c12;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c13);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c20();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s3 = peg$c41;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c42);
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c43();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c24;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c25);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c37();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 37) {
                          s3 = peg$c44;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c45);
                          }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c46();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 35) {
                            s3 = peg$c3;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c4);
                            }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c47();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c41;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c42);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseTagName();
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseTagColonWithValue();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c24;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c25);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c48(s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagColonWithValue() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c49;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c50);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTagValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagName() {
        var s0, s1;
        s0 = [];
        if (peg$c52.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c53);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c53);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagValue() {
        var s0, s1;
        s0 = [];
        s1 = peg$parseTagValueChar();
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseTagValueChar();
        }
        return s0;
      }
      function peg$parseTagValueChar() {
        var s0, s1, s2, s3;
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c55);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseEscape();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c17;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c18);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c19();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c24;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c25);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c37();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s3 = peg$c41;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c42);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c43();
                }
                s2 = s3;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parse_() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$c57.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c58);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c58);
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c56);
          }
        }
        return s0;
      }
      function peg$parseSpace() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c61);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c60.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c61);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c59);
          }
        }
        return s0;
      }
      function peg$parseNewLine() {
        var s0;
        s0 = peg$parseCarriageReturn();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineFeed();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCarriageReturnLineFeed();
          }
        }
        return s0;
      }
      function peg$parseCarriageReturnLineFeed() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseCarriageReturn();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLineFeed();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLineFeed() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c62;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c63);
          }
        }
        return s0;
      }
      function peg$parseCarriageReturn() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c64;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c65);
          }
        }
        return s0;
      }
      function peg$parseEscape() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 92) {
          s0 = peg$c17;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c18);
          }
        }
        return s0;
      }
      function peg$parsePound() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c3;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c4);
          }
        }
        return s0;
      }
      function peg$parsePercent() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 37) {
          s0 = peg$c44;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c45);
          }
        }
        return s0;
      }
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
      }
    }
    module.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/literal.js
var require_literal = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Literal = function() {
      function Literal2(expression) {
        _classCallCheck(this, Literal2);
        this.string = expression;
      }
      _createClass(Literal2, [{
        key: "evaluate",
        value: function evaluate() {
          return this.string;
        }
      }, {
        key: "isRenderable",
        value: function isRenderable() {
          return true;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Literal2(this.string);
        }
      }]);
      return Literal2;
    }();
    var _default = Literal;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_lyrics_pair.js
var require_chord_lyrics_pair = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_lyrics_pair.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ChordLyricsPair = function() {
      function ChordLyricsPair2() {
        var chords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        var lyrics = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        _classCallCheck(this, ChordLyricsPair2);
        this.chords = chords || "";
        this.lyrics = lyrics || "";
      }
      _createClass(ChordLyricsPair2, [{
        key: "isRenderable",
        value: function isRenderable() {
          return true;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new ChordLyricsPair2(this.chords, this.lyrics);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "ChordLyricsPair(chords=".concat(this.chords, ", lyrics=").concat(this.lyrics, ")");
        }
      }, {
        key: "set",
        value: function set(properties) {
          return new this.constructor(properties.chords || this.chords, properties.lyrics || this.lyrics);
        }
      }]);
      return ChordLyricsPair2;
    }();
    var _default = ChordLyricsPair;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/tag.js
var require_tag = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/tag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = exports._KEY = exports.YEAR = exports.TRANSPOSE = exports.TITLE = exports.TIME = exports.TEMPO = exports.SUBTITLE = exports.START_OF_VERSE = exports.START_OF_TAB = exports.START_OF_CHORUS = exports.READ_ONLY_TAGS = exports.NEW_KEY = exports.META_TAGS = exports.LYRICIST = exports.KEY = exports.END_OF_VERSE = exports.END_OF_TAB = exports.END_OF_CHORUS = exports.DURATION = exports.COPYRIGHT = exports.COMPOSER = exports.COMMENT = exports.CAPO = exports.ARTIST = exports.ALBUM = void 0;
    exports.isReadonlyTag = isReadonlyTag;
    var _ALIASES;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ALBUM = "album";
    exports.ALBUM = ALBUM;
    var ARTIST = "artist";
    exports.ARTIST = ARTIST;
    var CAPO = "capo";
    exports.CAPO = CAPO;
    var COMMENT = "comment";
    exports.COMMENT = COMMENT;
    var COMPOSER = "composer";
    exports.COMPOSER = COMPOSER;
    var COPYRIGHT = "copyright";
    exports.COPYRIGHT = COPYRIGHT;
    var DURATION = "duration";
    exports.DURATION = DURATION;
    var END_OF_CHORUS = "end_of_chorus";
    exports.END_OF_CHORUS = END_OF_CHORUS;
    var END_OF_TAB = "end_of_tab";
    exports.END_OF_TAB = END_OF_TAB;
    var END_OF_VERSE = "end_of_verse";
    exports.END_OF_VERSE = END_OF_VERSE;
    var KEY = "key";
    exports.KEY = KEY;
    var _KEY = "_key";
    exports._KEY = _KEY;
    var LYRICIST = "lyricist";
    exports.LYRICIST = LYRICIST;
    var START_OF_CHORUS = "start_of_chorus";
    exports.START_OF_CHORUS = START_OF_CHORUS;
    var START_OF_TAB = "start_of_tab";
    exports.START_OF_TAB = START_OF_TAB;
    var START_OF_VERSE = "start_of_verse";
    exports.START_OF_VERSE = START_OF_VERSE;
    var SUBTITLE = "subtitle";
    exports.SUBTITLE = SUBTITLE;
    var TEMPO = "tempo";
    exports.TEMPO = TEMPO;
    var TIME = "time";
    exports.TIME = TIME;
    var TITLE = "title";
    exports.TITLE = TITLE;
    var TRANSPOSE = "transpose";
    exports.TRANSPOSE = TRANSPOSE;
    var NEW_KEY = "new_key";
    exports.NEW_KEY = NEW_KEY;
    var YEAR = "year";
    exports.YEAR = YEAR;
    var TITLE_SHORT = "t";
    var SUBTITLE_SHORT = "st";
    var COMMENT_SHORT = "c";
    var START_OF_CHORUS_SHORT = "soc";
    var END_OF_CHORUS_SHORT = "eoc";
    var START_OF_TAB_SHORT = "sot";
    var END_OF_TAB_SHORT = "eot";
    var NEW_KEY_SHORT = "nk";
    var RENDERABLE_TAGS = [COMMENT];
    var META_TAGS = [ALBUM, ARTIST, CAPO, COMPOSER, COPYRIGHT, DURATION, KEY, LYRICIST, TEMPO, TIME, TITLE, SUBTITLE, YEAR];
    exports.META_TAGS = META_TAGS;
    var READ_ONLY_TAGS = [_KEY];
    exports.READ_ONLY_TAGS = READ_ONLY_TAGS;
    var ALIASES = (_ALIASES = {}, _defineProperty(_ALIASES, TITLE_SHORT, TITLE), _defineProperty(_ALIASES, SUBTITLE_SHORT, SUBTITLE), _defineProperty(_ALIASES, COMMENT_SHORT, COMMENT), _defineProperty(_ALIASES, START_OF_CHORUS_SHORT, START_OF_CHORUS), _defineProperty(_ALIASES, END_OF_CHORUS_SHORT, END_OF_CHORUS), _defineProperty(_ALIASES, START_OF_TAB_SHORT, START_OF_TAB), _defineProperty(_ALIASES, END_OF_TAB_SHORT, END_OF_TAB), _defineProperty(_ALIASES, NEW_KEY_SHORT, NEW_KEY), _ALIASES);
    var META_TAG_REGEX = /^meta:\s*([^:\s]+)(\s*(.+))?$/;
    var TAG_REGEX = /^([^:\s]+)(:?\s*(.+))?$/;
    var CUSTOM_META_TAG_NAME_REGEX = /^x_(.+)$/;
    function isReadonlyTag(tagName) {
      return READ_ONLY_TAGS.includes(tagName);
    }
    var translateTagNameAlias = function translateTagNameAlias2(name) {
      if (!name) {
        return name;
      }
      var sanitizedName = name.trim();
      if (sanitizedName in ALIASES) {
        return ALIASES[sanitizedName];
      }
      return sanitizedName;
    };
    var Tag = function() {
      function Tag2(name, value) {
        var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$line = _ref.line, line = _ref$line === void 0 ? null : _ref$line, _ref$column = _ref.column, column = _ref$column === void 0 ? null : _ref$column, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? null : _ref$offset;
        _classCallCheck(this, Tag2);
        this.name = name;
        this.value = value;
        this.line = line;
        this.column = column;
        this.offset = offset;
      }
      _createClass(Tag2, [{
        key: "name",
        get: function get() {
          return this._name.trim();
        },
        set: function set(name) {
          this._name = translateTagNameAlias(name);
          this._originalName = name;
        }
      }, {
        key: "originalName",
        get: function get() {
          return this._originalName.trim();
        }
      }, {
        key: "value",
        get: function get() {
          if (this._value) {
            return "".concat(this._value).trim();
          }
          return this._value || null;
        },
        set: function set(value) {
          this._value = value;
        }
      }, {
        key: "hasValue",
        value: function hasValue() {
          return this.value !== null && this.value.trim().length > 0;
        }
      }, {
        key: "isRenderable",
        value: function isRenderable() {
          return RENDERABLE_TAGS.indexOf(this.name) !== -1;
        }
      }, {
        key: "isMetaTag",
        value: function isMetaTag() {
          return CUSTOM_META_TAG_NAME_REGEX.test(this.name) || META_TAGS.indexOf(this.name) !== -1;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Tag2(this._originalName, this.value);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "Tag(name=".concat(this.name, ", value=").concat(this.name, ")");
        }
      }, {
        key: "set",
        value: function set(_ref2) {
          var value = _ref2.value;
          return new Tag2(this._originalName, value);
        }
      }], [{
        key: "parse",
        value: function parse(tag) {
          if (tag instanceof Tag2) {
            return tag;
          }
          return this.parseWithRegex(tag, META_TAG_REGEX) || this.parseWithRegex(tag, TAG_REGEX);
        }
      }, {
        key: "parseWithRegex",
        value: function parseWithRegex(tag, regex) {
          var matches = tag.match(regex);
          if (matches !== null) {
            return new Tag2(matches[1], matches[3] || null);
          }
          return null;
        }
      }]);
      return Tag2;
    }();
    var _default = Tag;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/comment.js
var require_comment = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/comment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Comment = function() {
      function Comment2(content) {
        _classCallCheck(this, Comment2);
        this.content = content;
      }
      _createClass(Comment2, [{
        key: "isRenderable",
        value: function isRenderable() {
          return false;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Comment2(this.content);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "Comment(content=".concat(this.content, ")");
        }
      }]);
      return Comment2;
    }();
    var _default = Comment;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VERSE = exports.TAB = exports.SYMBOL = exports.ROMAN_NUMERALS = exports.NUMERIC = exports.NUMERAL = exports.NONE = exports.INDETERMINATE = exports.CHORUS = void 0;
    var VERSE = "verse";
    exports.VERSE = VERSE;
    var CHORUS = "chorus";
    exports.CHORUS = CHORUS;
    var NONE = "none";
    exports.NONE = NONE;
    var INDETERMINATE = "indeterminate";
    exports.INDETERMINATE = INDETERMINATE;
    var TAB = "tab";
    exports.TAB = TAB;
    var SYMBOL = "symbol";
    exports.SYMBOL = SYMBOL;
    var NUMERIC = "numeric";
    exports.NUMERIC = NUMERIC;
    var NUMERAL = "numeral";
    exports.NUMERAL = NUMERAL;
    var ROMAN_NUMERALS = ["I", "II", "III", "IV", "V", "VI", "VII"];
    exports.ROMAN_NUMERALS = ROMAN_NUMERALS;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/line.js
var require_line = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/line.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _tag = _interopRequireDefault(require_tag());
    var _comment = _interopRequireDefault(require_comment());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Line = function() {
      function Line2() {
        _classCallCheck(this, Line2);
        this.items = [];
        this.type = _constants.NONE;
        this.currentChordLyricsPair = null;
      }
      _createClass(Line2, [{
        key: "isEmpty",
        value: function isEmpty() {
          return this.items.length === 0;
        }
      }, {
        key: "addItem",
        value: function addItem(item) {
          if (item instanceof _tag["default"]) {
            this.addTag(item);
          } else if (item instanceof _chord_lyrics_pair["default"]) {
            this.addChordLyricsPair(item);
          } else if (item instanceof _comment["default"]) {
            this.addComment(item);
          } else {
            this.items.push(item);
          }
        }
      }, {
        key: "hasRenderableItems",
        value: function hasRenderableItems() {
          return this.items.some(function(item) {
            return item.isRenderable();
          });
        }
      }, {
        key: "clone",
        value: function clone() {
          return this.mapItems(null);
        }
      }, {
        key: "mapItems",
        value: function mapItems(func) {
          var clonedLine = new Line2();
          clonedLine.items = this.items.map(function(item) {
            var clonedItem = item.clone();
            return func ? func(clonedItem) : clonedItem;
          }).filter(function(item) {
            return item;
          });
          clonedLine.type = this.type;
          return clonedLine;
        }
      }, {
        key: "isVerse",
        value: function isVerse() {
          return this.type === _constants.VERSE;
        }
      }, {
        key: "isChorus",
        value: function isChorus() {
          return this.type === _constants.CHORUS;
        }
      }, {
        key: "hasContent",
        value: function hasContent() {
          return this.hasRenderableItems();
        }
      }, {
        key: "addChordLyricsPair",
        value: function addChordLyricsPair(chords, lyrics) {
          if (chords instanceof _chord_lyrics_pair["default"]) {
            this.currentChordLyricsPair = chords;
          } else {
            this.currentChordLyricsPair = new _chord_lyrics_pair["default"](chords, lyrics);
          }
          this.items.push(this.currentChordLyricsPair);
          return this.currentChordLyricsPair;
        }
      }, {
        key: "ensureChordLyricsPair",
        value: function ensureChordLyricsPair() {
          if (!this.currentChordLyricsPair) {
            this.addChordLyricsPair();
          }
        }
      }, {
        key: "chords",
        value: function chords(chr) {
          this.ensureChordLyricsPair();
          this.currentChordLyricsPair.chords += chr;
        }
      }, {
        key: "lyrics",
        value: function lyrics(chr) {
          this.ensureChordLyricsPair();
          this.currentChordLyricsPair.lyrics += chr;
        }
      }, {
        key: "addTag",
        value: function addTag(name, value) {
          var tag = name instanceof _tag["default"] ? name : new _tag["default"](name, value);
          this.items.push(tag);
          return tag;
        }
      }, {
        key: "addComment",
        value: function addComment(content) {
          var comment = content instanceof _comment["default"] ? content : new _comment["default"](content);
          this.items.push(comment);
          return comment;
        }
      }, {
        key: "set",
        value: function set(properties) {
          return new this.constructor(_objectSpread({
            type: this.type,
            items: this.items
          }, properties));
        }
      }]);
      return Line2;
    }();
    var _default = Line;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/paragraph.js
var require_paragraph = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/paragraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _constants = require_constants();
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Paragraph = function() {
      function Paragraph2() {
        _classCallCheck(this, Paragraph2);
        this.lines = [];
      }
      _createClass(Paragraph2, [{
        key: "addLine",
        value: function addLine(line) {
          this.lines.push(line);
        }
      }, {
        key: "type",
        get: function get() {
          var types = this.lines.map(function(line) {
            return line.type;
          });
          var uniqueTypes = _toConsumableArray(new Set(types));
          if (uniqueTypes.length === 1) {
            return uniqueTypes[0];
          }
          return _constants.INDETERMINATE;
        }
      }, {
        key: "hasRenderableItems",
        value: function hasRenderableItems() {
          return this.lines.some(function(line) {
            return line.hasRenderableItems();
          });
        }
      }]);
      return Paragraph2;
    }();
    var _default = Paragraph;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/note.js
var require_note = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/note.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _constants = require_constants();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classPrivateMethodInitSpec(obj, privateSet) {
      _checkPrivateRedeclaration(obj, privateSet);
      privateSet.add(obj);
    }
    function _checkPrivateRedeclaration(obj, privateCollection) {
      if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
    }
    function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
    var A = "A".charCodeAt(0);
    var G = "G".charCodeAt(0);
    var TRANSPOSE_DISTANCE_MAJOR = [null, 0, 2, 4, 5, 7, 9, 11];
    var TRANSPOSE_DISTANCE_MINOR = [null, 0, 2, 3, 5, 7, 8, 11];
    function keyToCharCode(key) {
      return key.toUpperCase().charCodeAt(0);
    }
    function clamp(note, min, max) {
      var newNote = note;
      if (newNote < min) {
        newNote += 7;
      } else if (newNote > max) {
        newNote -= 7;
      }
      return newNote;
    }
    function numeralToNumber(numeral) {
      for (var i = 0, count = _constants.ROMAN_NUMERALS.length; i < count; i += 1) {
        var romanNumeral = _constants.ROMAN_NUMERALS[i];
        if (romanNumeral === numeral || romanNumeral.toLowerCase() === numeral) {
          return i + 1;
        }
      }
      return null;
    }
    function numberToNumeral(number) {
      return _constants.ROMAN_NUMERALS[number - 1];
    }
    var _set = /* @__PURE__ */ new WeakSet();
    var Note = function() {
      function Note2(_ref) {
        var note = _ref.note, type = _ref.type, _ref$minor = _ref.minor, minor = _ref$minor === void 0 ? false : _ref$minor;
        _classCallCheck(this, Note2);
        _classPrivateMethodInitSpec(this, _set);
        this._note = note;
        this.type = type;
        this.minor = minor;
      }
      _createClass(Note2, [{
        key: "toNumeral",
        value: function toNumeral() {
          if (this.isNumeral()) {
            return this.clone();
          }
          if (this.isNumeric()) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              type: _constants.NUMERAL
            });
          }
          throw new Error("Converting a ".concat(this.type, " note to numeral is not supported"));
        }
      }, {
        key: "toNumeric",
        value: function toNumeric() {
          if (this.isNumeric()) {
            return this.clone();
          }
          if (this.isNumeral()) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              type: _constants.NUMERIC
            });
          }
          throw new Error("Converting a ".concat(this.type, " note to numeric is not supported"));
        }
      }, {
        key: "isMinor",
        value: function isMinor() {
          return this.minor;
        }
      }, {
        key: "equals",
        value: function equals(otherNote) {
          return this._note === otherNote._note && this.type === otherNote.type && this.minor === otherNote.minor;
        }
      }, {
        key: "clone",
        value: function clone() {
          return _classPrivateMethodGet(this, _set, _set2).call(this, {});
        }
      }, {
        key: "up",
        value: function up() {
          return this.change(1);
        }
      }, {
        key: "down",
        value: function down() {
          return this.change(-1);
        }
      }, {
        key: "isOneOf",
        value: function isOneOf() {
          for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
            options[_key] = arguments[_key];
          }
          return options.includes(this._note);
        }
      }, {
        key: "isNumeric",
        value: function isNumeric() {
          return this.is(_constants.NUMERIC);
        }
      }, {
        key: "isChordSymbol",
        value: function isChordSymbol() {
          return this.is(_constants.SYMBOL);
        }
      }, {
        key: "isNumeral",
        value: function isNumeral() {
          return this.is(_constants.NUMERAL);
        }
      }, {
        key: "is",
        value: function is(noteType) {
          return this.type === noteType;
        }
      }, {
        key: "getTransposeDistance",
        value: function getTransposeDistance(minorKey) {
          if (minorKey) {
            return TRANSPOSE_DISTANCE_MINOR[this._note];
          }
          return TRANSPOSE_DISTANCE_MAJOR[this._note];
        }
      }, {
        key: "change",
        value: function change(delta) {
          if (this.isChordSymbol()) {
            var charCode;
            charCode = keyToCharCode(this._note);
            charCode += delta;
            charCode = clamp(charCode, A, G);
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: String.fromCharCode(charCode)
            });
          }
          var newNote = clamp(this._note + delta, 1, 7);
          if (newNote < 1) {
            newNote += 7;
          } else if (newNote > 7) {
            newNote -= 7;
          }
          return _classPrivateMethodGet(this, _set, _set2).call(this, {
            note: newNote
          });
        }
      }, {
        key: "note",
        get: function get() {
          if (this.isNumeral()) {
            var numeral = numberToNumeral(this._note);
            if (this.isMinor()) {
              return numeral.toLowerCase();
            }
            return numeral;
          }
          return this._note;
        }
      }, {
        key: "toString",
        value: function toString() {
          return "".concat(this.note);
        }
      }], [{
        key: "parse",
        value: function parse(note) {
          if (/^[A-Ga-g]$/.test(note)) {
            return new Note2({
              note: note.toUpperCase(),
              type: _constants.SYMBOL
            });
          }
          if (/^[1-7]$/.test(note)) {
            return new Note2({
              note: parseInt(note, 10),
              type: _constants.NUMERIC
            });
          }
          var romanNumeralValue = numeralToNumber(note);
          if (romanNumeralValue) {
            return new Note2({
              note: romanNumeralValue,
              type: _constants.NUMERAL,
              minor: note.toLowerCase() === note
            });
          }
          throw new Error("Invalid note ".concat(note));
        }
      }]);
      return Note2;
    }();
    function _set2(attributes) {
      return new this.constructor(_objectSpread({
        note: this._note,
        type: this.type,
        minor: this.minor
      }, attributes));
    }
    var _default = Note;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/normalize_mappings/enharmonic-normalize.js
var require_enharmonic_normalize = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/normalize_mappings/enharmonic-normalize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _default = {
      "Ab": {
        "B": "Cb"
      },
      "Cb": {
        "B": "Cb",
        "A#": "Bb",
        "E": "Fb"
      },
      "C": {
        "C#": "Db",
        "D#": "Eb",
        "F#": "Gb",
        "G#": "Ab",
        "A#": "Bb"
      },
      "C#": {
        "D#": "Eb",
        "A#": "Bb"
      },
      "Db": {
        "B": "Cb"
      },
      "D": {
        "D#": "Eb",
        "A#": "Bb"
      },
      "E": {
        "Ab": "G#",
        "A#": "Bb",
        "D#": "Eb"
      },
      "F": {
        "A#": "Bb",
        "F#": "Gb",
        "C#": "Db",
        "D#": "Eb",
        "G#": "Ab"
      },
      "F#": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "Gb": {
        "A#": "Bb",
        "D#": "Eb",
        "G#": "Ab",
        "B": "Cb",
        "E": "Fb"
      },
      "G": {
        "A#": "Bb",
        "D#": "Eb",
        "G#": "Ab"
      },
      "G#": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "Am": {
        "Gb": "G",
        "G#": "Ab",
        "F#": "Gb",
        "C#": "Db",
        "D#": "Eb",
        "A#": "Bb"
      },
      "Bbm": {
        "Cb": "B"
      },
      "Bm": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "C#m": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "Cm": {
        "G#": "Ab",
        "A#": "Bb",
        "D#": "Eb",
        "F#": "Gb",
        "C#": "Db"
      },
      "Dm": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "Em": {
        "A#": "Bb",
        "D#": "Eb"
      },
      "F#m": {
        "A#": "Bb",
        "D#": "Eb",
        "Gb": "F#",
        "Ab": "G#",
        "Db": "C#"
      },
      "Fm": {
        "G#": "Ab",
        "A#": "Bb",
        "D#": "Eb",
        "F#": "Gb",
        "C#": "Db"
      },
      "Gm": {
        "G#": "Ab",
        "A#": "Bb",
        "D#": "Eb"
      },
      "G#m": {
        "A#": "Bb",
        "D#": "Eb"
      }
    };
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/key.js
var require_key = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/key.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _note = _interopRequireDefault(require_note());
    var _constants = require_constants();
    var _enharmonicNormalize = _interopRequireDefault(require_enharmonic_normalize());
    var _MODIFIER_TRANSPOSITI;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classPrivateMethodInitSpec(obj, privateSet) {
      _checkPrivateRedeclaration(obj, privateSet);
      privateSet.add(obj);
    }
    function _checkPrivateRedeclaration(obj, privateCollection) {
      if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
    }
    function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
    function _wrapRegExp() {
      _wrapRegExp = function _wrapRegExp2(re, groups) {
        return new BabelRegExp(re, void 0, groups);
      };
      var _super = RegExp.prototype, _groups = /* @__PURE__ */ new WeakMap();
      function BabelRegExp(re, flags, groups) {
        var _this = new RegExp(re, flags);
        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
      }
      function buildGroups(result, re) {
        var g = _groups.get(re);
        return Object.keys(g).reduce(function(groups, name) {
          return groups[name] = result[g[name]], groups;
        }, /* @__PURE__ */ Object.create(null));
      }
      return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {
        var result = _super.exec.call(this, str);
        return result && (result.groups = buildGroups(result, this)), result;
      }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
        if (typeof substitution == "string") {
          var groups = _groups.get(this);
          return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
            return "$" + groups[name];
          }));
        }
        if (typeof substitution == "function") {
          var _this = this;
          return _super[Symbol.replace].call(this, str, function() {
            var args = arguments;
            return _typeof(args[args.length - 1]) != "object" && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
          });
        }
        return _super[Symbol.replace].call(this, str, substitution);
      }, _wrapRegExp.apply(this, arguments);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var FLAT = "b";
    var SHARP = "#";
    var MODIFIER_TRANSPOSITION = (_MODIFIER_TRANSPOSITI = {}, _defineProperty(_MODIFIER_TRANSPOSITI, SHARP, 1), _defineProperty(_MODIFIER_TRANSPOSITI, FLAT, -1), _MODIFIER_TRANSPOSITI);
    var symbolKeyRegex = _wrapRegExp(/^([A-G])(#|b)?(m)?$/i, {
      note: 1,
      modifier: 2,
      minor: 3
    });
    var numericKeyRegex = _wrapRegExp(/^(#|b)?([1-7])(m)?$/, {
      modifier: 1,
      note: 2,
      minor: 3
    });
    var numeralKeyRegex = _wrapRegExp(/^(#|b)?(I{1,3}|IV|VI{0,2}|i{1,3}|iv|vi{0,2})$/, {
      modifier: 1,
      note: 2
    });
    var regexes = [symbolKeyRegex, numericKeyRegex, numeralKeyRegex];
    var _set = /* @__PURE__ */ new WeakSet();
    var Key = function() {
      function Key2(_ref) {
        var note = _ref.note, _ref$modifier = _ref.modifier, modifier = _ref$modifier === void 0 ? null : _ref$modifier, _ref$minor = _ref.minor, minor = _ref$minor === void 0 ? false : _ref$minor;
        _classCallCheck(this, Key2);
        _classPrivateMethodInitSpec(this, _set);
        this.note = note instanceof _note["default"] ? note : _note["default"].parse(note);
        this.modifier = modifier || null;
        this.minor = !!minor || false;
      }
      _createClass(Key2, [{
        key: "distanceTo",
        value: function distanceTo(otherKey) {
          var otherKeyObj = Key2.wrap(otherKey);
          var key = this.useModifier(otherKeyObj.modifier);
          var delta = 0;
          while (!key.equals(otherKeyObj) && delta < 20) {
            key = key.transposeUp().useModifier(otherKeyObj.modifier);
            delta += 1;
          }
          return delta;
        }
      }, {
        key: "isMinor",
        value: function isMinor() {
          return this.note.isMinor();
        }
      }, {
        key: "clone",
        value: function clone() {
          return _classPrivateMethodGet(this, _set, _set2).call(this, {});
        }
      }, {
        key: "toChordSymbol",
        value: function toChordSymbol(key) {
          if (this.is(_constants.SYMBOL)) {
            return this.clone();
          }
          var transposeDistance = this.note.getTransposeDistance(key.minor) + (MODIFIER_TRANSPOSITION[this.modifier] || 0);
          return key.transpose(transposeDistance).normalize().useModifier(key.modifier);
        }
      }, {
        key: "toChordSymbolString",
        value: function toChordSymbolString(key) {
          return this.toChordSymbol(key).toString();
        }
      }, {
        key: "is",
        value: function is(type) {
          return this.note.is(type);
        }
      }, {
        key: "isNumeric",
        value: function isNumeric() {
          return this.is(_constants.NUMERIC);
        }
      }, {
        key: "isChordSymbol",
        value: function isChordSymbol() {
          return this.is(_constants.SYMBOL);
        }
      }, {
        key: "isNumeral",
        value: function isNumeral() {
          return this.is(_constants.NUMERAL);
        }
      }, {
        key: "equals",
        value: function equals(_ref2) {
          var note = _ref2.note, modifier = _ref2.modifier;
          return this.note.equals(note) && this.modifier === modifier;
        }
      }, {
        key: "toNumeric",
        value: function toNumeric(key) {
          if (this.isNumeric()) {
            return this.clone();
          }
          if (this.isNumeral()) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.toNumeric()
            });
          }
          var numericKey = new Key2({
            note: 1
          });
          var symbolKey = key.clone();
          var reference = this.clone().normalize().useModifier(key.modifier).normalizeEnharmonics(key);
          while (!symbolKey.equals(reference)) {
            numericKey = numericKey.transposeUp().useModifier(key.modifier);
            symbolKey = symbolKey.transposeUp().normalize().useModifier(key.modifier).normalizeEnharmonics(key);
          }
          return numericKey;
        }
      }, {
        key: "toNumericString",
        value: function toNumericString(key) {
          return this.toNumeric(key).toString();
        }
      }, {
        key: "toNumeral",
        value: function toNumeral(key) {
          if (this.isNumeral()) {
            return this.clone();
          }
          if (this.isNumeric()) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.toNumeral()
            });
          }
          var numeralKey = new Key2({
            note: "I"
          });
          var symbolKey = key.clone();
          var reference = this.clone().normalize().useModifier(key.modifier).normalizeEnharmonics(key);
          while (!symbolKey.equals(reference)) {
            numeralKey = numeralKey.transposeUp().useModifier(key.modifier);
            symbolKey = symbolKey.transposeUp().normalize().useModifier(key.modifier).normalizeEnharmonics(key);
          }
          return numeralKey;
        }
      }, {
        key: "toNumeralString",
        value: function toNumeralString(key) {
          return this.toNumeral(key).toString();
        }
      }, {
        key: "toString",
        value: function toString() {
          if (this.isChordSymbol()) {
            return "".concat(this.note).concat(this.modifier || "");
          }
          return "".concat(this.modifier || "").concat(this.note);
        }
      }, {
        key: "transpose",
        value: function transpose(delta) {
          if (delta === 0) {
            return this;
          }
          var originalModifier = this.modifier;
          var transposedKey = this.clone();
          var func = delta < 0 ? "transposeDown" : "transposeUp";
          for (var i = 0, count = Math.abs(delta); i < count; i += 1) {
            transposedKey = transposedKey[func]();
          }
          return transposedKey.useModifier(originalModifier);
        }
      }, {
        key: "transposeUp",
        value: function transposeUp() {
          if (this.modifier === FLAT) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              modifier: null
            });
          }
          if (this.note.isOneOf(3, 7, "E", "B")) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.up()
            });
          }
          if (this.modifier === SHARP) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.up(),
              modifier: null
            });
          }
          return _classPrivateMethodGet(this, _set, _set2).call(this, {
            modifier: SHARP
          });
        }
      }, {
        key: "transposeDown",
        value: function transposeDown() {
          if (this.modifier === SHARP) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              modifier: null
            });
          }
          if (this.note.isOneOf(1, 4, "C", "F")) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.down()
            });
          }
          if (this.modifier === FLAT) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.down(),
              modifier: null
            });
          }
          return _classPrivateMethodGet(this, _set, _set2).call(this, {
            modifier: FLAT
          });
        }
      }, {
        key: "useModifier",
        value: function useModifier(newModifier) {
          if (this.modifier === FLAT && newModifier === SHARP) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.down(),
              modifier: SHARP
            });
          }
          if (this.modifier === SHARP && newModifier === FLAT) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.up(),
              modifier: FLAT
            });
          }
          return this.clone();
        }
      }, {
        key: "normalize",
        value: function normalize() {
          if (this.modifier === SHARP && this.note.isOneOf(3, 7, "E", "B")) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.up(),
              modifier: null
            });
          }
          if (this.modifier === FLAT && this.note.isOneOf(1, 4, "C", "F")) {
            return _classPrivateMethodGet(this, _set, _set2).call(this, {
              note: this.note.down(),
              modifier: null
            });
          }
          return this.clone();
        }
      }, {
        key: "normalizeEnharmonics",
        value: function normalizeEnharmonics(key) {
          if (key) {
            var rootKeyString = key.minor ? "".concat(key, "m") : key.toString();
            var enharmonics = _enharmonicNormalize["default"][rootKeyString];
            var thisKeyString = this.toString();
            if (enharmonics && enharmonics[thisKeyString]) {
              return Key2.parse(enharmonics[thisKeyString]);
            }
          }
          return this.clone();
        }
      }], [{
        key: "parse",
        value: function parse(keyString) {
          for (var i = 0, count = regexes.length; i < count; i += 1) {
            var match = keyString.match(regexes[i]);
            if (match) {
              return new Key2(match.groups);
            }
          }
          return null;
        }
      }, {
        key: "wrap",
        value: function wrap(keyStringOrObject) {
          if (keyStringOrObject instanceof Key2) {
            return keyStringOrObject;
          }
          return this.parse(keyStringOrObject);
        }
      }, {
        key: "distance",
        value: function distance(oneKey, otherKey) {
          return this.wrap(oneKey).distanceTo(otherKey);
        }
      }]);
      return Key2;
    }();
    function _set2(attributes) {
      return new this.constructor(_objectSpread({
        note: this.note.clone(),
        modifier: this.modifier,
        minor: !!this.minor
      }, attributes));
    }
    var _default = Key;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/utilities.js
var require_utilities = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/utilities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.deprecate = deprecate;
    exports.hasChordContents = void 0;
    exports.isEmptyString = isEmptyString;
    exports.pushNew = exports.presence = exports.padLeft = exports.isPresent = exports.isEvaluatable = void 0;
    exports.scopeCss = scopeCss;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var pushNew = function pushNew2(collection, Klass) {
      var newObject = new Klass();
      collection.push(newObject);
      return newObject;
    };
    exports.pushNew = pushNew;
    var hasChordContents = function hasChordContents2(line) {
      return line.items.some(function(item) {
        return !!item.chords;
      });
    };
    exports.hasChordContents = hasChordContents;
    var isEvaluatable = function isEvaluatable2(item) {
      return typeof item.evaluate === "function";
    };
    exports.isEvaluatable = isEvaluatable;
    var padLeft = function padLeft2(str, length) {
      var paddedString = str;
      for (var l = str.length; l < length; l += 1, paddedString += " ") {
        ;
      }
      return paddedString;
    };
    exports.padLeft = padLeft;
    var isPresent = function isPresent2(object) {
      return object && object.length > 0;
    };
    exports.isPresent = isPresent;
    var presence = function presence2(object) {
      return isPresent(object) ? object : null;
    };
    exports.presence = presence;
    function dasherize(string) {
      return string.replace(/[A-Z]/g, function(match) {
        return "-".concat(match.toLowerCase());
      });
    }
    function scopeCss(css, scope) {
      return Object.entries(css).map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), selector = _ref2[0], styles = _ref2[1];
        var rules = Object.entries(styles).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), property = _ref4[0], value = _ref4[1];
          return "".concat(dasherize(property), ": ").concat(value, ";");
        }).join("\n  ");
        var scopedSelector = "".concat(scope, " ").concat(selector).trim();
        return "\n".concat(scopedSelector, " {\n  ").concat(rules, "\n}").substring(1);
      }).join("\n\n");
    }
    function deprecate(message) {
      try {
        throw new Error("DEPRECATION: ".concat(message));
      } catch (e) {
        if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && typeof process.emitWarning === "function") {
          process.emitWarning("".concat(message, "\n").concat(e.stack));
        } else {
          console.warn("".concat(message, "\n").concat(e.stack));
        }
      }
    }
    function isEmptyString(string) {
      return string === null || string === void 0 || string === "";
    }
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/normalize_mappings/suffix-normalize-mapping.js
var require_suffix_normalize_mapping = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/normalize_mappings/suffix-normalize-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _default = {
      "2": "2",
      "4": "sus",
      "5": "5",
      "6": "6",
      "7": "7",
      "9": "9",
      "11": "11",
      "13": "13",
      "42": "4(2)",
      "69": "6(9)",
      "sus#42": "sus#42",
      "sus(no5)": "sus(no5)",
      "sus4": "sus",
      "sus": "sus",
      "ma9(-5)": "ma9(b5)",
      "ma9-5": "ma9(b5)",
      "ma9b5": "ma9(b5)",
      "maj9(b5)": "ma9(b5)",
      "+9(-5)": "ma9(b5)",
      "M9-5": "ma9(b5)",
      "+9b5": "ma9(b5)",
      "+9(b5)": "ma9(b5)",
      "maj9(-5)": "ma9(b5)",
      "maj9-5": "ma9(b5)",
      "maj9b5": "ma9(b5)",
      "ma9(b5)": "ma9(b5)",
      "ma9(-13+5)": "ma9(b13#5)",
      "ma9-13+5": "ma9(b13#5)",
      "ma7b13#5": "ma9(b13#5)",
      "maj9(b13#5)": "ma9(b13#5)",
      "+9(-13+5)": "ma9(b13#5)",
      "M9-13+5": "ma9(b13#5)",
      "+9b13#5": "ma9(b13#5)",
      "+9(b13#5)": "ma9(b13#5)",
      "maj9(-13+5)": "ma9(b13#5)",
      "maj9-13+5": "ma9(b13#5)",
      "maj9b13#5": "ma9(b13#5)",
      "ma9(b13#5)": "ma9(b13#5)",
      "ma9(-13)": "ma9(b13)",
      "ma9-13": "ma9(b13)",
      "ma7b13": "ma7(b13)",
      "maj9(b13)": "ma9(b13)",
      "+9(-13)": "ma9(b13)",
      "M9-13": "ma9(b13)",
      "+9b13": "ma9(b13)",
      "+9(b13)": "ma9(b13)",
      "maj9(-13)": "ma9(b13)",
      "maj9-13": "ma9(b13)",
      "maj9b13": "ma9(b13)",
      "ma9(b13)": "ma9(b13)",
      "ma9(13)": "ma9(13)",
      "ma9(+5)": "ma9(#5)",
      "ma9+5": "ma9(#5)",
      "ma9#5": "ma9(#5)",
      "maj9(#5)": "ma9(#5)",
      "+9(+5)": "ma9(#5)",
      "M9+5": "ma9(#5)",
      "+9#5": "ma9(#5)",
      "+9(#5)": "ma9(#5)",
      "maj9(+5)": "ma9(#5)",
      "maj9+5": "ma9(#5)",
      "maj9#5": "ma9(#5)",
      "ma9(#5)": "ma9(#5)",
      "ma9(#4)": "ma9(#4)",
      "ma9(+11+5)": "ma9(#11#5)",
      "ma9+11+5": "ma9(#11#5)",
      "ma7#11#5": "ma13(#11#5)",
      "maj9(#11#5)": "ma9(#11#5)",
      "+9(+11+5)": "ma9(#11#5)",
      "M9+11+5": "ma9(#11#5)",
      "+9#11#5": "ma9(#11#5)",
      "+9(#11#5)": "ma9(#11#5)",
      "maj9(+11+5)": "ma9(#11#5)",
      "maj9+11+5": "ma9(#11#5)",
      "maj9#11#5": "ma9(#11#5)",
      "ma9(#11#5)": "ma9(#11#5)",
      "ma9(+11)": "ma9(#11)",
      "ma9+11": "ma9(#11)",
      "ma7#11": "ma13(#11)",
      "maj9(#11)": "ma9(#11)",
      "+9(+11)": "ma9(#11)",
      "M9+11": "ma9(#11)",
      "+9#11": "ma9(#11)",
      "+9(#11)": "ma9(#11)",
      "maj9(+11)": "ma9(#11)",
      "maj9+11": "ma9(#11)",
      "maj9#11": "ma9(#11)",
      "ma9(#11)": "ma9(#11)",
      "maj9": "ma9",
      "M9": "ma9",
      "+9": "ma9",
      "ma9": "ma9",
      "9(#7)": "ma9",
      "ma7(no3)": "ma7(no3)",
      "ma7(-9)": "ma7(b9)",
      "ma7-9": "ma7(b9)",
      "ma7b9": "ma7(b9)",
      "maj7(b9)": "ma7(b9)",
      "+7(-9)": "ma7(b9)",
      "M7-9": "ma7(b9)",
      "+7b9": "ma7(b9)",
      "+7(b9)": "ma7(b9)",
      "maj7(-9)": "ma7(b9)",
      "maj7-9": "ma7(b9)",
      "maj7b9": "ma7(b9)",
      "ma7(b9)": "ma7(b9)",
      "ma7(-5)": "ma7(b5)",
      "ma7-5": "ma7(b5)",
      "ma7b5": "ma7(b5)",
      "maj7(b5)": "ma7(b5)",
      "+7(-5)": "ma7(b5)",
      "M7-5": "ma7(b5)",
      "+7b5": "ma7(b5)",
      "+7(b5)": "ma7(b5)",
      "maj7(-5)": "ma7(b5)",
      "maj7-5": "ma7(b5)",
      "maj7b5": "ma7(b5)",
      "ma7(b5)": "ma7(b5)",
      "ma7(-13)": "ma7(b13)",
      "ma7-13": "ma7(b13)",
      "maj7(b13)": "ma7(b13)",
      "+7(-13)": "ma7(b13)",
      "M7-13": "ma7(b13)",
      "+7b13": "ma7(b13)",
      "+7(b13)": "ma7(b13)",
      "maj7(-13)": "ma7(b13)",
      "maj7-13": "ma7(b13)",
      "maj7b13": "ma7(b13)",
      "ma7(b13)": "ma7(b13)",
      "ma7(+9)": "ma7(#9)",
      "ma7+9": "ma7(#9)",
      "ma7#9": "ma7(#9)",
      "maj7(#9)": "ma7(#9)",
      "+7(+9)": "ma7(#9)",
      "M7+9": "ma7(#9)",
      "+7#9": "ma7(#9)",
      "+7(#9)": "ma7(#9)",
      "maj7(+9)": "ma7(#9)",
      "maj7+9": "ma7(#9)",
      "maj7#9": "ma7(#9)",
      "ma7(#9)": "ma7(#9)",
      "aug(maj7)": "ma7(#5)",
      "aug(ma7)": "ma7(#5)",
      "aug(+7)": "ma7(#5)",
      "aug(M7)": "ma7(#5)",
      "ma7(+5)": "ma7(#5)",
      "ma7+5": "ma7(#5)",
      "ma7#5": "ma7(#5)",
      "maj7(#5)": "ma7(#5)",
      "+7(+5)": "ma7(#5)",
      "M7+5": "ma7(#5)",
      "+7#5": "ma7(#5)",
      "+7(#5)": "ma7(#5)",
      "maj7(+5)": "ma7(#5)",
      "maj7+5": "ma7(#5)",
      "maj7#5": "ma7(#5)",
      "ma7(#5)": "ma7(#5)",
      "ma7(#4)": "ma7(#4)",
      "ma7(+11)": "ma7(#11)",
      "ma7+11": "ma7(#11)",
      "maj7(#11)": "ma7(#11)",
      "+7(+11)": "ma7(#11)",
      "M7+11": "ma7(#11)",
      "+7#11": "ma7(#11)",
      "+7(#11)": "ma7(#11)",
      "maj7(+11)": "ma7(#11)",
      "maj7+11": "ma7(#11)",
      "maj7#11": "ma7(#11)",
      "ma7(#11)": "ma7(#11)",
      "(triangle)": "ma7",
      "maj7": "ma7",
      "Maj7": "ma7",
      "M7": "ma7",
      "#7": "ma7",
      "+7": "ma7",
      "ma7": "ma7",
      "ma69": "ma6(9)",
      "ma6(9)": "ma6(9)",
      "ma6": "ma6",
      "ma13(-9+5)": "ma13(b9#5)",
      "ma13-9+5": "ma13(b9#5)",
      "ma7b9#5": "ma13(b9#5)",
      "maj13(b9#5)": "ma13(b9#5)",
      "+13(-9+5)": "ma13(b9#5)",
      "M13-9+5": "ma13(b9#5)",
      "+13b9#5": "ma13(b9#5)",
      "+13(b9#5)": "ma13(b9#5)",
      "maj13(-9+5)": "ma13(b9#5)",
      "maj13-9+5": "ma13(b9#5)",
      "maj13b9#5": "ma13(b9#5)",
      "ma13(b9#5)": "ma13(b9#5)",
      "ma13(-9)": "ma13(b9)",
      "ma13-9": "ma13(b9)",
      "ma13b9": "ma13(b9)",
      "maj13(b9)": "ma13(b9)",
      "+13(-9)": "ma13(b9)",
      "M13-9": "ma13(b9)",
      "+13b9": "ma13(b9)",
      "+13(b9)": "ma13(b9)",
      "maj13(-9)": "ma13(b9)",
      "maj13-9": "ma13(b9)",
      "maj13b9": "ma13(b9)",
      "ma13(b9)": "ma13(b9)",
      "ma13(-5)": "ma13(b5)",
      "ma13-5": "ma13(b5)",
      "ma13b5": "ma13(b5)",
      "maj13(b5)": "ma13(b5)",
      "+13(-5)": "ma13(b5)",
      "M13-5": "ma13(b5)",
      "+13b5": "ma13(b5)",
      "+13(b5)": "ma13(b5)",
      "maj13(-5)": "ma13(b5)",
      "maj13-5": "ma13(b5)",
      "maj13b5": "ma13(b5)",
      "ma13(b5)": "ma13(b5)",
      "ma13+9+5": "ma13(#9#5)",
      "ma13(+9+5)": "ma13(#9#5)",
      "ma7#9#5": "ma13(#9#5)",
      "maj13(#9#5)": "ma13(#9#5)",
      "+13+9+5": "ma13(#9#5)",
      "M13(+9+5)": "ma13(#9#5)",
      "+13#9#5": "ma13(#9#5)",
      "+13(#9#5)": "ma13(#9#5)",
      "maj13+9+5": "ma13(#9#5)",
      "maj13(+9+5)": "ma13(#9#5)",
      "maj13#9#5": "ma13(#9#5)",
      "ma13(#9#5)": "ma13(#9#5)",
      "ma13+9": "ma13(#9)",
      "ma13(+9)": "ma13(#9)",
      "ma13#9": "ma13(#9)",
      "maj13(#9)": "ma13(#9)",
      "+13+9": "ma13(#9)",
      "M13(+9)": "ma13(#9)",
      "+13#9": "ma13(#9)",
      "+13(#9)": "ma13(#9)",
      "maj13+9": "ma13(#9)",
      "maj13(+9)": "ma13(#9)",
      "maj13#9": "ma13(#9)",
      "ma13(#9)": "ma13(#9)",
      "ma13(+5)": "ma13(#5)",
      "ma13+5": "ma13(#5)",
      "ma13#5": "ma13(#5)",
      "maj13(#5)": "ma13(#5)",
      "+13(+5)": "ma13(#5)",
      "M13+5": "ma13(#5)",
      "+13#5": "ma13(#5)",
      "+13(#5)": "ma13(#5)",
      "maj13(+5)": "ma13(#5)",
      "maj13+5": "ma13(#5)",
      "maj13#5": "ma13(#5)",
      "ma13(#5)": "ma13(#5)",
      "ma13(+11+5)": "ma13(#11#5)",
      "ma13+11+5": "ma13(#11#5)",
      "maj13(#11#5)": "ma13(#11#5)",
      "+13(+11+5)": "ma13(#11#5)",
      "M13+11+5": "ma13(#11#5)",
      "+13#11#5": "ma13(#11#5)",
      "+13(#11#5)": "ma13(#11#5)",
      "maj13(+11+5)": "ma13(#11#5)",
      "maj13+11+5": "ma13(#11#5)",
      "maj13#11#5": "ma13(#11#5)",
      "ma13(#11#5)": "ma13(#11#5)",
      "ma13(+11)": "ma13(#11)",
      "ma13+11": "ma13(#11)",
      "maj13(#11)": "ma13(#11)",
      "+13(+11)": "ma13(#11)",
      "M13+11": "ma13(#11)",
      "+13#11": "ma13(#11)",
      "+13(#11)": "ma13(#11)",
      "maj13(+11)": "ma13(#11)",
      "maj13+11": "ma13(#11)",
      "maj13#11": "ma13(#11)",
      "ma13(#11)": "ma13(#11)",
      "M13": "ma13",
      "+13": "ma13",
      "ma13": "ma13",
      "13(#7)": "ma13",
      "ma11-9": "ma11(b9)",
      "ma11(-9)": "ma11(b9)",
      "ma11b9": "ma11(b9)",
      "maj11(b9)": "ma11(b9)",
      "+11-9": "ma11(b9)",
      "M11(-9)": "ma11(b9)",
      "+11b9": "ma11(b9)",
      "+11(b9)": "ma11(b9)",
      "maj11-9": "ma11(b9)",
      "maj11(-9)": "ma11(b9)",
      "maj11b9": "ma11(b9)",
      "ma11(b9)": "ma11(b9)",
      "ma11(-5)": "ma11(b5)",
      "ma11-5": "ma11(b5)",
      "ma11b5": "ma11(b5)",
      "maj11(b5)": "ma11(b5)",
      "+11(-5)": "ma11(b5)",
      "M11-5": "ma11(b5)",
      "+11b5": "ma11(b5)",
      "+11(b5)": "ma11(b5)",
      "maj11(-5)": "ma11(b5)",
      "maj11-5": "ma11(b5)",
      "maj11b5": "ma11(b5)",
      "ma11(b5)": "ma11(b5)",
      "ma11(-13)": "ma11(b13)",
      "ma11-13": "ma11(b13)",
      "ma11b13": "ma11(b13)",
      "maj11(b13)": "ma11(b13)",
      "+11(-13)": "ma11(b13)",
      "M11-13": "ma11(b13)",
      "+11b13": "ma11(b13)",
      "+11(b13)": "ma11(b13)",
      "maj11(-13)": "ma11(b13)",
      "maj11-13": "ma11(b13)",
      "maj11b13": "ma11(b13)",
      "ma11(b13)": "ma11(b13)",
      "ma11(+9)": "ma11(#9)",
      "ma11+9": "ma11(#9)",
      "ma11#9": "ma11(#9)",
      "maj11(#9)": "ma11(#9)",
      "+11(+9)": "ma11(#9)",
      "M11+9": "ma11(#9)",
      "+11#9": "ma11(#9)",
      "+11(#9)": "ma11(#9)",
      "maj11(+9)": "ma11(#9)",
      "maj11+9": "ma11(#9)",
      "maj11#9": "ma11(#9)",
      "ma11(#9)": "ma11(#9)",
      "ma11(+5)": "ma11(#5)",
      "ma11+5": "ma11(#5)",
      "ma11#5": "ma11(#5)",
      "maj11(#5)": "ma11(#5)",
      "+11(+5)": "ma11(#5)",
      "M11+5": "ma11(#5)",
      "+11#5": "ma11(#5)",
      "+11(#5)": "ma11(#5)",
      "maj11(+5)": "ma11(#5)",
      "maj11+5": "ma11(#5)",
      "maj11#5": "ma11(#5)",
      "ma11(#5)": "ma11(#5)",
      "M11": "ma11",
      "+11": "ma11",
      "ma11": "ma11",
      "11(+7)": "ma11",
      "11+7": "ma11",
      "11#7": "ma11",
      "11(#7)": "ma11",
      "m9M7": "m9(ma7)",
      "m9(M7)": "m9(ma7)",
      "m9(+7)": "m9(ma7)",
      "m9(maj7)": "m9(ma7)",
      "m9(ma7)": "m9(ma7)",
      "-9(-5)": "m9(b5)",
      "-9-5": "m11(b5)",
      "-9b5": "m9(b5)",
      "-9(b5)": "m9(b5)",
      "m9(-5)": "m9(b5)",
      "m9-5": "m9(b5)",
      "m9b5": "m9(b5)",
      "m9(b5)": "m9(b5)",
      "-9(-13)": "m9(b13)",
      "-9-13": "m9(b13)",
      "-9b13": "m9(b13)",
      "-9(b13)": "m9(b13)",
      "m9(-13)": "m9(b13)",
      "m9-13": "m9(b13)",
      "m9b13": "m9(b13)",
      "m9(b13)": "m9(b13)",
      "m9(#7)": "m9(#7)",
      "-9(+5)": "m9(#5)",
      "m9+5": "m11(#5)",
      "-9#5": "m9(#5)",
      "-9(#5)": "m9(#5)",
      "m9(+5)": "m9(#5)",
      "m9#5": "m9(#5)",
      "m9(#5)": "m9(#5)",
      "-9(+11)": "m9(#11)",
      "-9+11": "m9(#11)",
      "-9#11": "m9(#11)",
      "-9(#11)": "m9(#11)",
      "m9(+11)": "m9(#11)",
      "m9+11": "m9(#11)",
      "m9#11": "m9(#11)",
      "m9(#11)": "m9(#11)",
      "-9": "m9",
      "min9": "m9",
      "mi9": "m9",
      "m9": "m9",
      "m7sus": "m7sus4",
      "m7sus4": "m7sus4",
      "min7(no3)": "m7(no3)",
      "m7(no3)": "m7(no3)",
      "-7(-9)": "m7(b9)",
      "m7-9": "m7(b9)",
      "-7b9": "m7(b9)",
      "-7(b9)": "m7(b9)",
      "m7(-9)": "m7(b9)",
      "m7b9": "m7(b9)",
      "m7(b9)": "m7(b9)",
      "-7(-5)": "m7(b5)",
      "m7-5": "m7(b5)",
      "-7b5": "m7(b5)",
      "-7(b5)": "m7(b5)",
      "m7(-5)": "m7(b5)",
      "m7b5": "m7(b5)",
      "m7(b5)": "m7(b5)",
      "-7(-13)": "m7(b13)",
      "-7-13": "m7(b13)",
      "-7b13": "m7(b13)",
      "-7(b13)": "m7(b13)",
      "m7(-13)": "m7(b13)",
      "m7-13": "m7(b13)",
      "m7b13": "m7(b13)",
      "m7(b13)": "m7(b13)",
      "m7(add6)": "m7(6)",
      "m7(6)": "m7(6)",
      "m74": "m7(4)",
      "m7(4)": "m7(4)",
      "m7(add11)": "m7(4)",
      "m7(add4)": "m7(4)",
      "m7(11)": "m7(11)",
      "-7(+9)": "m7(#9)",
      "m7+9": "m7(#9)",
      "-7#9": "m7(#9)",
      "-7(#9)": "m7(#9)",
      "m7(+9)": "m7(#9)",
      "m7#9": "m7(#9)",
      "m7(#9)": "m7(#9)",
      "-7(+5)": "m7(#5)",
      "m7+5": "m7(#5)",
      "-7#5": "m7(#5)",
      "-7(#5)": "m7(#5)",
      "m7(+5)": "m7(#5)",
      "m7#5": "m7(#5)",
      "m7(#5)": "m7(#5)",
      "-7(+11)": "m7(#11)",
      "-7+11": "m7(#11)",
      "-7#11": "m7(#11)",
      "-7(#11)": "m7(#11)",
      "m7(+11)": "m7(#11)",
      "m7+11": "m7(#11)",
      "m7#11": "m7(#11)",
      "m7(#11)": "m7(#11)",
      "-7": "m7",
      "min7": "m7",
      "mi7": "m7",
      "m7": "m7",
      "m6+7": "m6(ma7)",
      "m6M7": "m6(ma7)",
      "m6(+7)": "m6(ma7)",
      "m6(M7)": "m6(ma7)",
      "m6(ma7)": "m6(ma7)",
      "m69": "m6(9)",
      "m6(add9)": "m6(9)",
      "m6add9": "m6(9)",
      "m6(9)": "m6(9)",
      "m6(#5)": "m6(#5)",
      "-6": "m6",
      "min6": "m6",
      "mi6": "m6",
      "m6": "m6",
      "m4": "m4",
      "madd2": "m2",
      "m(add2)": "m2",
      "min2": "m2",
      "mi2": "m2",
      "m2": "m2",
      "-13(-13)": "m13(b9)",
      "-13-13": "m13(b9)",
      "-13b13": "m13(b9)",
      "-13(b13)": "m13(b9)",
      "m13(-9)": "m13(b9)",
      "m13-9": "m13(b9)",
      "m13b9": "m13(b9)",
      "m13(b9)": "m13(b9)",
      "-13(-5)": "m13(b5)",
      "-13-5": "m13(b5)",
      "-13b5": "m13(b5)",
      "-13(b5)": "m13(b5)",
      "m13(-5)": "m13(b5)",
      "m13-5": "m13(b5)",
      "m13b5": "m13(b5)",
      "m13(b5)": "m13(b5)",
      "-13+9": "m13(#9)",
      "-13(+9)": "m13(#9)",
      "-13#9": "m13(#9)",
      "-13(#9)": "m13(#9)",
      "m13+9": "m13(#9)",
      "m13(+9)": "m13(#9)",
      "m13#9": "m13(#9)",
      "m13(#9)": "m13(#9)",
      "-13(+5)": "m13(#5)",
      "m13+5": "m13(#5)",
      "-13#5": "m13(#5)",
      "-13(#5)": "m13(#5)",
      "m13(+5)": "m13(#5)",
      "m13#5": "m13(#5)",
      "m13(#5)": "m13(#5)",
      "-13(+11)": "m13(#11)",
      "-13+11": "m13(#11)",
      "-13#11": "m13(#11)",
      "-13(#11)": "m13(#11)",
      "m13(+11)": "m13(#11)",
      "m13+11": "m13(#11)",
      "m13#11": "m13(#11)",
      "m13(#11)": "m13(#11)",
      "-13": "m13",
      "min13": "m13",
      "mi13": "m13",
      "m13": "m13",
      "-11-9-13": "m11(b9b13)",
      "-11(-9-13)": "m11(b9b13)",
      "-11b9b13": "m11(b9b13)",
      "-11(b9b13)": "m11(b9b13)",
      "m11-9-13": "m11(b9b13)",
      "m11(-9-13)": "m11(b9b13)",
      "m11b9b13": "m11(b9b13)",
      "m11(b9b13)": "m11(b9b13)",
      "-11(+5-9)": "m11(b9#5)",
      "m9+5-9": "m11(b9#5)",
      "-11#5b9": "m11(b9#5)",
      "-11(#5b9)": "m11(b9#5)",
      "m11(+5-9)": "m11(b9#5)",
      "m11+5-9": "m11(b9#5)",
      "m11#5b9": "m11(b9#5)",
      "m11(#5b9)": "m11(b9#5)",
      "m11(b9#5)": "m11(b9#5)",
      "-11-9": "m11(b9)",
      "-11(-9)": "m11(b9)",
      "-11b9": "m11(b9)",
      "-11(b9)": "m11(b9)",
      "m11-9": "m11(b9)",
      "m11(-9)": "m11(b9)",
      "m11b9": "m11(b9)",
      "m11(b9)": "m11(b9)",
      "-11(-5-9)": "m11(b5b9)",
      "-11-5-9": "m11(b5b9)",
      "-11b5b9": "m11(b5b9)",
      "-11(b5b9)": "m11(b5b9)",
      "m11(-5-9)": "m11(b5b9)",
      "m11-5-9": "m11(b5b9)",
      "m11b5b9": "m11(b5b9)",
      "m11(b5b9)": "m11(b5b9)",
      "-11-5-13": "m11(b5b13)",
      "-11(-5-13)": "m11(b5b13)",
      "-11b5b13": "m11(b5b13)",
      "-11(b5b13)": "m11(b5b13)",
      "m11-5-13": "m11(b5b13)",
      "m11(-5-13)": "m11(b5b13)",
      "m11b5b13": "m11(b5b13)",
      "m11(b5b13)": "m11(b5b13)",
      "-11(-5+9)": "m11(b5#9)",
      "-11-5+9": "m11(b5#9)",
      "-11b5#9": "m11(b5#9)",
      "-11(b5#9)": "m11(b5#9)",
      "m11(-5+9)": "m11(b5#9)",
      "m11-5+9": "m11(b5#9)",
      "m11b5#9": "m11(b5#9)",
      "m11(b5#9)": "m11(b5#9)",
      "-11(-5)": "m11(b5)",
      "-11b5": "m11(b5)",
      "-11(b5)": "m11(b5)",
      "m11(-5)": "m11(b5)",
      "m11-5": "m11(b5)",
      "m11b5": "m11(b5)",
      "m11(b5)": "m11(b5)",
      "-11(+5-13)": "m11(b13#5)",
      "-11+5-13": "m11(b13#5)",
      "-11#5b13": "m11(b13#5)",
      "-11(#5b13)": "m11(b13#5)",
      "m11(+5-13)": "m11(b13#5)",
      "m11+5-13": "m11(b13#5)",
      "m11#5b13": "m11(b13#5)",
      "m11(#5b13)": "m11(b13#5)",
      "m11(b13#5)": "m11(b13#5)",
      "-11(-13)": "m11(b13)",
      "-11-13": "m11(b13)",
      "-11b13": "m11(b13)",
      "-11(b13)": "m11(b13)",
      "m11(-13)": "m11(b13)",
      "m11-13": "m11(b13)",
      "m11b13": "m11(b13)",
      "m11(b13)": "m11(b13)",
      "-11(+9-13)": "m11(#9b13)",
      "-11+9-13": "m11(#9b13)",
      "-11#9b13": "m11(#9b13)",
      "-11(#9b13)": "m11(#9b13)",
      "m11(+9-13)": "m11(#9b13)",
      "m11+9-13": "m11(#9b13)",
      "m11#9b13": "m11(#9b13)",
      "m11(#9b13)": "m11(#9b13)",
      "-11(+5+9)": "m11(#9#5)",
      "m9+5+9": "m11(#9#5)",
      "-11#5#9": "m11(#9#5)",
      "-11(#5#9)": "m11(#9#5)",
      "m11(+5+9)": "m11(#9#5)",
      "m11+5+9": "m11(#9#5)",
      "m11#5#9": "m11(#9#5)",
      "m11(#5#9)": "m11(#9#5)",
      "m11(#9#5)": "m11(#9#5)",
      "-11(+9)": "m11(#9)",
      "-11+9": "m11(#9)",
      "-11#9": "m11(#9)",
      "-11(#9)": "m11(#9)",
      "m11(+9)": "m11(#9)",
      "m11+9": "m11(#9)",
      "m11#9": "m11(#9)",
      "m11(#9)": "m11(#9)",
      "-11(+5)": "m11(#5)",
      "-11#5": "m11(#5)",
      "-11(#5)": "m11(#5)",
      "m11(+5)": "m11(#5)",
      "m11+5": "m11(#5)",
      "m11#5": "m11(#5)",
      "m11(#5)": "m11(#5)",
      "-11": "m11",
      "min11": "m11",
      "mi11": "m11",
      "m11": "m11",
      "m(no5)": "m(no5)",
      "m+9": "m(ma9)",
      "m(+9)": "m(ma9)",
      "m(maj9)": "m(ma9)",
      "min(maj9)": "m(ma9)",
      "mi(maj9)": "m(ma9)",
      "m(M9)": "m(ma9)",
      "m(ma9)": "m(ma9)",
      "m+7": "m(ma7)",
      "m(+7)": "m(ma7)",
      "m(maj7)": "m(ma7)",
      "min(maj7)": "m(ma7)",
      "mi(maj7)": "m(ma7)",
      "m(M7)": "m(ma7)",
      "m(ma7)": "m(ma7)",
      "m(add9)": "m(9)",
      "m(9)": "m(9)",
      "m(add4)": "m(4)",
      "m(4)": "m(4)",
      "m(add11)": "m(11)",
      "m(11)": "m(11)",
      "-": "m",
      "minor": "m",
      "min": "m",
      "mi": "m",
      "m": "m",
      "dim 7th": "dim7",
      "dim 7": "dim7",
      "o7": "dim7",
      "dim7": "dim7",
      "-b5": "dim",
      "-(b5)": "dim",
      "m(-5)": "dim",
      "m-5": "dim",
      "mb5": "dim",
      "m(b5)": "dim",
      "dim": "dim",
      "b9sus": "b9sus",
      "b69sus": "b69sus",
      "b69(#11)": "b69(#11)",
      "m9sus": "9sus4",
      "m9sus4": "9sus4",
      "9sus": "9sus4",
      "9sus4": "9sus4",
      "9aug": "9aug",
      "9(-5)": "9(b5)",
      "9-5": "9(b5)",
      "9b5": "9(b5)",
      "9(b5)": "9(b5)",
      "9(-13)": "9(b13)",
      "9-13": "9(b13)",
      "9b13": "9(b13)",
      "9(b13)": "9(b13)",
      "x9": "9(#5)",
      "aug9": "9(#5)",
      "9(+5)": "9(#5)",
      "9+5": "9(#5)",
      "9#5": "9(#5)",
      "9(#5)": "9(#5)",
      "9(+11)": "9(#11)",
      "9+11": "9(#11)",
      "9#11": "9(#11)",
      "9(#11)": "9(#11)",
      "dom 9": "9",
      "dom9": "9",
      "7sus": "7sus4",
      "7sus4": "7sus4",
      "7sus(b9)": "7sus(b9)",
      "7sus(6)": "7sus(6)",
      "7b9sus4": "7b9sus4",
      "7aug5": "7aug5",
      "7(no3)": "7(no3)",
      "7(b9b5)": "7(b9b5)",
      "7(-13-9)": "7(b9b13)",
      "7-13-9": "7(b9b13)",
      "7b13b9": "7(b9b13)",
      "7(b13b9)": "7(b9b13)",
      "7(-9-13)": "7(b9b13)",
      "7-9-13": "7(b9b13)",
      "7b9b13": "7(b9b13)",
      "7(b9b13)": "7(b9b13)",
      "7(+5-9)": "7(b9#5)",
      "7+5-9": "7(b9#5)",
      "7#5b9": "7(b9#5)",
      "7(#5b9)": "7(b9#5)",
      "7(b9#5)": "7(b9#5)",
      "7(-9)": "7(b9)",
      "7-9": "7(b9)",
      "7b9": "7(b9)",
      "7(b9)": "7(b9)",
      "7(-5-9)": "7(b5b9)",
      "7-5-9": "7(b5b9)",
      "7b5b9": "7(b5b9)",
      "7(b5b9)": "7(b5b9)",
      "7(-5+9)": "7(b5#9)",
      "7-5+9": "7(b5#9)",
      "7b5#9": "7(b5#9)",
      "7(b5#9)": "7(b5#9)",
      "7(-5+11)": "7(b5#11)",
      "7-5+11": "7(b5#11)",
      "7b5#11": "7(b5#11)",
      "7(b5#11)": "7(b5#11)",
      "7(-5)": "7(b5)",
      "7-5": "7(b5)",
      "7b5": "7(b5)",
      "7(b5)": "7(b5)",
      "7(-13)": "7(b13)",
      "7-13": "7(b13)",
      "7b13": "7(b13)",
      "7(b13)": "7(b13)",
      "7(6)": "7(6)",
      "7(#9b5)": "7(#9b5)",
      "7(-13+9)": "7(#9b13)",
      "7-13+9": "7(#9b13)",
      "7b13#9": "7(#9b13)",
      "7(b13#9)": "7(#9b13)",
      "7+9-13": "7(#9b13)",
      "7(+9-13)": "7(#9b13)",
      "7#9b13": "7(#9b13)",
      "7(#9b13)": "7(#9b13)",
      "7(+5+9)": "7(#9#5)",
      "7+5+9": "7(#9#5)",
      "7#5#9": "7(#9#5)",
      "7(#5#9)": "7(#9#5)",
      "7(#9#5)": "7(#9#5)",
      "7(+9)": "7(#9)",
      "7+9": "7(#9)",
      "7#9": "7(#9)",
      "7(#9)": "7(#9)",
      "7(+5+11)": "7(#5#11)",
      "7+5+11": "7(#5#11)",
      "7#5#11": "7(#5#11)",
      "7(#5#11)": "7(#5#11)",
      "aug 7th": "7(#5)",
      "aug 7": "7(#5)",
      "x7": "7(#5)",
      "7(+5)": "7(#5)",
      "7+5": "7(#5)",
      "7#5": "7(#5)",
      "aug7": "7(#5)",
      "7(#5)": "7(#5)",
      "7(+11)": "7(#11)",
      "7+11": "7(#11)",
      "7#11": "7(#11)",
      "7(#11)": "7(#11)",
      "dom 7th": "7",
      "dom 7": "7",
      "dom7": "7",
      "6(add9)": "6(9)",
      "6(9)": "6(9)",
      "6(no3)": "6(no3)",
      "6(b9)": "6(b9)",
      "6(2)": "6(2)",
      "5(no3)": "5",
      "(no 3rd)": "5",
      "(no 3)": "5",
      "(no3)": "5",
      "no3": "5",
      "sus42": "4(2)",
      "4(2)": "4(2)",
      "2(no3)": "2(no3)",
      "2(ma7)": "2(ma7)",
      "sus2(4)": "2(4)",
      "2(4)": "2(4)",
      "2(+7)": "2(+7)",
      "2(#4)(#42)(2#4)": "2(#4)(#42)(2#4)",
      "(#4)2": "2(#4)",
      "2(#4)": "2(#4)",
      "2(+4)": "2(#4)",
      "2#4": "2(#4)",
      "2+4": "2(#4)",
      "2(#11)": "2(#11)",
      "add9(no3)": "2",
      "sus2": "2",
      "m13sus": "13sus4",
      "m13sus4": "13sus4",
      "13sus": "13sus4",
      "13sus4": "13sus4",
      "13(-9-5)": "13(b9b5)",
      "13-9-5": "13(b9b5)",
      "13b9b5": "13(b9b5)",
      "13(b9b5)": "13(b9b5)",
      "13(-9+5)": "13(b9#5)",
      "13-9+5": "13(b9#5)",
      "13b9#5": "13(b9#5)",
      "13(b9#5)": "13(b9#5)",
      "13(-9)": "13(b9)",
      "13-9": "13(b9)",
      "13b9": "13(b9)",
      "13(b9)": "13(b9)",
      "13(-5)": "13(b5)",
      "13-5": "13(b5)",
      "13b5": "13(b5)",
      "13(b5)": "13(b5)",
      "13(add4)": "13(add4)",
      "13+9-5": "13(#9b5)",
      "13(+9-5)": "13(#9b5)",
      "13#9b5": "13(#9b5)",
      "13(#9b5)": "13(#9b5)",
      "13+9+5": "13(#9#5)",
      "13(+9+5)": "13(#9#5)",
      "13#9#5": "13(#9#5)",
      "13(#9#5)": "13(#9#5)",
      "13+9": "13(#9)",
      "13(+9)": "13(#9)",
      "13#9": "13(#9)",
      "13(#9)": "13(#9)",
      "13(+5)": "13(#5)",
      "13+5": "13(#5)",
      "13#5": "13(#5)",
      "13(#5)": "13(#5)",
      "13(+11)": "13(#11)",
      "13+11": "13(#11)",
      "13#11": "13(#11)",
      "13(#11)": "13(#11)",
      "dom 13": "13",
      "dom13": "13",
      "m11sus": "11sus4",
      "m11sus4": "11sus4",
      "11sus": "11sus4",
      "11sus4": "11sus4",
      "11(-9)": "11(b9)",
      "11-9": "11(b9)",
      "11b9": "11(b9)",
      "11(b9)": "11(b9)",
      "11(-5)": "11(b5)",
      "11-5": "11(b5)",
      "11b5": "11(b5)",
      "11(b5)": "11(b5)",
      "11(-13)": "11(b13)",
      "11-13": "11(b13)",
      "11b13": "11(b13)",
      "11(b13)": "11(b13)",
      "11(+9)": "11(#9)",
      "11+9": "11(#9)",
      "11#9": "11(#9)",
      "11(#9)": "11(#9)",
      "11(+5)": "11(#5)",
      "11+5": "11(#5)",
      "11#5": "11(#5)",
      "11(#5)": "11(#5)",
      "dom 11": "11",
      "dom11": "11",
      "x": "+",
      "(+5)": "+",
      "+5": "+",
      "#5": "+",
      "(#5)": "+",
      "aug": "+",
      "+": "+",
      "Majj": "[blank]",
      "Ma": "[blank]",
      "ma": "[blank]",
      "M": "[blank]",
      "major": "[blank]",
      "maj": "[blank]",
      "[blank]": "[blank]",
      "unis": "(unis)",
      "(unis)": "(unis)",
      "(b6)": "(b6)",
      "2(6)": "2(6)",
      "b5": "(b5)",
      "(-5)": "(b5)",
      "-5": "(b5)",
      "(b5)": "(b5)",
      "(add9)": "(9)",
      "add9": "(9)",
      "(9)": "(9)",
      "(7)": "(7)",
      "(add6)": "(6)",
      "add6": "(6)",
      "(6)": "(6)",
      "sus(4)": "(4)",
      "(add4)": "(4)",
      "add4": "(4)",
      "(4)": "(4)",
      "(add2)": "(2)",
      "add2": "(2)",
      "(2)": "(2)",
      "(add13)": "(13)",
      "add13": "(13)",
      "(13)": "(13)",
      "(add11)": "(11)",
      "add11": "(11)",
      "(11)": "(11)",
      "(+4)": "(#4)",
      "+4": "(#4)",
      "#4": "(#4)",
      "(#4)": "(#4)"
    };
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord.js
var require_chord = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    exports.parseChord = parseChord;
    var _utilities = require_utilities();
    var _key = _interopRequireDefault(require_key());
    var _suffixNormalizeMapping = _interopRequireDefault(require_suffix_normalize_mapping());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classPrivateMethodInitSpec(obj, privateSet) {
      _checkPrivateRedeclaration(obj, privateSet);
      privateSet.add(obj);
    }
    function _classPrivateFieldInitSpec(obj, privateMap, value) {
      _checkPrivateRedeclaration(obj, privateMap);
      privateMap.set(obj, value);
    }
    function _checkPrivateRedeclaration(obj, privateCollection) {
      if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
    }
    function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _wrapRegExp() {
      _wrapRegExp = function _wrapRegExp2(re, groups) {
        return new BabelRegExp(re, void 0, groups);
      };
      var _super = RegExp.prototype, _groups = /* @__PURE__ */ new WeakMap();
      function BabelRegExp(re, flags, groups) {
        var _this = new RegExp(re, flags);
        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
      }
      function buildGroups(result, re) {
        var g = _groups.get(re);
        return Object.keys(g).reduce(function(groups, name) {
          return groups[name] = result[g[name]], groups;
        }, /* @__PURE__ */ Object.create(null));
      }
      return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {
        var result = _super.exec.call(this, str);
        return result && (result.groups = buildGroups(result, this)), result;
      }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
        if (typeof substitution == "string") {
          var groups = _groups.get(this);
          return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
            return "$" + groups[name];
          }));
        }
        if (typeof substitution == "function") {
          var _this = this;
          return _super[Symbol.replace].call(this, str, function() {
            var args = arguments;
            return _typeof(args[args.length - 1]) != "object" && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
          });
        }
        return _super[Symbol.replace].call(this, str, substitution);
      }, _wrapRegExp.apply(this, arguments);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function normalizeSuffix(suffix) {
      if (_suffixNormalizeMapping["default"][suffix] === "[blank]") {
        return null;
      }
      return _suffixNormalizeMapping["default"][suffix] || suffix;
    }
    var chordRegex = _wrapRegExp(/^([A-G])(#|b)?((?:(?![\t-\r \/\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])[\s\S])*)(\/([A-G])(#|b)?)?$/i, {
      base: 1,
      modifier: 2,
      suffix: 3,
      bassBase: 5,
      bassModifier: 6
    });
    var numericChordRegex = _wrapRegExp(/^(#|b)?([1-7])((?:(?![\t-\r \/\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])[\s\S])*)(\/(#|b)?([0-7]))?$/, {
      modifier: 1,
      base: 2,
      suffix: 3,
      bassModifier: 5,
      bassBase: 6
    });
    var sortedNumerals = _toConsumableArray(_constants.ROMAN_NUMERALS).sort(function(numeralA, numeralB) {
      return numeralB.length - numeralA.length;
    });
    var numerals = [].concat(_toConsumableArray(sortedNumerals), _toConsumableArray(sortedNumerals.map(function(numeral) {
      return numeral.toLowerCase();
    }))).join("|");
    var numeralChordRegex = new RegExp("^(?<modifier>#|b)?(?<base>".concat(numerals, ")(?<suffix>[^/\\s]*)(\\/(?<bassModifier>#|b)?(?<bassBase>").concat(numerals, "))?$"));
    var regexes = [numericChordRegex, numeralChordRegex, chordRegex];
    var _rootNote = /* @__PURE__ */ new WeakMap();
    var _process = /* @__PURE__ */ new WeakSet();
    var _is = /* @__PURE__ */ new WeakSet();
    var Chord = function() {
      function Chord2(_ref) {
        var _ref$base = _ref.base, base = _ref$base === void 0 ? null : _ref$base, _ref$modifier = _ref.modifier, modifier = _ref$modifier === void 0 ? null : _ref$modifier, _ref$suffix = _ref.suffix, suffix = _ref$suffix === void 0 ? null : _ref$suffix, _ref$bassBase = _ref.bassBase, bassBase = _ref$bassBase === void 0 ? null : _ref$bassBase, _ref$bassModifier = _ref.bassModifier, bassModifier = _ref$bassModifier === void 0 ? null : _ref$bassModifier, _ref$root = _ref.root, root = _ref$root === void 0 ? null : _ref$root, _ref$bass = _ref.bass, bass = _ref$bass === void 0 ? null : _ref$bass;
        _classCallCheck(this, Chord2);
        _classPrivateMethodInitSpec(this, _is);
        _classPrivateMethodInitSpec(this, _process);
        _classPrivateFieldInitSpec(this, _rootNote, {
          get: _get_rootNote,
          set: void 0
        });
        this.suffix = (0, _utilities.presence)(suffix);
        this.root = root || new _key["default"]({
          note: base,
          modifier,
          minor: suffix === "m"
        });
        if (bass) {
          this.bass = bass;
        } else if (bassBase) {
          this.bass = new _key["default"]({
            note: bassBase,
            modifier: bassModifier,
            minor: suffix === "m"
          });
        } else {
          this.bass = null;
        }
      }
      _createClass(Chord2, [{
        key: "clone",
        value: function clone() {
          return this.set({});
        }
      }, {
        key: "toChordSymbol",
        value: function toChordSymbol(key) {
          var _this$bass;
          if (this.isChordSymbol()) {
            return this.clone();
          }
          var keyObj = _key["default"].wrap(key);
          var rootKey = this.root.toChordSymbol(keyObj).normalizeEnharmonics(keyObj);
          var chordSymbolChord = new Chord2({
            suffix: normalizeSuffix(this.suffix),
            root: rootKey,
            bass: (_this$bass = this.bass) === null || _this$bass === void 0 ? void 0 : _this$bass.toChordSymbol(keyObj).normalizeEnharmonics(rootKey)
          });
          if (this.root.isMinor()) {
            chordSymbolChord = chordSymbolChord.makeMinor();
          }
          return chordSymbolChord;
        }
      }, {
        key: "toChordSymbolString",
        value: function toChordSymbolString(key) {
          return this.toChordSymbol(key).toString();
        }
      }, {
        key: "isChordSymbol",
        value: function isChordSymbol() {
          return _classPrivateMethodGet(this, _is, _is2).call(this, _constants.SYMBOL);
        }
      }, {
        key: "toNumeric",
        value: function toNumeric(key) {
          var _this$bass3;
          if (this.isNumeric()) {
            return this.clone();
          }
          if (this.isNumeral()) {
            var _this$bass2;
            return this.set({
              root: this.root.toNumeric(),
              bass: (_this$bass2 = this.bass) === null || _this$bass2 === void 0 ? void 0 : _this$bass2.toNumeric()
            });
          }
          var keyObj = _key["default"].wrap(key);
          return new Chord2({
            suffix: normalizeSuffix(this.suffix),
            root: this.root.toNumeric(keyObj),
            bass: (_this$bass3 = this.bass) === null || _this$bass3 === void 0 ? void 0 : _this$bass3.toNumeric(keyObj)
          });
        }
      }, {
        key: "toNumeral",
        value: function toNumeral() {
          var _this$bass5;
          var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          if (this.isNumeral()) {
            return this.clone();
          }
          if (this.isNumeric()) {
            var _this$bass4;
            return this.set({
              root: this.root.toNumeral(),
              bass: (_this$bass4 = this.bass) === null || _this$bass4 === void 0 ? void 0 : _this$bass4.toNumeral()
            });
          }
          var keyObj = _key["default"].wrap(key);
          return new Chord2({
            suffix: normalizeSuffix(this.suffix),
            root: this.root.toNumeral(keyObj),
            bass: (_this$bass5 = this.bass) === null || _this$bass5 === void 0 ? void 0 : _this$bass5.toNumeral(keyObj)
          });
        }
      }, {
        key: "toNumeralString",
        value: function toNumeralString(key) {
          return this.toNumeral(key).toString();
        }
      }, {
        key: "isNumeric",
        value: function isNumeric() {
          return _classPrivateMethodGet(this, _is, _is2).call(this, _constants.NUMERIC);
        }
      }, {
        key: "toNumericString",
        value: function toNumericString(key) {
          return this.toNumeric(key).toString();
        }
      }, {
        key: "isNumeral",
        value: function isNumeral() {
          return _classPrivateMethodGet(this, _is, _is2).call(this, _constants.NUMERAL);
        }
      }, {
        key: "toString",
        value: function toString() {
          var chordString = this.root.toString() + (this.suffix || "");
          if (this.bass) {
            return "".concat(chordString, "/").concat(this.bass.toString());
          }
          return chordString;
        }
      }, {
        key: "normalize",
        value: function normalize(key) {
          if (!(0, _utilities.presence)(key)) {
            return _classPrivateMethodGet(this, _process, _process2).call(this, "normalize").set({
              suffix: (0, _utilities.presence)(normalizeSuffix(this.suffix))
            });
          }
          return this.set({
            root: this.root.normalizeEnharmonics(key),
            suffix: (0, _utilities.presence)(normalizeSuffix(this.suffix)),
            bass: this.bass ? this.bass.normalizeEnharmonics(this.root.toString()) : null
          });
        }
      }, {
        key: "useModifier",
        value: function useModifier(newModifier) {
          return _classPrivateMethodGet(this, _process, _process2).call(this, "useModifier", newModifier);
        }
      }, {
        key: "transposeUp",
        value: function transposeUp() {
          return _classPrivateMethodGet(this, _process, _process2).call(this, "transposeUp");
        }
      }, {
        key: "transposeDown",
        value: function transposeDown() {
          return _classPrivateMethodGet(this, _process, _process2).call(this, "transposeDown");
        }
      }, {
        key: "transpose",
        value: function transpose(delta) {
          return _classPrivateMethodGet(this, _process, _process2).call(this, "transpose", delta);
        }
      }, {
        key: "makeMinor",
        value: function makeMinor() {
          if (!this.suffix || this.suffix[0] !== "m") {
            return this.set({
              suffix: "m".concat(this.suffix || "")
            });
          }
          return this.clone();
        }
      }, {
        key: "set",
        value: function set(properties) {
          var _this$bass6;
          return new this.constructor(_objectSpread({
            root: this.root.clone(),
            suffix: this.suffix,
            bass: (_this$bass6 = this.bass) === null || _this$bass6 === void 0 ? void 0 : _this$bass6.clone()
          }, properties));
        }
      }], [{
        key: "parse",
        value: function parse(chordString) {
          for (var i = 0, count = regexes.length; i < count; i += 1) {
            var match = chordString.match(regexes[i]);
            if (match) {
              return new Chord2(match.groups);
            }
          }
          return null;
        }
      }]);
      return Chord2;
    }();
    function _get_rootNote() {
      return this.root.note.note;
    }
    function _process2(func) {
      var arg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return this.set({
        root: this.root[func](arg),
        bass: this.bass ? this.bass[func](arg) : null
      });
    }
    function _is2(type) {
      return this.root.is(type) && (!this.bass || this.bass.is(type));
    }
    function parseChord(chordString) {
      (0, _utilities.deprecate)("parseChord() is deprecated, please use Chord.parse() instead");
      return Chord.parse(chordString);
    }
    var _default = Chord;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/metadata.js
var require_metadata = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _tag = require_tag();
    var _chord = _interopRequireDefault(require_chord());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function appendValue(array, key, value) {
      if (!array.includes(value)) {
        array.push(value);
      }
    }
    var Metadata = function() {
      function Metadata2() {
        var _this = this;
        var metadata = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Metadata2);
        Object.keys(metadata).filter(function(key) {
          return !(0, _tag.isReadonlyTag)(key);
        }).forEach(function(key) {
          var value = metadata[key];
          if (value instanceof Array) {
            _this[key] = _toConsumableArray(value);
          } else {
            _this[key] = value;
          }
        });
      }
      _createClass(Metadata2, [{
        key: "contains",
        value: function contains(key) {
          return key in this;
        }
      }, {
        key: "add",
        value: function add(key, value) {
          if ((0, _tag.isReadonlyTag)(key)) {
            return;
          }
          if (!(key in this)) {
            this[key] = value;
            return;
          }
          var currentValue = this[key];
          if (currentValue === value) {
            return;
          }
          if (currentValue instanceof Array) {
            appendValue(currentValue, key, value);
            return;
          }
          this[key] = [currentValue, value];
        }
      }, {
        key: "set",
        value: function set(key, value) {
          if (value) {
            this[key] = value;
          } else {
            delete this[key];
          }
        }
      }, {
        key: "get",
        value: function get(prop) {
          if (prop === _tag._KEY) {
            return this.calculateKeyFromCapo();
          }
          if (prop in this) {
            return this[prop];
          }
          return this.getArrayItem(prop);
        }
      }, {
        key: "parseArrayKey",
        value: function parseArrayKey(prop) {
          var match = prop.match(/(.+)\.(-?\d+)$/);
          if (!match) {
            return [];
          }
          var key = match[1];
          var index = parseInt(match[2], 10);
          return [key, index];
        }
      }, {
        key: "getArrayItem",
        value: function getArrayItem(prop) {
          var _this$parseArrayKey = this.parseArrayKey(prop), _this$parseArrayKey2 = _slicedToArray(_this$parseArrayKey, 2), key = _this$parseArrayKey2[0], index = _this$parseArrayKey2[1];
          if (!(key && index)) {
            return void 0;
          }
          var arrayValue = this[key] || [];
          var itemIndex = index;
          if (itemIndex < 0) {
            itemIndex = arrayValue.length + itemIndex;
          } else if (itemIndex > 0) {
            itemIndex -= 1;
          }
          return arrayValue[itemIndex];
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Metadata2(this);
        }
      }, {
        key: "calculateKeyFromCapo",
        value: function calculateKeyFromCapo() {
          var capo = this.get(_tag.CAPO);
          var key = this.get(_tag.KEY);
          if (capo && key) {
            return _chord["default"].parse(key).transpose(parseInt(capo, 10)).toString();
          }
          return void 0;
        }
      }]);
      return Metadata2;
    }();
    var _default = Metadata;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/parser_warning.js
var require_parser_warning = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/parser_warning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ParserWarning = function() {
      function ParserWarning2(message, lineNumber, column) {
        _classCallCheck(this, ParserWarning2);
        this.message = message;
        this.lineNumber = lineNumber;
        this.column = column;
      }
      _createClass(ParserWarning2, [{
        key: "toString",
        value: function toString() {
          return "Warning: ".concat(this.message, " on line ").concat(this.lineNumber, " column ").concat(this.column);
        }
      }]);
      return ParserWarning2;
    }();
    var _default = ParserWarning;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/song.js
var require_song = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/song.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _line = _interopRequireDefault(require_line());
    var _paragraph = _interopRequireDefault(require_paragraph());
    var _key = _interopRequireDefault(require_key());
    var _chord = _interopRequireDefault(require_chord());
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _utilities = require_utilities();
    var _metadata = _interopRequireDefault(require_metadata());
    var _parser_warning = _interopRequireDefault(require_parser_warning());
    var _constants = require_constants();
    var _tag = _interopRequireWildcard(require_tag());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classPrivateMethodInitSpec(obj, privateSet) {
      _checkPrivateRedeclaration(obj, privateSet);
      privateSet.add(obj);
    }
    function _checkPrivateRedeclaration(obj, privateCollection) {
      if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
    }
    function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
    var _insertDirective = /* @__PURE__ */ new WeakSet();
    var _mapItems = /* @__PURE__ */ new WeakSet();
    var _mapLines = /* @__PURE__ */ new WeakSet();
    var _updateItem = /* @__PURE__ */ new WeakSet();
    var _removeItem = /* @__PURE__ */ new WeakSet();
    var Song = function() {
      function Song2() {
        var metadata = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Song2);
        _classPrivateMethodInitSpec(this, _removeItem);
        _classPrivateMethodInitSpec(this, _updateItem);
        _classPrivateMethodInitSpec(this, _mapLines);
        _classPrivateMethodInitSpec(this, _mapItems);
        _classPrivateMethodInitSpec(this, _insertDirective);
        this.lines = [];
        this.paragraphs = [];
        this.metadata = new _metadata["default"](metadata);
        this.currentLine = null;
        this.currentParagraph = null;
        this.warnings = [];
        this.sectionType = _constants.NONE;
        this.currentKey = null;
        this.transposeKey = null;
      }
      _createClass(Song2, [{
        key: "previousLine",
        get: function get() {
          var count = this.lines.length;
          if (count >= 2) {
            return this.lines[count - 2];
          }
          return null;
        }
      }, {
        key: "bodyLines",
        get: function get() {
          return this.selectRenderableItems("_bodyLines", "lines");
        }
      }, {
        key: "bodyParagraphs",
        get: function get() {
          return this.selectRenderableItems("_bodyParagraphs", "paragraphs");
        }
      }, {
        key: "selectRenderableItems",
        value: function selectRenderableItems(targetProp, sourceProp) {
          if (this[targetProp] === void 0) {
            this[targetProp] = _toConsumableArray(this[sourceProp]);
            var collection = this[targetProp];
            while (collection.length > 0 && !collection[0].hasRenderableItems()) {
              this[targetProp].shift();
            }
          }
          return this[targetProp];
        }
      }, {
        key: "chords",
        value: function chords(chr) {
          this.currentLine.chords(chr);
        }
      }, {
        key: "lyrics",
        value: function lyrics(chr) {
          this.ensureLine();
          this.currentLine.lyrics(chr);
        }
      }, {
        key: "addLine",
        value: function addLine() {
          var _this$transposeKey;
          this.ensureParagraph();
          this.flushLine();
          this.currentLine = (0, _utilities.pushNew)(this.lines, _line["default"]);
          this.setCurrentLineType(this.sectionType);
          this.currentLine.transposeKey = (_this$transposeKey = this.transposeKey) !== null && _this$transposeKey !== void 0 ? _this$transposeKey : this.currentKey;
          this.currentLine.key = this.currentKey || this.key;
          return this.currentLine;
        }
      }, {
        key: "setCurrentLineType",
        value: function setCurrentLineType(sectionType) {
          this.currentLine.type = sectionType;
        }
      }, {
        key: "flushLine",
        value: function flushLine() {
          if (this.currentLine !== null) {
            if (this.currentLine.isEmpty()) {
              this.addParagraph();
            } else if (this.currentLine.hasRenderableItems()) {
              this.currentParagraph.addLine(this.currentLine);
            }
          }
        }
      }, {
        key: "finish",
        value: function finish() {
          this.flushLine();
        }
      }, {
        key: "addChordLyricsPair",
        value: function addChordLyricsPair() {
          var chords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          var lyrics = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
          this.ensureLine();
          return this.currentLine.addChordLyricsPair(chords, lyrics);
        }
      }, {
        key: "ensureLine",
        value: function ensureLine() {
          if (this.currentLine === null) {
            this.addLine();
          }
        }
      }, {
        key: "addParagraph",
        value: function addParagraph() {
          this.currentParagraph = (0, _utilities.pushNew)(this.paragraphs, _paragraph["default"]);
          return this.currentParagraph;
        }
      }, {
        key: "ensureParagraph",
        value: function ensureParagraph() {
          if (this.currentParagraph === null) {
            this.addParagraph();
          }
        }
      }, {
        key: "addTag",
        value: function addTag(tagContents) {
          var tag = _tag["default"].parse(tagContents);
          if (tag.isMetaTag()) {
            this.setMetaData(tag.name, tag.value);
          } else if (tag.name === _tag.TRANSPOSE) {
            this.transposeKey = tag.value;
          } else if (tag.name === _tag.NEW_KEY) {
            this.currentKey = tag.value;
          } else {
            this.setSectionTypeFromTag(tag);
          }
          this.ensureLine();
          this.currentLine.addTag(tag);
          return tag;
        }
      }, {
        key: "setSectionTypeFromTag",
        value: function setSectionTypeFromTag(tag) {
          switch (tag.name) {
            case _tag.START_OF_CHORUS:
              this.startSection(_constants.CHORUS, tag);
              break;
            case _tag.END_OF_CHORUS:
              this.endSection(_constants.CHORUS, tag);
              break;
            case _tag.START_OF_TAB:
              this.startSection(_constants.TAB, tag);
              break;
            case _tag.END_OF_TAB:
              this.endSection(_constants.TAB, tag);
              break;
            case _tag.START_OF_VERSE:
              this.startSection(_constants.VERSE, tag);
              break;
            case _tag.END_OF_VERSE:
              this.endSection(_constants.VERSE, tag);
              break;
            default:
              break;
          }
        }
      }, {
        key: "startSection",
        value: function startSection(sectionType, tag) {
          this.checkCurrentSectionType(_constants.NONE, tag);
          this.sectionType = sectionType;
          this.setCurrentLineType(sectionType);
        }
      }, {
        key: "endSection",
        value: function endSection(sectionType, tag) {
          this.checkCurrentSectionType(sectionType, tag);
          this.sectionType = _constants.NONE;
        }
      }, {
        key: "checkCurrentSectionType",
        value: function checkCurrentSectionType(sectionType, tag) {
          if (this.sectionType !== sectionType) {
            this.addWarning("Unexpected tag {".concat(tag.originalName, ", current section is: ").concat(this.sectionType), tag);
          }
        }
      }, {
        key: "addWarning",
        value: function addWarning(message, _ref) {
          var line = _ref.line, column = _ref.column;
          var warning = new _parser_warning["default"](message, line, column);
          this.warnings.push(warning);
        }
      }, {
        key: "addComment",
        value: function addComment(comment) {
          this.ensureLine();
          this.currentLine.addComment(comment);
        }
      }, {
        key: "addItem",
        value: function addItem(item) {
          if (item instanceof _tag["default"]) {
            this.addTag(item);
          } else {
            this.ensureLine();
            this.currentLine.addItem(item);
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          return _classPrivateMethodGet(this, _mapItems, _mapItems2).call(this, null);
        }
      }, {
        key: "setMetaData",
        value: function setMetaData(name, value) {
          this.metadata.add(name, value);
        }
      }, {
        key: "metaData",
        get: function get() {
          (0, _utilities.deprecate)('metaData has been deprecated, please use metadata instead (notice the lowercase "d")');
          return this.metadata;
        }
      }, {
        key: "getMetaData",
        value: function getMetaData(name) {
          return this.metadata[name] || null;
        }
      }, {
        key: "setCapo",
        value: function setCapo(capo) {
          var updatedSong;
          if (capo === null) {
            updatedSong = _classPrivateMethodGet(this, _removeItem, _removeItem2).call(this, function(item) {
              return item instanceof _tag["default"] && item.name === _tag.CAPO;
            });
          } else {
            updatedSong = _classPrivateMethodGet(this, _updateItem, _updateItem2).call(this, function(item) {
              return item instanceof _tag["default"] && item.name === _tag.CAPO;
            }, function(item) {
              return item.set({
                value: capo
              });
            }, function(song) {
              return _classPrivateMethodGet(song, _insertDirective, _insertDirective2).call(song, _tag.CAPO, capo);
            });
          }
          updatedSong.metadata.set("capo", capo);
          return updatedSong;
        }
      }, {
        key: "setKey",
        value: function setKey(key) {
          var transpose = _key["default"].distance(this.key, key);
          var updatedSong = _classPrivateMethodGet(this, _mapItems, _mapItems2).call(this, function(item) {
            if (item instanceof _tag["default"] && item.name === _tag.KEY) {
              return item.set({
                value: key
              });
            }
            if (item instanceof _chord_lyrics_pair["default"]) {
              var chordObj = _chord["default"].parse(item.chords);
              if (chordObj) {
                return item.set({
                  chords: chordObj.transpose(transpose).normalize(key)
                });
              }
            }
            return item;
          });
          updatedSong.metadata.set("key", key);
          return updatedSong;
        }
      }]);
      return Song2;
    }();
    function _insertDirective2(name, value) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$after = _ref2.after, after = _ref2$after === void 0 ? null : _ref2$after;
      var insertIndex = this.lines.findIndex(function(line) {
        return line.items.some(function(item) {
          return !(item instanceof _tag["default"]) || after && item instanceof _tag["default"] && item.name === after;
        });
      });
      var newLine = new _line["default"]();
      newLine.addTag(name, value);
      var clonedSong = this.clone();
      var lines = clonedSong.lines;
      clonedSong.lines = [].concat(_toConsumableArray(lines.slice(0, insertIndex)), [newLine], _toConsumableArray(lines.slice(insertIndex)));
      return clonedSong;
    }
    function _mapItems2(func) {
      var clonedSong = new Song();
      clonedSong.lines = this.lines.map(function(line) {
        return line.mapItems(func);
      });
      clonedSong.metadata = this.metadata.clone();
      return clonedSong;
    }
    function _mapLines2(func) {
      var clonedSong = new Song();
      clonedSong.lines = this.lines.map(function(line) {
        return func(line.clone());
      }).filter(function(line) {
        return line;
      });
      clonedSong.metadata = this.metadata.clone();
      return clonedSong;
    }
    function _updateItem2(findCallback, updateCallback, notFoundCallback) {
      var found = false;
      var updatedSong = _classPrivateMethodGet(this, _mapItems, _mapItems2).call(this, function(item) {
        if (findCallback(item)) {
          found = true;
          return updateCallback(item);
        }
        return item;
      });
      if (!found) {
        return notFoundCallback(updatedSong);
      }
      return updatedSong;
    }
    function _removeItem2(callback) {
      return _classPrivateMethodGet(this, _mapLines, _mapLines2).call(this, function(line) {
        var items = line.items;
        var index = items.findIndex(callback);
        if (index === -1) {
          return line;
        }
        if (items.length === 1) {
          return null;
        }
        return line.set({
          items: [].concat(_toConsumableArray(items.slice(0, index)), _toConsumableArray(items.slice(index + 1)))
        });
      });
    }
    var defineProperty = Object.defineProperty;
    var songPrototype = Song.prototype;
    _tag.META_TAGS.forEach(function(tagName) {
      defineProperty(songPrototype, tagName, {
        get: function get() {
          return this.getMetaData(tagName);
        }
      });
    });
    var _default = Song;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/evaluation_error.js
var require_evaluation_error = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/evaluation_error.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var EvaluationError = function(_Error) {
      _inherits(EvaluationError2, _Error);
      var _super = _createSuper(EvaluationError2);
      function EvaluationError2(message, line, column, offset) {
        var _this;
        _classCallCheck(this, EvaluationError2);
        _this = _super.call(this, "".concat(message, " on line ").concat(line, " column ").concat(column));
        _this.name = "ExpressionError";
        _this.line = line;
        _this.column = column;
        _this.offset = offset;
        return _this;
      }
      return _createClass(EvaluationError2);
    }(_wrapNativeSuper(Error));
    var _default = EvaluationError;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/composite.js
var require_composite = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/composite.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Composite = function() {
      function Composite2(expressions) {
        var variable = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        _classCallCheck(this, Composite2);
        this.expressions = expressions;
        this.variable = variable;
      }
      _createClass(Composite2, [{
        key: "evaluate",
        value: function evaluate(metadata) {
          var _this = this;
          return this.expressions.map(function(expression) {
            return expression.evaluate(metadata, _this.variable);
          }).join("");
        }
      }, {
        key: "isRenderable",
        value: function isRenderable() {
          return true;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Composite2({
            expressions: this.expressions.map(function(expression) {
              return expression.clone();
            }),
            variable: this.variable
          });
        }
      }]);
      return Composite2;
    }();
    var _default = Composite;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/ternary.js
var require_ternary = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet/chord_pro/ternary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _evaluation_error = _interopRequireDefault(require_evaluation_error());
    var _utilities = require_utilities();
    var _composite = _interopRequireDefault(require_composite());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Ternary = function() {
      function Ternary2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$variable = _ref.variable, variable = _ref$variable === void 0 ? null : _ref$variable, _ref$valueTest = _ref.valueTest, valueTest = _ref$valueTest === void 0 ? null : _ref$valueTest, _ref$trueExpression = _ref.trueExpression, trueExpression = _ref$trueExpression === void 0 ? null : _ref$trueExpression, _ref$falseExpression = _ref.falseExpression, falseExpression = _ref$falseExpression === void 0 ? null : _ref$falseExpression, _ref$line = _ref.line, line = _ref$line === void 0 ? null : _ref$line, _ref$column = _ref.column, column = _ref$column === void 0 ? null : _ref$column, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? null : _ref$offset;
        _classCallCheck(this, Ternary2);
        this.variable = (0, _utilities.presence)(variable);
        this.valueTest = valueTest;
        this.trueExpression = trueExpression;
        this.falseExpression = falseExpression;
        this.line = line;
        this.column = column;
        this.offset = offset;
      }
      _createClass(Ternary2, [{
        key: "evaluate",
        value: function evaluate(metadata) {
          var upperContext = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          if (this.variable) {
            return this.evaluateWithVariable(metadata);
          }
          if (!upperContext) {
            throw new _evaluation_error["default"]("Unexpected empty expression", this.line, this.column, this.offset);
          }
          return metadata.get(upperContext);
        }
      }, {
        key: "evaluateWithVariable",
        value: function evaluateWithVariable(metadata) {
          var value = metadata.get(this.variable);
          if ((0, _utilities.isPresent)(value) && (!this.valueTest || value === this.valueTest)) {
            return this.evaluateForTruthyValue(metadata, value);
          }
          if (this.falseExpression) {
            return new _composite["default"](this.falseExpression, this.variable).evaluate(metadata);
          }
          return "";
        }
      }, {
        key: "evaluateForTruthyValue",
        value: function evaluateForTruthyValue(metadata, value) {
          if (this.trueExpression) {
            return new _composite["default"](this.trueExpression, this.variable).evaluate(metadata);
          }
          return value;
        }
      }, {
        key: "isRenderable",
        value: function isRenderable() {
          return true;
        }
      }, {
        key: "clone",
        value: function clone() {
          var _this$trueExpression, _this$falseExpression;
          return new Ternary2({
            variable: this.variable,
            valueTest: this.valueTest,
            trueExpression: (_this$trueExpression = this.trueExpression) === null || _this$trueExpression === void 0 ? void 0 : _this$trueExpression.map(function(part) {
              return part.clone();
            }),
            falseExpression: (_this$falseExpression = this.falseExpression) === null || _this$falseExpression === void 0 ? void 0 : _this$falseExpression.map(function(part) {
              return part.clone();
            }),
            line: this.line,
            column: this.column,
            offset: this.offset
          });
        }
      }]);
      return Ternary2;
    }();
    var _default = Ternary;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet_serializer.js
var require_chord_sheet_serializer = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/chord_sheet_serializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _literal = _interopRequireDefault(require_literal());
    var _song = _interopRequireDefault(require_song());
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _tag = _interopRequireDefault(require_tag());
    var _comment = _interopRequireDefault(require_comment());
    var _ternary = _interopRequireDefault(require_ternary());
    var _utilities = require_utilities();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CHORD_SHEET = "chordSheet";
    var CHORD_LYRICS_PAIR = "chordLyricsPair";
    var TAG = "tag";
    var COMMENT = "comment";
    var TERNARY = "ternary";
    var LINE = "line";
    var ChordSheetSerializer = function() {
      function ChordSheetSerializer2() {
        _classCallCheck(this, ChordSheetSerializer2);
      }
      _createClass(ChordSheetSerializer2, [{
        key: "serialize",
        value: function serialize(song) {
          var _this = this;
          return {
            type: CHORD_SHEET,
            lines: song.lines.map(function(line) {
              return _this.serializeLine(line);
            })
          };
        }
      }, {
        key: "serializeLine",
        value: function serializeLine(line) {
          var _this2 = this;
          return {
            type: LINE,
            items: line.items.map(function(item) {
              return _this2.serializeItem(item);
            })
          };
        }
      }, {
        key: "serializeItem",
        value: function serializeItem(item) {
          if (item instanceof _tag["default"]) {
            return this.serializeTag(item);
          }
          if (item instanceof _chord_lyrics_pair["default"]) {
            return this.serializeChordLyricsPair(item);
          }
          if (item instanceof _ternary["default"]) {
            return this.serializeTernary(item);
          }
          if (item instanceof _literal["default"]) {
            return this.serializeLiteral(item);
          }
          throw new Error("Don't know how to serialize ".concat(item.constructor.name));
        }
      }, {
        key: "serializeTag",
        value: function serializeTag(tag) {
          return {
            type: TAG,
            name: tag.originalName,
            value: tag.value
          };
        }
      }, {
        key: "serializeChordLyricsPair",
        value: function serializeChordLyricsPair(chordLyricsPair) {
          return {
            type: CHORD_LYRICS_PAIR,
            chords: chordLyricsPair.chords,
            lyrics: chordLyricsPair.lyrics
          };
        }
      }, {
        key: "serializeTernary",
        value: function serializeTernary(ternary) {
          return {
            type: TERNARY,
            variable: ternary.variable,
            valueTest: ternary.valueTest,
            trueExpression: this.serializeExpression(ternary.trueExpression),
            falseExpression: this.serializeExpression(ternary.falseExpression)
          };
        }
      }, {
        key: "serializeLiteral",
        value: function serializeLiteral(literal) {
          return literal.string;
        }
      }, {
        key: "serializeExpression",
        value: function serializeExpression(expression) {
          var _this3 = this;
          return expression === null || expression === void 0 ? void 0 : expression.map(function(part) {
            return _this3.serializeItem(part);
          });
        }
      }, {
        key: "deserialize",
        value: function deserialize(serializedSong) {
          this.parseAstComponent(serializedSong);
          this.song.finish();
          return this.song;
        }
      }, {
        key: "parseAstComponent",
        value: function parseAstComponent(astComponent) {
          if (!astComponent) {
            return null;
          }
          if (typeof astComponent === "string") {
            return new _literal["default"](astComponent);
          }
          var type = astComponent.type;
          switch (type) {
            case CHORD_SHEET:
              return this.parseChordSheet(astComponent);
            case CHORD_LYRICS_PAIR:
              return this.parseChordLyricsPair(astComponent);
            case TAG:
              return this.parseTag(astComponent);
            case COMMENT:
              return this.parseComment(astComponent);
            case TERNARY:
              return this.parseTernary(astComponent);
            default:
              console.warn('Unhandled AST component "'.concat(type, '"'), astComponent);
          }
          return null;
        }
      }, {
        key: "parseChordSheet",
        value: function parseChordSheet(astComponent) {
          var _this4 = this;
          var lines = astComponent.lines;
          this.song = new _song["default"]();
          lines.forEach(function(line, index) {
            return _this4.parseLine(line, index);
          });
        }
      }, {
        key: "parseLine",
        value: function parseLine(astComponent) {
          var _this5 = this;
          var items = astComponent.items;
          this.song.addLine();
          items.forEach(function(item) {
            var parsedItem = _this5.parseAstComponent(item);
            _this5.song.addItem(parsedItem);
          });
        }
      }, {
        key: "parseChordLyricsPair",
        value: function parseChordLyricsPair(astComponent) {
          var chords = astComponent.chords, lyrics = astComponent.lyrics;
          return new _chord_lyrics_pair["default"](chords, lyrics);
        }
      }, {
        key: "parseTag",
        value: function parseTag(astComponent) {
          var name = astComponent.name, value = astComponent.value, _astComponent$locatio = astComponent.location;
          _astComponent$locatio = _astComponent$locatio === void 0 ? {} : _astComponent$locatio;
          var offset = _astComponent$locatio.offset, line = _astComponent$locatio.line, column = _astComponent$locatio.column;
          return new _tag["default"](name, value, {
            line,
            column,
            offset
          });
        }
      }, {
        key: "parseComment",
        value: function parseComment(astComponent) {
          var comment = astComponent.comment;
          return new _comment["default"](comment);
        }
      }, {
        key: "parseTernary",
        value: function parseTernary(astComponent) {
          var variable = astComponent.variable, valueTest = astComponent.valueTest, trueExpression = astComponent.trueExpression, falseExpression = astComponent.falseExpression, _astComponent$locatio2 = astComponent.location;
          _astComponent$locatio2 = _astComponent$locatio2 === void 0 ? {} : _astComponent$locatio2;
          var offset = _astComponent$locatio2.offset, line = _astComponent$locatio2.line, column = _astComponent$locatio2.column;
          return new _ternary["default"]({
            variable,
            valueTest,
            trueExpression: this.parseExpression(trueExpression),
            falseExpression: this.parseExpression(falseExpression),
            offset,
            line,
            column
          });
        }
      }, {
        key: "parseExpression",
        value: function parseExpression(expression) {
          var _this6 = this;
          var parsedParts = (expression || []).map(function(part) {
            return _this6.parseAstComponent(part);
          });
          return (0, _utilities.presence)(parsedParts);
        }
      }]);
      return ChordSheetSerializer2;
    }();
    var _default = ChordSheetSerializer;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_pro_parser.js
var require_chord_pro_parser = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_pro_parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _chord_pro_peg_parser = _interopRequireDefault(require_chord_pro_peg_parser());
    var _chord_sheet_serializer = _interopRequireDefault(require_chord_sheet_serializer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ChordProParser = function() {
      function ChordProParser2() {
        _classCallCheck(this, ChordProParser2);
      }
      _createClass(ChordProParser2, [{
        key: "parse",
        value: function parse(chordProChordSheet) {
          var ast = _chord_pro_peg_parser["default"].parse(chordProChordSheet);
          this.song = new _chord_sheet_serializer["default"]().deserialize(ast);
          return this.song;
        }
      }, {
        key: "warnings",
        get: function get() {
          return this.song.warnings;
        }
      }]);
      return ChordProParser2;
    }();
    var _default = ChordProParser;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_sheet_parser.js
var require_chord_sheet_parser = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/chord_sheet_parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _song = _interopRequireDefault(require_song());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var WHITE_SPACE = /\s/;
    var CHORD_LINE_REGEX = /^\s*((([A-G])(#|b)?([^/\s]*)(\/([A-G])(#|b)?)?)(\s|$)+)+(\s|$)+/;
    var ChordSheetParser = function() {
      function ChordSheetParser2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$preserveWhitespa = _ref.preserveWhitespace, preserveWhitespace = _ref$preserveWhitespa === void 0 ? true : _ref$preserveWhitespa;
        _classCallCheck(this, ChordSheetParser2);
        this.preserveWhitespace = preserveWhitespace === true;
      }
      _createClass(ChordSheetParser2, [{
        key: "parse",
        value: function parse(chordSheet) {
          var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$song = _ref2.song, song = _ref2$song === void 0 ? null : _ref2$song;
          this.initialize(chordSheet, {
            song
          });
          while (this.hasNextLine()) {
            var line = this.readLine();
            this.parseLine(line);
          }
          this.endOfSong();
          this.song.finish();
          return this.song;
        }
      }, {
        key: "endOfSong",
        value: function endOfSong() {
        }
      }, {
        key: "parseLine",
        value: function parseLine(line) {
          this.songLine = this.song.addLine();
          if (line.trim().length === 0) {
            this.chordLyricsPair = null;
          } else {
            this.parseNonEmptyLine(line);
          }
        }
      }, {
        key: "parseNonEmptyLine",
        value: function parseNonEmptyLine(line) {
          this.chordLyricsPair = this.songLine.addChordLyricsPair();
          if (CHORD_LINE_REGEX.test(line) && this.hasNextLine()) {
            var nextLine = this.readLine();
            this.parseLyricsWithChords(line, nextLine);
          } else {
            this.chordLyricsPair.lyrics = "".concat(line);
          }
        }
      }, {
        key: "initialize",
        value: function initialize(document) {
          var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref3$song = _ref3.song, song = _ref3$song === void 0 ? null : _ref3$song;
          this.song = song || new _song["default"]();
          this.lines = document.split("\n");
          this.currentLine = 0;
          this.lineCount = this.lines.length;
          this.processingText = true;
        }
      }, {
        key: "readLine",
        value: function readLine() {
          var line = this.lines[this.currentLine];
          this.currentLine += 1;
          return line;
        }
      }, {
        key: "hasNextLine",
        value: function hasNextLine() {
          return this.currentLine < this.lineCount;
        }
      }, {
        key: "parseLyricsWithChords",
        value: function parseLyricsWithChords(chordsLine, lyricsLine) {
          this.processCharacters(chordsLine, lyricsLine);
          this.chordLyricsPair.lyrics += lyricsLine.substring(chordsLine.length);
          this.chordLyricsPair.chords = this.chordLyricsPair.chords.trim();
          this.chordLyricsPair.lyrics = this.chordLyricsPair.lyrics.trim();
          if (!lyricsLine.trim().length) {
            this.songLine = this.song.addLine();
          }
        }
      }, {
        key: "processCharacters",
        value: function processCharacters(chordsLine, lyricsLine) {
          for (var c = 0, charCount = chordsLine.length; c < charCount; c += 1) {
            var chr = chordsLine[c];
            var nextChar = chordsLine[c + 1];
            var isWhiteSpace = WHITE_SPACE.test(chr);
            this.addCharacter(chr, nextChar);
            this.chordLyricsPair.lyrics += lyricsLine[c] || "";
            this.processingText = !isWhiteSpace;
          }
        }
      }, {
        key: "addCharacter",
        value: function addCharacter(chr, nextChar) {
          var isWhiteSpace = WHITE_SPACE.test(chr);
          if (!isWhiteSpace) {
            this.ensureChordLyricsPairInitialized();
          }
          if (!isWhiteSpace || this.shouldAddCharacterToChords(nextChar)) {
            this.chordLyricsPair.chords += chr;
          }
        }
      }, {
        key: "shouldAddCharacterToChords",
        value: function shouldAddCharacterToChords(nextChar) {
          return nextChar && WHITE_SPACE.test(nextChar) && this.preserveWhitespace;
        }
      }, {
        key: "ensureChordLyricsPairInitialized",
        value: function ensureChordLyricsPairInitialized() {
          if (!this.processingText) {
            this.chordLyricsPair = this.songLine.addChordLyricsPair();
            this.processingText = true;
          }
        }
      }]);
      return ChordSheetParser2;
    }();
    var _default = ChordSheetParser;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/ultimate_guitar_parser.js
var require_ultimate_guitar_parser = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/parser/ultimate_guitar_parser.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _constants = require_constants();
    var _tag = _interopRequireWildcard(require_tag());
    var _chord_sheet_parser = _interopRequireDefault(require_chord_sheet_parser());
    var _startSectionTags;
    var _endSectionTags;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get2(target, property, receiver) {
          var base = _superPropBase(target, property);
          if (!base)
            return;
          var desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var VERSE_LINE_REGEX = /^\[Verse.*]/;
    var CHORUS_LINE_REGEX = /^\[Chorus]/;
    var OTHER_METADATA_LINE_REGEX = /^\[([^\]]+)]/;
    var startSectionTags = (_startSectionTags = {}, _defineProperty(_startSectionTags, _constants.VERSE, _tag.START_OF_VERSE), _defineProperty(_startSectionTags, _constants.CHORUS, _tag.START_OF_CHORUS), _startSectionTags);
    var endSectionTags = (_endSectionTags = {}, _defineProperty(_endSectionTags, _constants.VERSE, _tag.END_OF_VERSE), _defineProperty(_endSectionTags, _constants.CHORUS, _tag.END_OF_CHORUS), _endSectionTags);
    var UltimateGuitarParser = function(_ChordSheetParser) {
      _inherits(UltimateGuitarParser2, _ChordSheetParser);
      var _super = _createSuper(UltimateGuitarParser2);
      function UltimateGuitarParser2() {
        _classCallCheck(this, UltimateGuitarParser2);
        return _super.apply(this, arguments);
      }
      _createClass(UltimateGuitarParser2, [{
        key: "parseLine",
        value: function parseLine(line) {
          if (this.isSectionEnd()) {
            this.endSection();
          }
          if (VERSE_LINE_REGEX.test(line)) {
            this.startNewLine();
            this.startSection(_constants.VERSE);
          } else if (CHORUS_LINE_REGEX.test(line)) {
            this.startNewLine();
            this.startSection(_constants.CHORUS);
          } else if (OTHER_METADATA_LINE_REGEX.test(line)) {
            this.startNewLine();
            this.endSection();
            var comment = line.match(OTHER_METADATA_LINE_REGEX)[1];
            this.songLine.addTag(new _tag["default"](_tag.COMMENT, comment));
          } else {
            _get(_getPrototypeOf(UltimateGuitarParser2.prototype), "parseLine", this).call(this, line);
          }
        }
      }, {
        key: "isSectionEnd",
        value: function isSectionEnd() {
          return this.songLine && this.songLine.isEmpty() && this.song.previousLine && !this.song.previousLine.isEmpty();
        }
      }, {
        key: "endOfSong",
        value: function endOfSong() {
          _get(_getPrototypeOf(UltimateGuitarParser2.prototype), "endOfSong", this).call(this);
          if (this.currentSectionType in endSectionTags) {
            this.startNewLine();
          }
          this.endSection({
            addNewLine: false
          });
        }
      }, {
        key: "startSection",
        value: function startSection(sectionType) {
          if (this.currentSectionType) {
            this.endSection();
          }
          this.currentSectionType = sectionType;
          this.song.setCurrentLineType(sectionType);
          if (sectionType in startSectionTags) {
            this.song.addTag(new _tag["default"](startSectionTags[sectionType]));
          }
        }
      }, {
        key: "endSection",
        value: function endSection() {
          var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$addNewLine = _ref.addNewLine, addNewLine = _ref$addNewLine === void 0 ? true : _ref$addNewLine;
          if (this.currentSectionType in endSectionTags) {
            this.song.addTag(new _tag["default"](endSectionTags[this.currentSectionType]));
            if (addNewLine) {
              this.startNewLine();
            }
          }
          this.song.setCurrentLineType(_constants.NONE);
          this.currentSectionType = null;
        }
      }, {
        key: "startNewLine",
        value: function startNewLine() {
          this.songLine = this.song.addLine();
        }
      }]);
      return UltimateGuitarParser2;
    }(_chord_sheet_parser["default"]);
    var _default = UltimateGuitarParser;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.renderChord = renderChord;
    exports.transposeDistance = transposeDistance;
    var _chord = _interopRequireDefault(require_chord());
    var _utilities = require_utilities();
    var _key = _interopRequireDefault(require_key());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function transposeDistance(transposeKey, songKey) {
      if (/^\d+$/.test(transposeKey)) {
        return parseInt(transposeKey, 10);
      }
      return _key["default"].distance(songKey, transposeKey);
    }
    function chordTransposeDistance(capo, transposeKey, songKey) {
      var transpose = -1 * (capo || 0);
      if ((0, _utilities.isPresent)(transposeKey) && (0, _utilities.isPresent)(songKey)) {
        transpose += transposeDistance(transposeKey, songKey);
      }
      return transpose;
    }
    function renderChord(chord, lineKey, transposeKey, song) {
      var chordObj = _chord["default"].parse(chord);
      var capo = song.capo, songKey = song.key;
      if (!chordObj) {
        return chord;
      }
      chordObj = chordObj.transpose(chordTransposeDistance(capo, transposeKey, songKey));
      if ((0, _utilities.isPresent)(transposeKey)) {
        chordObj = chordObj.useModifier(transposeKey.modifier);
      }
      if ((0, _utilities.isPresent)(lineKey)) {
        chordObj = chordObj.normalize(lineKey);
      }
      return chordObj.toString();
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/utils.js
var require_utils = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/utils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.extend = extend;
    exports.indexOf = indexOf;
    exports.escapeExpression = escapeExpression;
    exports.isEmpty = isEmpty;
    exports.createFrame = createFrame;
    exports.blockParams = blockParams;
    exports.appendContextPath = appendContextPath;
    var escape = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;",
      "=": "&#x3D;"
    };
    var badChars = /[&<>"'`=]/g;
    var possible = /[&<>"'`=]/;
    function escapeChar(chr) {
      return escape[chr];
    }
    function extend(obj) {
      for (var i = 1; i < arguments.length; i++) {
        for (var key in arguments[i]) {
          if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
            obj[key] = arguments[i][key];
          }
        }
      }
      return obj;
    }
    var toString = Object.prototype.toString;
    exports.toString = toString;
    var isFunction = function isFunction2(value) {
      return typeof value === "function";
    };
    if (isFunction(/x/)) {
      exports.isFunction = isFunction = function(value) {
        return typeof value === "function" && toString.call(value) === "[object Function]";
      };
    }
    exports.isFunction = isFunction;
    var isArray = Array.isArray || function(value) {
      return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false;
    };
    exports.isArray = isArray;
    function indexOf(array, value) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    }
    function escapeExpression(string) {
      if (typeof string !== "string") {
        if (string && string.toHTML) {
          return string.toHTML();
        } else if (string == null) {
          return "";
        } else if (!string) {
          return string + "";
        }
        string = "" + string;
      }
      if (!possible.test(string)) {
        return string;
      }
      return string.replace(badChars, escapeChar);
    }
    function isEmpty(value) {
      if (!value && value !== 0) {
        return true;
      } else if (isArray(value) && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
    function createFrame(object) {
      var frame = extend({}, object);
      frame._parent = object;
      return frame;
    }
    function blockParams(params, ids) {
      params.path = ids;
      return params;
    }
    function appendContextPath(contextPath, id) {
      return (contextPath ? contextPath + "." : "") + id;
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/exception.js
var require_exception = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/exception.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var errorProps = ["description", "fileName", "lineNumber", "endLineNumber", "message", "name", "number", "stack"];
    function Exception(message, node) {
      var loc = node && node.loc, line = void 0, endLineNumber = void 0, column = void 0, endColumn = void 0;
      if (loc) {
        line = loc.start.line;
        endLineNumber = loc.end.line;
        column = loc.start.column;
        endColumn = loc.end.column;
        message += " - " + line + ":" + column;
      }
      var tmp = Error.prototype.constructor.call(this, message);
      for (var idx = 0; idx < errorProps.length; idx++) {
        this[errorProps[idx]] = tmp[errorProps[idx]];
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Exception);
      }
      try {
        if (loc) {
          this.lineNumber = line;
          this.endLineNumber = endLineNumber;
          if (Object.defineProperty) {
            Object.defineProperty(this, "column", {
              value: column,
              enumerable: true
            });
            Object.defineProperty(this, "endColumn", {
              value: endColumn,
              enumerable: true
            });
          } else {
            this.column = column;
            this.endColumn = endColumn;
          }
        }
      } catch (nop) {
      }
    }
    Exception.prototype = new Error();
    exports["default"] = Exception;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js
var require_block_helper_missing = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    exports["default"] = function(instance) {
      instance.registerHelper("blockHelperMissing", function(context, options) {
        var inverse = options.inverse, fn = options.fn;
        if (context === true) {
          return fn(this);
        } else if (context === false || context == null) {
          return inverse(this);
        } else if (_utils.isArray(context)) {
          if (context.length > 0) {
            if (options.ids) {
              options.ids = [options.name];
            }
            return instance.helpers.each(context, options);
          } else {
            return inverse(this);
          }
        } else {
          if (options.data && options.ids) {
            var data = _utils.createFrame(options.data);
            data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
            options = { data };
          }
          return fn(context, options);
        }
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/each.js
var require_each = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/each.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("each", function(context, options) {
        if (!options) {
          throw new _exception2["default"]("Must pass iterator to #each");
        }
        var fn = options.fn, inverse = options.inverse, i = 0, ret = "", data = void 0, contextPath = void 0;
        if (options.data && options.ids) {
          contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + ".";
        }
        if (_utils.isFunction(context)) {
          context = context.call(this);
        }
        if (options.data) {
          data = _utils.createFrame(options.data);
        }
        function execIteration(field, index, last) {
          if (data) {
            data.key = field;
            data.index = index;
            data.first = index === 0;
            data.last = !!last;
            if (contextPath) {
              data.contextPath = contextPath + field;
            }
          }
          ret = ret + fn(context[field], {
            data,
            blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
          });
        }
        if (context && typeof context === "object") {
          if (_utils.isArray(context)) {
            for (var j = context.length; i < j; i++) {
              if (i in context) {
                execIteration(i, i, i === context.length - 1);
              }
            }
          } else if (global.Symbol && context[global.Symbol.iterator]) {
            var newContext = [];
            var iterator = context[global.Symbol.iterator]();
            for (var it = iterator.next(); !it.done; it = iterator.next()) {
              newContext.push(it.value);
            }
            context = newContext;
            for (var j = context.length; i < j; i++) {
              execIteration(i, i, i === context.length - 1);
            }
          } else {
            (function() {
              var priorKey = void 0;
              Object.keys(context).forEach(function(key) {
                if (priorKey !== void 0) {
                  execIteration(priorKey, i - 1);
                }
                priorKey = key;
                i++;
              });
              if (priorKey !== void 0) {
                execIteration(priorKey, i - 1, true);
              }
            })();
          }
        }
        if (i === 0) {
          ret = inverse(this);
        }
        return ret;
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js
var require_helper_missing = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("helperMissing", function() {
        if (arguments.length === 1) {
          return void 0;
        } else {
          throw new _exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"');
        }
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/if.js
var require_if = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/if.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("if", function(conditional, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#if requires exactly one argument");
        }
        if (_utils.isFunction(conditional)) {
          conditional = conditional.call(this);
        }
        if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
          return options.inverse(this);
        } else {
          return options.fn(this);
        }
      });
      instance.registerHelper("unless", function(conditional, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#unless requires exactly one argument");
        }
        return instance.helpers["if"].call(this, conditional, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/log.js
var require_log = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/log.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(instance) {
      instance.registerHelper("log", function() {
        var args = [void 0], options = arguments[arguments.length - 1];
        for (var i = 0; i < arguments.length - 1; i++) {
          args.push(arguments[i]);
        }
        var level = 1;
        if (options.hash.level != null) {
          level = options.hash.level;
        } else if (options.data && options.data.level != null) {
          level = options.data.level;
        }
        args[0] = level;
        instance.log.apply(instance, args);
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js
var require_lookup = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(instance) {
      instance.registerHelper("lookup", function(obj, field, options) {
        if (!obj) {
          return obj;
        }
        return options.lookupProperty(obj, field);
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/with.js
var require_with = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers/with.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("with", function(context, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#with requires exactly one argument");
        }
        if (_utils.isFunction(context)) {
          context = context.call(this);
        }
        var fn = options.fn;
        if (!_utils.isEmpty(context)) {
          var data = options.data;
          if (options.data && options.ids) {
            data = _utils.createFrame(options.data);
            data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
          }
          return fn(context, {
            data,
            blockParams: _utils.blockParams([context], [data && data.contextPath])
          });
        } else {
          return options.inverse(this);
        }
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers.js
var require_helpers2 = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/helpers.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.registerDefaultHelpers = registerDefaultHelpers;
    exports.moveHelperToHooks = moveHelperToHooks;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _helpersBlockHelperMissing = require_block_helper_missing();
    var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
    var _helpersEach = require_each();
    var _helpersEach2 = _interopRequireDefault(_helpersEach);
    var _helpersHelperMissing = require_helper_missing();
    var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
    var _helpersIf = require_if();
    var _helpersIf2 = _interopRequireDefault(_helpersIf);
    var _helpersLog = require_log();
    var _helpersLog2 = _interopRequireDefault(_helpersLog);
    var _helpersLookup = require_lookup();
    var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
    var _helpersWith = require_with();
    var _helpersWith2 = _interopRequireDefault(_helpersWith);
    function registerDefaultHelpers(instance) {
      _helpersBlockHelperMissing2["default"](instance);
      _helpersEach2["default"](instance);
      _helpersHelperMissing2["default"](instance);
      _helpersIf2["default"](instance);
      _helpersLog2["default"](instance);
      _helpersLookup2["default"](instance);
      _helpersWith2["default"](instance);
    }
    function moveHelperToHooks(instance, helperName, keepHelper) {
      if (instance.helpers[helperName]) {
        instance.hooks[helperName] = instance.helpers[helperName];
        if (!keepHelper) {
          delete instance.helpers[helperName];
        }
      }
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js
var require_inline = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    exports["default"] = function(instance) {
      instance.registerDecorator("inline", function(fn, props, container, options) {
        var ret = fn;
        if (!props.partials) {
          props.partials = {};
          ret = function(context, options2) {
            var original = container.partials;
            container.partials = _utils.extend({}, original, props.partials);
            var ret2 = fn(context, options2);
            container.partials = original;
            return ret2;
          };
        }
        props.partials[options.args[0]] = options.fn;
        return ret;
      });
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/decorators.js
var require_decorators = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/decorators.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.registerDefaultDecorators = registerDefaultDecorators;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _decoratorsInline = require_inline();
    var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
    function registerDefaultDecorators(instance) {
      _decoratorsInline2["default"](instance);
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/logger.js
var require_logger = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/logger.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    var logger = {
      methodMap: ["debug", "info", "warn", "error"],
      level: "info",
      lookupLevel: function lookupLevel(level) {
        if (typeof level === "string") {
          var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
          if (levelMap >= 0) {
            level = levelMap;
          } else {
            level = parseInt(level, 10);
          }
        }
        return level;
      },
      log: function log(level) {
        level = logger.lookupLevel(level);
        if (typeof console !== "undefined" && logger.lookupLevel(logger.level) <= level) {
          var method = logger.methodMap[level];
          if (!console[method]) {
            method = "log";
          }
          for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            message[_key - 1] = arguments[_key];
          }
          console[method].apply(console, message);
        }
      }
    };
    exports["default"] = logger;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js
var require_create_new_lookup_object = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.createNewLookupObject = createNewLookupObject;
    var _utils = require_utils();
    function createNewLookupObject() {
      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }
      return _utils.extend.apply(void 0, [/* @__PURE__ */ Object.create(null)].concat(sources));
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js
var require_proto_access = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.createProtoAccessControl = createProtoAccessControl;
    exports.resultIsAllowed = resultIsAllowed;
    exports.resetLoggedProperties = resetLoggedProperties;
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key))
              newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    var _createNewLookupObject = require_create_new_lookup_object();
    var _logger = require_logger();
    var logger = _interopRequireWildcard(_logger);
    var loggedProperties = /* @__PURE__ */ Object.create(null);
    function createProtoAccessControl(runtimeOptions) {
      var defaultMethodWhiteList = /* @__PURE__ */ Object.create(null);
      defaultMethodWhiteList["constructor"] = false;
      defaultMethodWhiteList["__defineGetter__"] = false;
      defaultMethodWhiteList["__defineSetter__"] = false;
      defaultMethodWhiteList["__lookupGetter__"] = false;
      var defaultPropertyWhiteList = /* @__PURE__ */ Object.create(null);
      defaultPropertyWhiteList["__proto__"] = false;
      return {
        properties: {
          whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
          defaultValue: runtimeOptions.allowProtoPropertiesByDefault
        },
        methods: {
          whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
          defaultValue: runtimeOptions.allowProtoMethodsByDefault
        }
      };
    }
    function resultIsAllowed(result, protoAccessControl, propertyName) {
      if (typeof result === "function") {
        return checkWhiteList(protoAccessControl.methods, propertyName);
      } else {
        return checkWhiteList(protoAccessControl.properties, propertyName);
      }
    }
    function checkWhiteList(protoAccessControlForType, propertyName) {
      if (protoAccessControlForType.whitelist[propertyName] !== void 0) {
        return protoAccessControlForType.whitelist[propertyName] === true;
      }
      if (protoAccessControlForType.defaultValue !== void 0) {
        return protoAccessControlForType.defaultValue;
      }
      logUnexpecedPropertyAccessOnce(propertyName);
      return false;
    }
    function logUnexpecedPropertyAccessOnce(propertyName) {
      if (loggedProperties[propertyName] !== true) {
        loggedProperties[propertyName] = true;
        logger.log("error", 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
      }
    }
    function resetLoggedProperties() {
      Object.keys(loggedProperties).forEach(function(propertyName) {
        delete loggedProperties[propertyName];
      });
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/base.js
var require_base = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/base.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.HandlebarsEnvironment = HandlebarsEnvironment;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _helpers = require_helpers2();
    var _decorators = require_decorators();
    var _logger = require_logger();
    var _logger2 = _interopRequireDefault(_logger);
    var _internalProtoAccess = require_proto_access();
    var VERSION = "4.7.7";
    exports.VERSION = VERSION;
    var COMPILER_REVISION = 8;
    exports.COMPILER_REVISION = COMPILER_REVISION;
    var LAST_COMPATIBLE_COMPILER_REVISION = 7;
    exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
    var REVISION_CHANGES = {
      1: "<= 1.0.rc.2",
      2: "== 1.0.0-rc.3",
      3: "== 1.0.0-rc.4",
      4: "== 1.x.x",
      5: "== 2.0.0-alpha.x",
      6: ">= 2.0.0-beta.1",
      7: ">= 4.0.0 <4.3.0",
      8: ">= 4.3.0"
    };
    exports.REVISION_CHANGES = REVISION_CHANGES;
    var objectType = "[object Object]";
    function HandlebarsEnvironment(helpers, partials, decorators) {
      this.helpers = helpers || {};
      this.partials = partials || {};
      this.decorators = decorators || {};
      _helpers.registerDefaultHelpers(this);
      _decorators.registerDefaultDecorators(this);
    }
    HandlebarsEnvironment.prototype = {
      constructor: HandlebarsEnvironment,
      logger: _logger2["default"],
      log: _logger2["default"].log,
      registerHelper: function registerHelper(name, fn) {
        if (_utils.toString.call(name) === objectType) {
          if (fn) {
            throw new _exception2["default"]("Arg not supported with multiple helpers");
          }
          _utils.extend(this.helpers, name);
        } else {
          this.helpers[name] = fn;
        }
      },
      unregisterHelper: function unregisterHelper(name) {
        delete this.helpers[name];
      },
      registerPartial: function registerPartial(name, partial) {
        if (_utils.toString.call(name) === objectType) {
          _utils.extend(this.partials, name);
        } else {
          if (typeof partial === "undefined") {
            throw new _exception2["default"]('Attempting to register a partial called "' + name + '" as undefined');
          }
          this.partials[name] = partial;
        }
      },
      unregisterPartial: function unregisterPartial(name) {
        delete this.partials[name];
      },
      registerDecorator: function registerDecorator(name, fn) {
        if (_utils.toString.call(name) === objectType) {
          if (fn) {
            throw new _exception2["default"]("Arg not supported with multiple decorators");
          }
          _utils.extend(this.decorators, name);
        } else {
          this.decorators[name] = fn;
        }
      },
      unregisterDecorator: function unregisterDecorator(name) {
        delete this.decorators[name];
      },
      resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
        _internalProtoAccess.resetLoggedProperties();
      }
    };
    var log = _logger2["default"].log;
    exports.log = log;
    exports.createFrame = _utils.createFrame;
    exports.logger = _logger2["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/safe-string.js
var require_safe_string = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/safe-string.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function SafeString(string) {
      this.string = string;
    }
    SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
      return "" + this.string;
    };
    exports["default"] = SafeString;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js
var require_wrapHelper = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.wrapHelper = wrapHelper;
    function wrapHelper(helper, transformOptionsFn) {
      if (typeof helper !== "function") {
        return helper;
      }
      var wrapper = function wrapper2() {
        var options = arguments[arguments.length - 1];
        arguments[arguments.length - 1] = transformOptionsFn(options);
        return helper.apply(this, arguments);
      };
      return wrapper;
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/runtime.js
var require_runtime = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/runtime.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.checkRevision = checkRevision;
    exports.template = template;
    exports.wrapProgram = wrapProgram;
    exports.resolvePartial = resolvePartial;
    exports.invokePartial = invokePartial;
    exports.noop = noop;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key))
              newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    var _utils = require_utils();
    var Utils = _interopRequireWildcard(_utils);
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _base = require_base();
    var _helpers = require_helpers2();
    var _internalWrapHelper = require_wrapHelper();
    var _internalProtoAccess = require_proto_access();
    function checkRevision(compilerInfo) {
      var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base.COMPILER_REVISION;
      if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
        return;
      }
      if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
        var runtimeVersions = _base.REVISION_CHANGES[currentRevision], compilerVersions = _base.REVISION_CHANGES[compilerRevision];
        throw new _exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
      } else {
        throw new _exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
      }
    }
    function template(templateSpec, env) {
      if (!env) {
        throw new _exception2["default"]("No environment passed to template");
      }
      if (!templateSpec || !templateSpec.main) {
        throw new _exception2["default"]("Unknown template object: " + typeof templateSpec);
      }
      templateSpec.main.decorator = templateSpec.main_d;
      env.VM.checkRevision(templateSpec.compiler);
      var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;
      function invokePartialWrapper(partial, context, options) {
        if (options.hash) {
          context = Utils.extend({}, context, options.hash);
          if (options.ids) {
            options.ids[0] = true;
          }
        }
        partial = env.VM.resolvePartial.call(this, partial, context, options);
        var extendedOptions = Utils.extend({}, options, {
          hooks: this.hooks,
          protoAccessControl: this.protoAccessControl
        });
        var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);
        if (result == null && env.compile) {
          options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
          result = options.partials[options.name](context, extendedOptions);
        }
        if (result != null) {
          if (options.indent) {
            var lines = result.split("\n");
            for (var i = 0, l = lines.length; i < l; i++) {
              if (!lines[i] && i + 1 === l) {
                break;
              }
              lines[i] = options.indent + lines[i];
            }
            result = lines.join("\n");
          }
          return result;
        } else {
          throw new _exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode");
        }
      }
      var container = {
        strict: function strict(obj, name, loc) {
          if (!obj || !(name in obj)) {
            throw new _exception2["default"]('"' + name + '" not defined in ' + obj, {
              loc
            });
          }
          return container.lookupProperty(obj, name);
        },
        lookupProperty: function lookupProperty(parent, propertyName) {
          var result = parent[propertyName];
          if (result == null) {
            return result;
          }
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return result;
          }
          if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
            return result;
          }
          return void 0;
        },
        lookup: function lookup(depths, name) {
          var len = depths.length;
          for (var i = 0; i < len; i++) {
            var result = depths[i] && container.lookupProperty(depths[i], name);
            if (result != null) {
              return depths[i][name];
            }
          }
        },
        lambda: function lambda(current, context) {
          return typeof current === "function" ? current.call(context) : current;
        },
        escapeExpression: Utils.escapeExpression,
        invokePartial: invokePartialWrapper,
        fn: function fn(i) {
          var ret2 = templateSpec[i];
          ret2.decorator = templateSpec[i + "_d"];
          return ret2;
        },
        programs: [],
        program: function program(i, data, declaredBlockParams, blockParams, depths) {
          var programWrapper = this.programs[i], fn = this.fn(i);
          if (data || depths || blockParams || declaredBlockParams) {
            programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
          } else if (!programWrapper) {
            programWrapper = this.programs[i] = wrapProgram(this, i, fn);
          }
          return programWrapper;
        },
        data: function data(value, depth) {
          while (value && depth--) {
            value = value._parent;
          }
          return value;
        },
        mergeIfNeeded: function mergeIfNeeded(param, common) {
          var obj = param || common;
          if (param && common && param !== common) {
            obj = Utils.extend({}, common, param);
          }
          return obj;
        },
        nullContext: Object.seal({}),
        noop: env.VM.noop,
        compilerInfo: templateSpec.compiler
      };
      function ret(context) {
        var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        var data = options.data;
        ret._setup(options);
        if (!options.partial && templateSpec.useData) {
          data = initData(context, data);
        }
        var depths = void 0, blockParams = templateSpec.useBlockParams ? [] : void 0;
        if (templateSpec.useDepths) {
          if (options.depths) {
            depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
          } else {
            depths = [context];
          }
        }
        function main(context2) {
          return "" + templateSpec.main(container, context2, container.helpers, container.partials, data, blockParams, depths);
        }
        main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
        return main(context, options);
      }
      ret.isTop = true;
      ret._setup = function(options) {
        if (!options.partial) {
          var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);
          wrapHelpersToPassLookupProperty(mergedHelpers, container);
          container.helpers = mergedHelpers;
          if (templateSpec.usePartial) {
            container.partials = container.mergeIfNeeded(options.partials, env.partials);
          }
          if (templateSpec.usePartial || templateSpec.useDecorators) {
            container.decorators = Utils.extend({}, env.decorators, options.decorators);
          }
          container.hooks = {};
          container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);
          var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
          _helpers.moveHelperToHooks(container, "helperMissing", keepHelperInHelpers);
          _helpers.moveHelperToHooks(container, "blockHelperMissing", keepHelperInHelpers);
        } else {
          container.protoAccessControl = options.protoAccessControl;
          container.helpers = options.helpers;
          container.partials = options.partials;
          container.decorators = options.decorators;
          container.hooks = options.hooks;
        }
      };
      ret._child = function(i, data, blockParams, depths) {
        if (templateSpec.useBlockParams && !blockParams) {
          throw new _exception2["default"]("must pass block params");
        }
        if (templateSpec.useDepths && !depths) {
          throw new _exception2["default"]("must pass parent depths");
        }
        return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
      };
      return ret;
    }
    function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
      function prog(context) {
        var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        var currentDepths = depths;
        if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
          currentDepths = [context].concat(depths);
        }
        return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
      }
      prog = executeDecorators(fn, prog, container, depths, data, blockParams);
      prog.program = i;
      prog.depth = depths ? depths.length : 0;
      prog.blockParams = declaredBlockParams || 0;
      return prog;
    }
    function resolvePartial(partial, context, options) {
      if (!partial) {
        if (options.name === "@partial-block") {
          partial = options.data["partial-block"];
        } else {
          partial = options.partials[options.name];
        }
      } else if (!partial.call && !options.name) {
        options.name = partial;
        partial = options.partials[partial];
      }
      return partial;
    }
    function invokePartial(partial, context, options) {
      var currentPartialBlock = options.data && options.data["partial-block"];
      options.partial = true;
      if (options.ids) {
        options.data.contextPath = options.ids[0] || options.data.contextPath;
      }
      var partialBlock = void 0;
      if (options.fn && options.fn !== noop) {
        (function() {
          options.data = _base.createFrame(options.data);
          var fn = options.fn;
          partialBlock = options.data["partial-block"] = function partialBlockWrapper(context2) {
            var options2 = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
            options2.data = _base.createFrame(options2.data);
            options2.data["partial-block"] = currentPartialBlock;
            return fn(context2, options2);
          };
          if (fn.partials) {
            options.partials = Utils.extend({}, options.partials, fn.partials);
          }
        })();
      }
      if (partial === void 0 && partialBlock) {
        partial = partialBlock;
      }
      if (partial === void 0) {
        throw new _exception2["default"]("The partial " + options.name + " could not be found");
      } else if (partial instanceof Function) {
        return partial(context, options);
      }
    }
    function noop() {
      return "";
    }
    function initData(context, data) {
      if (!data || !("root" in data)) {
        data = data ? _base.createFrame(data) : {};
        data.root = context;
      }
      return data;
    }
    function executeDecorators(fn, prog, container, depths, data, blockParams) {
      if (fn.decorator) {
        var props = {};
        prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
        Utils.extend(prog, props);
      }
      return prog;
    }
    function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
      Object.keys(mergedHelpers).forEach(function(helperName) {
        var helper = mergedHelpers[helperName];
        mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
      });
    }
    function passLookupPropertyOption(helper, container) {
      var lookupProperty = container.lookupProperty;
      return _internalWrapHelper.wrapHelper(helper, function(options) {
        return Utils.extend({ lookupProperty }, options);
      });
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js
var require_no_conflict = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(Handlebars) {
      var root = typeof global !== "undefined" ? global : window, $Handlebars = root.Handlebars;
      Handlebars.noConflict = function() {
        if (root.Handlebars === Handlebars) {
          root.Handlebars = $Handlebars;
        }
        return Handlebars;
      };
    };
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars.runtime.js
var require_handlebars_runtime = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars.runtime.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key))
              newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    var _handlebarsBase = require_base();
    var base = _interopRequireWildcard(_handlebarsBase);
    var _handlebarsSafeString = require_safe_string();
    var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
    var _handlebarsException = require_exception();
    var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
    var _handlebarsUtils = require_utils();
    var Utils = _interopRequireWildcard(_handlebarsUtils);
    var _handlebarsRuntime = require_runtime();
    var runtime = _interopRequireWildcard(_handlebarsRuntime);
    var _handlebarsNoConflict = require_no_conflict();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    function create() {
      var hb = new base.HandlebarsEnvironment();
      Utils.extend(hb, base);
      hb.SafeString = _handlebarsSafeString2["default"];
      hb.Exception = _handlebarsException2["default"];
      hb.Utils = Utils;
      hb.escapeExpression = Utils.escapeExpression;
      hb.VM = runtime;
      hb.template = function(spec) {
        return runtime.template(spec, hb);
      };
      return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2["default"](inst);
    inst["default"] = inst;
    exports["default"] = inst;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js
var require_ast = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var AST = {
      helpers: {
        helperExpression: function helperExpression(node) {
          return node.type === "SubExpression" || (node.type === "MustacheStatement" || node.type === "BlockStatement") && !!(node.params && node.params.length || node.hash);
        },
        scopedId: function scopedId(path) {
          return /^\.|this\b/.test(path.original);
        },
        simpleId: function simpleId(path) {
          return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
        }
      }
    };
    exports["default"] = AST;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js
var require_parser = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var handlebars = function() {
      var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              return $$[$0 - 1];
              break;
            case 2:
              this.$ = yy.prepareProgram($$[$0]);
              break;
            case 3:
              this.$ = $$[$0];
              break;
            case 4:
              this.$ = $$[$0];
              break;
            case 5:
              this.$ = $$[$0];
              break;
            case 6:
              this.$ = $$[$0];
              break;
            case 7:
              this.$ = $$[$0];
              break;
            case 8:
              this.$ = $$[$0];
              break;
            case 9:
              this.$ = {
                type: "CommentStatement",
                value: yy.stripComment($$[$0]),
                strip: yy.stripFlags($$[$0], $$[$0]),
                loc: yy.locInfo(this._$)
              };
              break;
            case 10:
              this.$ = {
                type: "ContentStatement",
                original: $$[$0],
                value: $$[$0],
                loc: yy.locInfo(this._$)
              };
              break;
            case 11:
              this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
              break;
            case 12:
              this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
              break;
            case 13:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
              break;
            case 14:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
              break;
            case 15:
              this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 16:
              this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 17:
              this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 18:
              this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
              break;
            case 19:
              var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$), program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
              program.chained = true;
              this.$ = { strip: $$[$0 - 2].strip, program, chain: true };
              break;
            case 20:
              this.$ = $$[$0];
              break;
            case 21:
              this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
              break;
            case 22:
              this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
              break;
            case 23:
              this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
              break;
            case 24:
              this.$ = {
                type: "PartialStatement",
                name: $$[$0 - 3],
                params: $$[$0 - 2],
                hash: $$[$0 - 1],
                indent: "",
                strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                loc: yy.locInfo(this._$)
              };
              break;
            case 25:
              this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
              break;
            case 26:
              this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
              break;
            case 27:
              this.$ = $$[$0];
              break;
            case 28:
              this.$ = $$[$0];
              break;
            case 29:
              this.$ = {
                type: "SubExpression",
                path: $$[$0 - 3],
                params: $$[$0 - 2],
                hash: $$[$0 - 1],
                loc: yy.locInfo(this._$)
              };
              break;
            case 30:
              this.$ = { type: "Hash", pairs: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 31:
              this.$ = { type: "HashPair", key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 32:
              this.$ = yy.id($$[$0 - 1]);
              break;
            case 33:
              this.$ = $$[$0];
              break;
            case 34:
              this.$ = $$[$0];
              break;
            case 35:
              this.$ = { type: "StringLiteral", value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 36:
              this.$ = { type: "NumberLiteral", value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
              break;
            case 37:
              this.$ = { type: "BooleanLiteral", value: $$[$0] === "true", original: $$[$0] === "true", loc: yy.locInfo(this._$) };
              break;
            case 38:
              this.$ = { type: "UndefinedLiteral", original: void 0, value: void 0, loc: yy.locInfo(this._$) };
              break;
            case 39:
              this.$ = { type: "NullLiteral", original: null, value: null, loc: yy.locInfo(this._$) };
              break;
            case 40:
              this.$ = $$[$0];
              break;
            case 41:
              this.$ = $$[$0];
              break;
            case 42:
              this.$ = yy.preparePath(true, $$[$0], this._$);
              break;
            case 43:
              this.$ = yy.preparePath(false, $$[$0], this._$);
              break;
            case 44:
              $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });
              this.$ = $$[$0 - 2];
              break;
            case 45:
              this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
              break;
            case 46:
              this.$ = [];
              break;
            case 47:
              $$[$0 - 1].push($$[$0]);
              break;
            case 48:
              this.$ = [];
              break;
            case 49:
              $$[$0 - 1].push($$[$0]);
              break;
            case 50:
              this.$ = [];
              break;
            case 51:
              $$[$0 - 1].push($$[$0]);
              break;
            case 58:
              this.$ = [];
              break;
            case 59:
              $$[$0 - 1].push($$[$0]);
              break;
            case 64:
              this.$ = [];
              break;
            case 65:
              $$[$0 - 1].push($$[$0]);
              break;
            case 70:
              this.$ = [];
              break;
            case 71:
              $$[$0 - 1].push($$[$0]);
              break;
            case 78:
              this.$ = [];
              break;
            case 79:
              $$[$0 - 1].push($$[$0]);
              break;
            case 82:
              this.$ = [];
              break;
            case 83:
              $$[$0 - 1].push($$[$0]);
              break;
            case 86:
              this.$ = [];
              break;
            case 87:
              $$[$0 - 1].push($$[$0]);
              break;
            case 90:
              this.$ = [];
              break;
            case 91:
              $$[$0 - 1].push($$[$0]);
              break;
            case 94:
              this.$ = [];
              break;
            case 95:
              $$[$0 - 1].push($$[$0]);
              break;
            case 98:
              this.$ = [$$[$0]];
              break;
            case 99:
              $$[$0 - 1].push($$[$0]);
              break;
            case 100:
              this.$ = [$$[$0]];
              break;
            case 101:
              $$[$0 - 1].push($$[$0]);
              break;
          }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },
        parseError: function parseError(str, hash) {
          throw new Error(str);
        },
        parse: function parse(input) {
          var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          this.lexer.setInput(input);
          this.lexer.yy = this.yy;
          this.yy.lexer = this.lexer;
          this.yy.parser = this;
          if (typeof this.lexer.yylloc == "undefined")
            this.lexer.yylloc = {};
          var yyloc = this.lexer.yylloc;
          lstack.push(yyloc);
          var ranges = this.lexer.options && this.lexer.options.ranges;
          if (typeof this.yy.parseError === "function")
            this.parseError = this.yy.parseError;
          function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
          }
          function lex() {
            var token;
            token = self.lexer.lex() || 1;
            if (typeof token !== "number") {
              token = self.symbols_[token] || token;
            }
            return token;
          }
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
          while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
              }
              action = table[state] && table[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              if (!recovering) {
                expected = [];
                for (p in table[state])
                  if (this.terminals_[p] && p > 2) {
                    expected.push("'" + this.terminals_[p] + "'");
                  }
                if (this.lexer.showPosition) {
                  errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                  errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected });
              }
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = this.lexer.yyleng;
                  yytext = this.lexer.yytext;
                  yylineno = this.lexer.yylineno;
                  yyloc = this.lexer.yylloc;
                  if (recovering > 0)
                    recovering--;
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                }
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                if (typeof r !== "undefined") {
                  return r;
                }
                if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var lexer = function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str, hash) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
            } else {
              throw new Error(str);
            }
          },
          setInput: function setInput(input) {
            this._input = input;
            this._more = this._less = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
            if (this.options.ranges)
              this.yylloc.range = [0, 0];
            this.offset = 0;
            return this;
          },
          input: function input() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges)
              this.yylloc.range[1]++;
            this._input = this._input.slice(1);
            return ch;
          },
          unput: function unput(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1)
              this.yylineno -= lines.length - 1;
            var r = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            return this;
          },
          more: function more() {
            this._more = true;
            return this;
          },
          less: function less(n) {
            this.unput(this.match.slice(n));
          },
          pastInput: function pastInput() {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          upcomingInput: function upcomingInput() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          showPosition: function showPosition() {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
          },
          next: function next() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input)
              this.done = true;
            var token, match, tempMatch, index, col, lines;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex)
                  break;
              }
            }
            if (match) {
              lines = match[0].match(/(?:\r\n?|\n).*/g);
              if (lines)
                this.yylineno += lines.length;
              this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
              };
              this.yytext += match[0];
              this.match += match[0];
              this.matches = match;
              this.yyleng = this.yytext.length;
              if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
              }
              this._more = false;
              this._input = this._input.slice(match[0].length);
              this.matched += match[0];
              token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
              if (this.done && this._input)
                this.done = false;
              if (token)
                return token;
              else
                return;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), { text: "", token: null, line: this.yylineno });
            }
          },
          lex: function lex() {
            var r = this.next();
            if (typeof r !== "undefined") {
              return r;
            } else {
              return this.lex();
            }
          },
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          popState: function popState() {
            return this.conditionStack.pop();
          },
          _currentRules: function _currentRules() {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          },
          topState: function topState() {
            return this.conditionStack[this.conditionStack.length - 2];
          },
          pushState: function begin(condition) {
            this.begin(condition);
          }
        };
        lexer2.options = {};
        lexer2.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
          function strip(start, end) {
            return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
          }
          var YYSTATE = YY_START;
          switch ($avoiding_name_collisions) {
            case 0:
              if (yy_.yytext.slice(-2) === "\\\\") {
                strip(0, 1);
                this.begin("mu");
              } else if (yy_.yytext.slice(-1) === "\\") {
                strip(0, 1);
                this.begin("emu");
              } else {
                this.begin("mu");
              }
              if (yy_.yytext)
                return 15;
              break;
            case 1:
              return 15;
              break;
            case 2:
              this.popState();
              return 15;
              break;
            case 3:
              this.begin("raw");
              return 15;
              break;
            case 4:
              this.popState();
              if (this.conditionStack[this.conditionStack.length - 1] === "raw") {
                return 15;
              } else {
                strip(5, 9);
                return "END_RAW_BLOCK";
              }
              break;
            case 5:
              return 15;
              break;
            case 6:
              this.popState();
              return 14;
              break;
            case 7:
              return 65;
              break;
            case 8:
              return 68;
              break;
            case 9:
              return 19;
              break;
            case 10:
              this.popState();
              this.begin("raw");
              return 23;
              break;
            case 11:
              return 55;
              break;
            case 12:
              return 60;
              break;
            case 13:
              return 29;
              break;
            case 14:
              return 47;
              break;
            case 15:
              this.popState();
              return 44;
              break;
            case 16:
              this.popState();
              return 44;
              break;
            case 17:
              return 34;
              break;
            case 18:
              return 39;
              break;
            case 19:
              return 51;
              break;
            case 20:
              return 48;
              break;
            case 21:
              this.unput(yy_.yytext);
              this.popState();
              this.begin("com");
              break;
            case 22:
              this.popState();
              return 14;
              break;
            case 23:
              return 48;
              break;
            case 24:
              return 73;
              break;
            case 25:
              return 72;
              break;
            case 26:
              return 72;
              break;
            case 27:
              return 87;
              break;
            case 28:
              break;
            case 29:
              this.popState();
              return 54;
              break;
            case 30:
              this.popState();
              return 33;
              break;
            case 31:
              yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
              return 80;
              break;
            case 32:
              yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
              return 80;
              break;
            case 33:
              return 85;
              break;
            case 34:
              return 82;
              break;
            case 35:
              return 82;
              break;
            case 36:
              return 83;
              break;
            case 37:
              return 84;
              break;
            case 38:
              return 81;
              break;
            case 39:
              return 75;
              break;
            case 40:
              return 77;
              break;
            case 41:
              return 72;
              break;
            case 42:
              yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, "$1");
              return 72;
              break;
            case 43:
              return "INVALID";
              break;
            case 44:
              return 5;
              break;
          }
        };
        lexer2.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer2.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer2;
      }();
      parser.lexer = lexer;
      function Parser() {
        this.yy = {};
      }
      Parser.prototype = parser;
      parser.Parser = Parser;
      return new Parser();
    }();
    exports["default"] = handlebars;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js
var require_visitor = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    function Visitor() {
      this.parents = [];
    }
    Visitor.prototype = {
      constructor: Visitor,
      mutating: false,
      acceptKey: function acceptKey(node, name) {
        var value = this.accept(node[name]);
        if (this.mutating) {
          if (value && !Visitor.prototype[value.type]) {
            throw new _exception2["default"]('Unexpected node type "' + value.type + '" found when accepting ' + name + " on " + node.type);
          }
          node[name] = value;
        }
      },
      acceptRequired: function acceptRequired(node, name) {
        this.acceptKey(node, name);
        if (!node[name]) {
          throw new _exception2["default"](node.type + " requires " + name);
        }
      },
      acceptArray: function acceptArray(array) {
        for (var i = 0, l = array.length; i < l; i++) {
          this.acceptKey(array, i);
          if (!array[i]) {
            array.splice(i, 1);
            i--;
            l--;
          }
        }
      },
      accept: function accept(object) {
        if (!object) {
          return;
        }
        if (!this[object.type]) {
          throw new _exception2["default"]("Unknown type: " + object.type, object);
        }
        if (this.current) {
          this.parents.unshift(this.current);
        }
        this.current = object;
        var ret = this[object.type](object);
        this.current = this.parents.shift();
        if (!this.mutating || ret) {
          return ret;
        } else if (ret !== false) {
          return object;
        }
      },
      Program: function Program(program) {
        this.acceptArray(program.body);
      },
      MustacheStatement: visitSubExpression,
      Decorator: visitSubExpression,
      BlockStatement: visitBlock,
      DecoratorBlock: visitBlock,
      PartialStatement: visitPartial,
      PartialBlockStatement: function PartialBlockStatement(partial) {
        visitPartial.call(this, partial);
        this.acceptKey(partial, "program");
      },
      ContentStatement: function ContentStatement() {
      },
      CommentStatement: function CommentStatement() {
      },
      SubExpression: visitSubExpression,
      PathExpression: function PathExpression() {
      },
      StringLiteral: function StringLiteral() {
      },
      NumberLiteral: function NumberLiteral() {
      },
      BooleanLiteral: function BooleanLiteral() {
      },
      UndefinedLiteral: function UndefinedLiteral() {
      },
      NullLiteral: function NullLiteral() {
      },
      Hash: function Hash(hash) {
        this.acceptArray(hash.pairs);
      },
      HashPair: function HashPair(pair) {
        this.acceptRequired(pair, "value");
      }
    };
    function visitSubExpression(mustache) {
      this.acceptRequired(mustache, "path");
      this.acceptArray(mustache.params);
      this.acceptKey(mustache, "hash");
    }
    function visitBlock(block) {
      visitSubExpression.call(this, block);
      this.acceptKey(block, "program");
      this.acceptKey(block, "inverse");
    }
    function visitPartial(partial) {
      this.acceptRequired(partial, "name");
      this.acceptArray(partial.params);
      this.acceptKey(partial, "hash");
    }
    exports["default"] = Visitor;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js
var require_whitespace_control = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _visitor = require_visitor();
    var _visitor2 = _interopRequireDefault(_visitor);
    function WhitespaceControl() {
      var options = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
      this.options = options;
    }
    WhitespaceControl.prototype = new _visitor2["default"]();
    WhitespaceControl.prototype.Program = function(program) {
      var doStandalone = !this.options.ignoreStandalone;
      var isRoot = !this.isRootSeen;
      this.isRootSeen = true;
      var body = program.body;
      for (var i = 0, l = body.length; i < l; i++) {
        var current = body[i], strip = this.accept(current);
        if (!strip) {
          continue;
        }
        var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot), _isNextWhitespace = isNextWhitespace(body, i, isRoot), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
        if (strip.close) {
          omitRight(body, i, true);
        }
        if (strip.open) {
          omitLeft(body, i, true);
        }
        if (doStandalone && inlineStandalone) {
          omitRight(body, i);
          if (omitLeft(body, i)) {
            if (current.type === "PartialStatement") {
              current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
            }
          }
        }
        if (doStandalone && openStandalone) {
          omitRight((current.program || current.inverse).body);
          omitLeft(body, i);
        }
        if (doStandalone && closeStandalone) {
          omitRight(body, i);
          omitLeft((current.inverse || current.program).body);
        }
      }
      return program;
    };
    WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
      this.accept(block.program);
      this.accept(block.inverse);
      var program = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
      if (inverse && inverse.chained) {
        firstInverse = inverse.body[0].program;
        while (lastInverse.chained) {
          lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
        }
      }
      var strip = {
        open: block.openStrip.open,
        close: block.closeStrip.close,
        openStandalone: isNextWhitespace(program.body),
        closeStandalone: isPrevWhitespace((firstInverse || program).body)
      };
      if (block.openStrip.close) {
        omitRight(program.body, null, true);
      }
      if (inverse) {
        var inverseStrip = block.inverseStrip;
        if (inverseStrip.open) {
          omitLeft(program.body, null, true);
        }
        if (inverseStrip.close) {
          omitRight(firstInverse.body, null, true);
        }
        if (block.closeStrip.open) {
          omitLeft(lastInverse.body, null, true);
        }
        if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
          omitLeft(program.body);
          omitRight(firstInverse.body);
        }
      } else if (block.closeStrip.open) {
        omitLeft(program.body, null, true);
      }
      return strip;
    };
    WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
      return mustache.strip;
    };
    WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
      var strip = node.strip || {};
      return {
        inlineStandalone: true,
        open: strip.open,
        close: strip.close
      };
    };
    function isPrevWhitespace(body, i, isRoot) {
      if (i === void 0) {
        i = body.length;
      }
      var prev = body[i - 1], sibling = body[i - 2];
      if (!prev) {
        return isRoot;
      }
      if (prev.type === "ContentStatement") {
        return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
      }
    }
    function isNextWhitespace(body, i, isRoot) {
      if (i === void 0) {
        i = -1;
      }
      var next = body[i + 1], sibling = body[i + 2];
      if (!next) {
        return isRoot;
      }
      if (next.type === "ContentStatement") {
        return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
      }
    }
    function omitRight(body, i, multiple) {
      var current = body[i == null ? 0 : i + 1];
      if (!current || current.type !== "ContentStatement" || !multiple && current.rightStripped) {
        return;
      }
      var original = current.value;
      current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, "");
      current.rightStripped = current.value !== original;
    }
    function omitLeft(body, i, multiple) {
      var current = body[i == null ? body.length - 1 : i - 1];
      if (!current || current.type !== "ContentStatement" || !multiple && current.leftStripped) {
        return;
      }
      var original = current.value;
      current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, "");
      current.leftStripped = current.value !== original;
      return current.leftStripped;
    }
    exports["default"] = WhitespaceControl;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js
var require_helpers3 = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.SourceLocation = SourceLocation;
    exports.id = id;
    exports.stripFlags = stripFlags;
    exports.stripComment = stripComment;
    exports.preparePath = preparePath;
    exports.prepareMustache = prepareMustache;
    exports.prepareRawBlock = prepareRawBlock;
    exports.prepareBlock = prepareBlock;
    exports.prepareProgram = prepareProgram;
    exports.preparePartialBlock = preparePartialBlock;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    function validateClose(open, close) {
      close = close.path ? close.path.original : close;
      if (open.path.original !== close) {
        var errorNode = { loc: open.path.loc };
        throw new _exception2["default"](open.path.original + " doesn't match " + close, errorNode);
      }
    }
    function SourceLocation(source, locInfo) {
      this.source = source;
      this.start = {
        line: locInfo.first_line,
        column: locInfo.first_column
      };
      this.end = {
        line: locInfo.last_line,
        column: locInfo.last_column
      };
    }
    function id(token) {
      if (/^\[.*\]$/.test(token)) {
        return token.substring(1, token.length - 1);
      } else {
        return token;
      }
    }
    function stripFlags(open, close) {
      return {
        open: open.charAt(2) === "~",
        close: close.charAt(close.length - 3) === "~"
      };
    }
    function stripComment(comment) {
      return comment.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
    }
    function preparePath(data, parts, loc) {
      loc = this.locInfo(loc);
      var original = data ? "@" : "", dig = [], depth = 0;
      for (var i = 0, l = parts.length; i < l; i++) {
        var part = parts[i].part, isLiteral = parts[i].original !== part;
        original += (parts[i].separator || "") + part;
        if (!isLiteral && (part === ".." || part === "." || part === "this")) {
          if (dig.length > 0) {
            throw new _exception2["default"]("Invalid path: " + original, { loc });
          } else if (part === "..") {
            depth++;
          }
        } else {
          dig.push(part);
        }
      }
      return {
        type: "PathExpression",
        data,
        depth,
        parts: dig,
        original,
        loc
      };
    }
    function prepareMustache(path, params, hash, open, strip, locInfo) {
      var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== "{" && escapeFlag !== "&";
      var decorator = /\*/.test(open);
      return {
        type: decorator ? "Decorator" : "MustacheStatement",
        path,
        params,
        hash,
        escaped,
        strip,
        loc: this.locInfo(locInfo)
      };
    }
    function prepareRawBlock(openRawBlock, contents, close, locInfo) {
      validateClose(openRawBlock, close);
      locInfo = this.locInfo(locInfo);
      var program = {
        type: "Program",
        body: contents,
        strip: {},
        loc: locInfo
      };
      return {
        type: "BlockStatement",
        path: openRawBlock.path,
        params: openRawBlock.params,
        hash: openRawBlock.hash,
        program,
        openStrip: {},
        inverseStrip: {},
        closeStrip: {},
        loc: locInfo
      };
    }
    function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
      if (close && close.path) {
        validateClose(openBlock, close);
      }
      var decorator = /\*/.test(openBlock.open);
      program.blockParams = openBlock.blockParams;
      var inverse = void 0, inverseStrip = void 0;
      if (inverseAndProgram) {
        if (decorator) {
          throw new _exception2["default"]("Unexpected inverse block on decorator", inverseAndProgram);
        }
        if (inverseAndProgram.chain) {
          inverseAndProgram.program.body[0].closeStrip = close.strip;
        }
        inverseStrip = inverseAndProgram.strip;
        inverse = inverseAndProgram.program;
      }
      if (inverted) {
        inverted = inverse;
        inverse = program;
        program = inverted;
      }
      return {
        type: decorator ? "DecoratorBlock" : "BlockStatement",
        path: openBlock.path,
        params: openBlock.params,
        hash: openBlock.hash,
        program,
        inverse,
        openStrip: openBlock.strip,
        inverseStrip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo)
      };
    }
    function prepareProgram(statements, loc) {
      if (!loc && statements.length) {
        var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
        if (firstLoc && lastLoc) {
          loc = {
            source: firstLoc.source,
            start: {
              line: firstLoc.start.line,
              column: firstLoc.start.column
            },
            end: {
              line: lastLoc.end.line,
              column: lastLoc.end.column
            }
          };
        }
      }
      return {
        type: "Program",
        body: statements,
        strip: {},
        loc
      };
    }
    function preparePartialBlock(open, program, close, locInfo) {
      validateClose(open, close);
      return {
        type: "PartialBlockStatement",
        name: open.path,
        params: open.params,
        hash: open.hash,
        program,
        openStrip: open.strip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo)
      };
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js
var require_base2 = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.parseWithoutProcessing = parseWithoutProcessing;
    exports.parse = parse;
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key))
              newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _parser = require_parser();
    var _parser2 = _interopRequireDefault(_parser);
    var _whitespaceControl = require_whitespace_control();
    var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
    var _helpers = require_helpers3();
    var Helpers = _interopRequireWildcard(_helpers);
    var _utils = require_utils();
    exports.parser = _parser2["default"];
    var yy = {};
    _utils.extend(yy, Helpers);
    function parseWithoutProcessing(input, options) {
      if (input.type === "Program") {
        return input;
      }
      _parser2["default"].yy = yy;
      yy.locInfo = function(locInfo) {
        return new yy.SourceLocation(options && options.srcName, locInfo);
      };
      var ast = _parser2["default"].parse(input);
      return ast;
    }
    function parse(input, options) {
      var ast = parseWithoutProcessing(input, options);
      var strip = new _whitespaceControl2["default"](options);
      return strip.accept(ast);
    }
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js
var require_compiler = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Compiler = Compiler;
    exports.precompile = precompile;
    exports.compile = compile;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = require_utils();
    var _ast = require_ast();
    var _ast2 = _interopRequireDefault(_ast);
    var slice = [].slice;
    function Compiler() {
    }
    Compiler.prototype = {
      compiler: Compiler,
      equals: function equals(other) {
        var len = this.opcodes.length;
        if (other.opcodes.length !== len) {
          return false;
        }
        for (var i = 0; i < len; i++) {
          var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
          if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
            return false;
          }
        }
        len = this.children.length;
        for (var i = 0; i < len; i++) {
          if (!this.children[i].equals(other.children[i])) {
            return false;
          }
        }
        return true;
      },
      guid: 0,
      compile: function compile2(program, options) {
        this.sourceNode = [];
        this.opcodes = [];
        this.children = [];
        this.options = options;
        this.stringParams = options.stringParams;
        this.trackIds = options.trackIds;
        options.blockParams = options.blockParams || [];
        options.knownHelpers = _utils.extend(/* @__PURE__ */ Object.create(null), {
          helperMissing: true,
          blockHelperMissing: true,
          each: true,
          "if": true,
          unless: true,
          "with": true,
          log: true,
          lookup: true
        }, options.knownHelpers);
        return this.accept(program);
      },
      compileProgram: function compileProgram(program) {
        var childCompiler = new this.compiler(), result = childCompiler.compile(program, this.options), guid = this.guid++;
        this.usePartial = this.usePartial || result.usePartial;
        this.children[guid] = result;
        this.useDepths = this.useDepths || result.useDepths;
        return guid;
      },
      accept: function accept(node) {
        if (!this[node.type]) {
          throw new _exception2["default"]("Unknown type: " + node.type, node);
        }
        this.sourceNode.unshift(node);
        var ret = this[node.type](node);
        this.sourceNode.shift();
        return ret;
      },
      Program: function Program(program) {
        this.options.blockParams.unshift(program.blockParams);
        var body = program.body, bodyLength = body.length;
        for (var i = 0; i < bodyLength; i++) {
          this.accept(body[i]);
        }
        this.options.blockParams.shift();
        this.isSimple = bodyLength === 1;
        this.blockParams = program.blockParams ? program.blockParams.length : 0;
        return this;
      },
      BlockStatement: function BlockStatement(block) {
        transformLiteralToPath(block);
        var program = block.program, inverse = block.inverse;
        program = program && this.compileProgram(program);
        inverse = inverse && this.compileProgram(inverse);
        var type = this.classifySexpr(block);
        if (type === "helper") {
          this.helperSexpr(block, program, inverse);
        } else if (type === "simple") {
          this.simpleSexpr(block);
          this.opcode("pushProgram", program);
          this.opcode("pushProgram", inverse);
          this.opcode("emptyHash");
          this.opcode("blockValue", block.path.original);
        } else {
          this.ambiguousSexpr(block, program, inverse);
          this.opcode("pushProgram", program);
          this.opcode("pushProgram", inverse);
          this.opcode("emptyHash");
          this.opcode("ambiguousBlockValue");
        }
        this.opcode("append");
      },
      DecoratorBlock: function DecoratorBlock(decorator) {
        var program = decorator.program && this.compileProgram(decorator.program);
        var params = this.setupFullMustacheParams(decorator, program, void 0), path = decorator.path;
        this.useDecorators = true;
        this.opcode("registerDecorator", params.length, path.original);
      },
      PartialStatement: function PartialStatement(partial) {
        this.usePartial = true;
        var program = partial.program;
        if (program) {
          program = this.compileProgram(partial.program);
        }
        var params = partial.params;
        if (params.length > 1) {
          throw new _exception2["default"]("Unsupported number of partial arguments: " + params.length, partial);
        } else if (!params.length) {
          if (this.options.explicitPartialContext) {
            this.opcode("pushLiteral", "undefined");
          } else {
            params.push({ type: "PathExpression", parts: [], depth: 0 });
          }
        }
        var partialName = partial.name.original, isDynamic = partial.name.type === "SubExpression";
        if (isDynamic) {
          this.accept(partial.name);
        }
        this.setupFullMustacheParams(partial, program, void 0, true);
        var indent = partial.indent || "";
        if (this.options.preventIndent && indent) {
          this.opcode("appendContent", indent);
          indent = "";
        }
        this.opcode("invokePartial", isDynamic, partialName, indent);
        this.opcode("append");
      },
      PartialBlockStatement: function PartialBlockStatement(partialBlock) {
        this.PartialStatement(partialBlock);
      },
      MustacheStatement: function MustacheStatement(mustache) {
        this.SubExpression(mustache);
        if (mustache.escaped && !this.options.noEscape) {
          this.opcode("appendEscaped");
        } else {
          this.opcode("append");
        }
      },
      Decorator: function Decorator(decorator) {
        this.DecoratorBlock(decorator);
      },
      ContentStatement: function ContentStatement(content) {
        if (content.value) {
          this.opcode("appendContent", content.value);
        }
      },
      CommentStatement: function CommentStatement() {
      },
      SubExpression: function SubExpression(sexpr) {
        transformLiteralToPath(sexpr);
        var type = this.classifySexpr(sexpr);
        if (type === "simple") {
          this.simpleSexpr(sexpr);
        } else if (type === "helper") {
          this.helperSexpr(sexpr);
        } else {
          this.ambiguousSexpr(sexpr);
        }
      },
      ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
        var path = sexpr.path, name = path.parts[0], isBlock = program != null || inverse != null;
        this.opcode("getContext", path.depth);
        this.opcode("pushProgram", program);
        this.opcode("pushProgram", inverse);
        path.strict = true;
        this.accept(path);
        this.opcode("invokeAmbiguous", name, isBlock);
      },
      simpleSexpr: function simpleSexpr(sexpr) {
        var path = sexpr.path;
        path.strict = true;
        this.accept(path);
        this.opcode("resolvePossibleLambda");
      },
      helperSexpr: function helperSexpr(sexpr, program, inverse) {
        var params = this.setupFullMustacheParams(sexpr, program, inverse), path = sexpr.path, name = path.parts[0];
        if (this.options.knownHelpers[name]) {
          this.opcode("invokeKnownHelper", params.length, name);
        } else if (this.options.knownHelpersOnly) {
          throw new _exception2["default"]("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
        } else {
          path.strict = true;
          path.falsy = true;
          this.accept(path);
          this.opcode("invokeHelper", params.length, path.original, _ast2["default"].helpers.simpleId(path));
        }
      },
      PathExpression: function PathExpression(path) {
        this.addDepth(path.depth);
        this.opcode("getContext", path.depth);
        var name = path.parts[0], scoped = _ast2["default"].helpers.scopedId(path), blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
        if (blockParamId) {
          this.opcode("lookupBlockParam", blockParamId, path.parts);
        } else if (!name) {
          this.opcode("pushContext");
        } else if (path.data) {
          this.options.data = true;
          this.opcode("lookupData", path.depth, path.parts, path.strict);
        } else {
          this.opcode("lookupOnContext", path.parts, path.falsy, path.strict, scoped);
        }
      },
      StringLiteral: function StringLiteral(string) {
        this.opcode("pushString", string.value);
      },
      NumberLiteral: function NumberLiteral(number) {
        this.opcode("pushLiteral", number.value);
      },
      BooleanLiteral: function BooleanLiteral(bool) {
        this.opcode("pushLiteral", bool.value);
      },
      UndefinedLiteral: function UndefinedLiteral() {
        this.opcode("pushLiteral", "undefined");
      },
      NullLiteral: function NullLiteral() {
        this.opcode("pushLiteral", "null");
      },
      Hash: function Hash(hash) {
        var pairs = hash.pairs, i = 0, l = pairs.length;
        this.opcode("pushHash");
        for (; i < l; i++) {
          this.pushParam(pairs[i].value);
        }
        while (i--) {
          this.opcode("assignToHash", pairs[i].key);
        }
        this.opcode("popHash");
      },
      opcode: function opcode(name) {
        this.opcodes.push({
          opcode: name,
          args: slice.call(arguments, 1),
          loc: this.sourceNode[0].loc
        });
      },
      addDepth: function addDepth(depth) {
        if (!depth) {
          return;
        }
        this.useDepths = true;
      },
      classifySexpr: function classifySexpr(sexpr) {
        var isSimple = _ast2["default"].helpers.simpleId(sexpr.path);
        var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
        var isHelper = !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr);
        var isEligible = !isBlockParam && (isHelper || isSimple);
        if (isEligible && !isHelper) {
          var _name = sexpr.path.parts[0], options = this.options;
          if (options.knownHelpers[_name]) {
            isHelper = true;
          } else if (options.knownHelpersOnly) {
            isEligible = false;
          }
        }
        if (isHelper) {
          return "helper";
        } else if (isEligible) {
          return "ambiguous";
        } else {
          return "simple";
        }
      },
      pushParams: function pushParams(params) {
        for (var i = 0, l = params.length; i < l; i++) {
          this.pushParam(params[i]);
        }
      },
      pushParam: function pushParam(val) {
        var value = val.value != null ? val.value : val.original || "";
        if (this.stringParams) {
          if (value.replace) {
            value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".");
          }
          if (val.depth) {
            this.addDepth(val.depth);
          }
          this.opcode("getContext", val.depth || 0);
          this.opcode("pushStringParam", value, val.type);
          if (val.type === "SubExpression") {
            this.accept(val);
          }
        } else {
          if (this.trackIds) {
            var blockParamIndex = void 0;
            if (val.parts && !_ast2["default"].helpers.scopedId(val) && !val.depth) {
              blockParamIndex = this.blockParamIndex(val.parts[0]);
            }
            if (blockParamIndex) {
              var blockParamChild = val.parts.slice(1).join(".");
              this.opcode("pushId", "BlockParam", blockParamIndex, blockParamChild);
            } else {
              value = val.original || value;
              if (value.replace) {
                value = value.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "");
              }
              this.opcode("pushId", val.type, value);
            }
          }
          this.accept(val);
        }
      },
      setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
        var params = sexpr.params;
        this.pushParams(params);
        this.opcode("pushProgram", program);
        this.opcode("pushProgram", inverse);
        if (sexpr.hash) {
          this.accept(sexpr.hash);
        } else {
          this.opcode("emptyHash", omitEmpty);
        }
        return params;
      },
      blockParamIndex: function blockParamIndex(name) {
        for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
          var blockParams = this.options.blockParams[depth], param = blockParams && _utils.indexOf(blockParams, name);
          if (blockParams && param >= 0) {
            return [depth, param];
          }
        }
      }
    };
    function precompile(input, options, env) {
      if (input == null || typeof input !== "string" && input.type !== "Program") {
        throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
      }
      options = options || {};
      if (!("data" in options)) {
        options.data = true;
      }
      if (options.compat) {
        options.useDepths = true;
      }
      var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options);
      return new env.JavaScriptCompiler().compile(environment, options);
    }
    function compile(input, options, env) {
      if (options === void 0)
        options = {};
      if (input == null || typeof input !== "string" && input.type !== "Program") {
        throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
      }
      options = _utils.extend({}, options);
      if (!("data" in options)) {
        options.data = true;
      }
      if (options.compat) {
        options.useDepths = true;
      }
      var compiled = void 0;
      function compileInput() {
        var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options), templateSpec = new env.JavaScriptCompiler().compile(environment, options, void 0, true);
        return env.template(templateSpec);
      }
      function ret(context, execOptions) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled.call(this, context, execOptions);
      }
      ret._setup = function(setupOptions) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled._setup(setupOptions);
      };
      ret._child = function(i, data, blockParams, depths) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled._child(i, data, blockParams, depths);
      };
      return ret;
    }
    function argEquals(a, b) {
      if (a === b) {
        return true;
      }
      if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
        for (var i = 0; i < a.length; i++) {
          if (!argEquals(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
    }
    function transformLiteralToPath(sexpr) {
      if (!sexpr.path.parts) {
        var literal = sexpr.path;
        sexpr.path = {
          type: "PathExpression",
          data: false,
          depth: 0,
          parts: [literal.original + ""],
          original: literal.original + "",
          loc: literal.loc
        };
      }
    }
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64.js"(exports) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64-vlq.js"(exports) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/util.js"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join("/");
      if (path === "") {
        path = isAbsolute ? "/" : ".";
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/array-set.js"(exports) {
    var util = require_util();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/mapping-list.js"(exports) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-generator.js"(exports) {
    var base64VLQ = require_base64_vlq();
    var util = require_util();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, "file", null);
      this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, "generated");
      var original = util.getArg(aArgs, "original", null);
      var source = util.getArg(aArgs, "source", null);
      var name = util.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/binary-search.js"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/quick-sort.js"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-consumer.js"(exports) {
    var util = require_util();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, "line");
      var needle = {
        source: util.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sources = util.getArg(sourceMap, "sources");
      var names = util.getArg(sourceMap, "names", []);
      var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
      var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
      var mappings = util.getArg(sourceMap, "mappings");
      var file = util.getArg(sourceMap, "file", null);
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util.getArg(mapping, "originalLine", null),
            column: util.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util.getArg(aArgs, "line"),
        originalColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sections = util.getArg(sourceMap, "sections");
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset = util.getArg(s, "offset");
        var offsetLine = util.getArg(offset, "line");
        var offsetColumn = util.getArg(offset, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-node.js"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util = require_util();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/source-map.js"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js
var require_code_gen = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    var SourceNode = void 0;
    try {
      if (typeof define !== "function" || !define.amd) {
        SourceMap = require_source_map();
        SourceNode = SourceMap.SourceNode;
      }
    } catch (err) {
    }
    var SourceMap;
    if (!SourceNode) {
      SourceNode = function(line, column, srcFile, chunks) {
        this.src = "";
        if (chunks) {
          this.add(chunks);
        }
      };
      SourceNode.prototype = {
        add: function add(chunks) {
          if (_utils.isArray(chunks)) {
            chunks = chunks.join("");
          }
          this.src += chunks;
        },
        prepend: function prepend(chunks) {
          if (_utils.isArray(chunks)) {
            chunks = chunks.join("");
          }
          this.src = chunks + this.src;
        },
        toStringWithSourceMap: function toStringWithSourceMap() {
          return { code: this.toString() };
        },
        toString: function toString() {
          return this.src;
        }
      };
    }
    function castChunk(chunk, codeGen, loc) {
      if (_utils.isArray(chunk)) {
        var ret = [];
        for (var i = 0, len = chunk.length; i < len; i++) {
          ret.push(codeGen.wrap(chunk[i], loc));
        }
        return ret;
      } else if (typeof chunk === "boolean" || typeof chunk === "number") {
        return chunk + "";
      }
      return chunk;
    }
    function CodeGen(srcFile) {
      this.srcFile = srcFile;
      this.source = [];
    }
    CodeGen.prototype = {
      isEmpty: function isEmpty() {
        return !this.source.length;
      },
      prepend: function prepend(source, loc) {
        this.source.unshift(this.wrap(source, loc));
      },
      push: function push(source, loc) {
        this.source.push(this.wrap(source, loc));
      },
      merge: function merge() {
        var source = this.empty();
        this.each(function(line) {
          source.add(["  ", line, "\n"]);
        });
        return source;
      },
      each: function each(iter) {
        for (var i = 0, len = this.source.length; i < len; i++) {
          iter(this.source[i]);
        }
      },
      empty: function empty() {
        var loc = this.currentLocation || { start: {} };
        return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
      },
      wrap: function wrap(chunk) {
        var loc = arguments.length <= 1 || arguments[1] === void 0 ? this.currentLocation || { start: {} } : arguments[1];
        if (chunk instanceof SourceNode) {
          return chunk;
        }
        chunk = castChunk(chunk, this, loc);
        return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
      },
      functionCall: function functionCall(fn, type, params) {
        params = this.generateList(params);
        return this.wrap([fn, type ? "." + type + "(" : "(", params, ")"]);
      },
      quotedString: function quotedString(str) {
        return '"' + (str + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
      },
      objectLiteral: function objectLiteral(obj) {
        var _this = this;
        var pairs = [];
        Object.keys(obj).forEach(function(key) {
          var value = castChunk(obj[key], _this);
          if (value !== "undefined") {
            pairs.push([_this.quotedString(key), ":", value]);
          }
        });
        var ret = this.generateList(pairs);
        ret.prepend("{");
        ret.add("}");
        return ret;
      },
      generateList: function generateList(entries) {
        var ret = this.empty();
        for (var i = 0, len = entries.length; i < len; i++) {
          if (i) {
            ret.add(",");
          }
          ret.add(castChunk(entries[i], this));
        }
        return ret;
      },
      generateArray: function generateArray(entries) {
        var ret = this.generateList(entries);
        ret.prepend("[");
        ret.add("]");
        return ret;
      }
    };
    exports["default"] = CodeGen;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js
var require_javascript_compiler = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _base = require_base();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = require_utils();
    var _codeGen = require_code_gen();
    var _codeGen2 = _interopRequireDefault(_codeGen);
    function Literal(value) {
      this.value = value;
    }
    function JavaScriptCompiler() {
    }
    JavaScriptCompiler.prototype = {
      nameLookup: function nameLookup(parent, name) {
        return this.internalNameLookup(parent, name);
      },
      depthedLookup: function depthedLookup(name) {
        return [this.aliasable("container.lookup"), "(depths, ", JSON.stringify(name), ")"];
      },
      compilerInfo: function compilerInfo() {
        var revision = _base.COMPILER_REVISION, versions = _base.REVISION_CHANGES[revision];
        return [revision, versions];
      },
      appendToBuffer: function appendToBuffer(source, location, explicit) {
        if (!_utils.isArray(source)) {
          source = [source];
        }
        source = this.source.wrap(source, location);
        if (this.environment.isSimple) {
          return ["return ", source, ";"];
        } else if (explicit) {
          return ["buffer += ", source, ";"];
        } else {
          source.appendToBuffer = true;
          return source;
        }
      },
      initializeBuffer: function initializeBuffer() {
        return this.quotedString("");
      },
      internalNameLookup: function internalNameLookup(parent, name) {
        this.lookupPropertyFunctionIsUsed = true;
        return ["lookupProperty(", parent, ",", JSON.stringify(name), ")"];
      },
      lookupPropertyFunctionIsUsed: false,
      compile: function compile(environment, options, context, asObject) {
        this.environment = environment;
        this.options = options;
        this.stringParams = this.options.stringParams;
        this.trackIds = this.options.trackIds;
        this.precompile = !asObject;
        this.name = this.environment.name;
        this.isChild = !!context;
        this.context = context || {
          decorators: [],
          programs: [],
          environments: []
        };
        this.preamble();
        this.stackSlot = 0;
        this.stackVars = [];
        this.aliases = {};
        this.registers = { list: [] };
        this.hashes = [];
        this.compileStack = [];
        this.inlineStack = [];
        this.blockParams = [];
        this.compileChildren(environment, options);
        this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
        this.useBlockParams = this.useBlockParams || environment.useBlockParams;
        var opcodes = environment.opcodes, opcode = void 0, firstLoc = void 0, i = void 0, l = void 0;
        for (i = 0, l = opcodes.length; i < l; i++) {
          opcode = opcodes[i];
          this.source.currentLocation = opcode.loc;
          firstLoc = firstLoc || opcode.loc;
          this[opcode.opcode].apply(this, opcode.args);
        }
        this.source.currentLocation = firstLoc;
        this.pushSource("");
        if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
          throw new _exception2["default"]("Compile completed with content left on stack");
        }
        if (!this.decorators.isEmpty()) {
          this.useDecorators = true;
          this.decorators.prepend(["var decorators = container.decorators, ", this.lookupPropertyFunctionVarDeclaration(), ";\n"]);
          this.decorators.push("return fn;");
          if (asObject) {
            this.decorators = Function.apply(this, ["fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge()]);
          } else {
            this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n");
            this.decorators.push("}\n");
            this.decorators = this.decorators.merge();
          }
        } else {
          this.decorators = void 0;
        }
        var fn = this.createFunctionContext(asObject);
        if (!this.isChild) {
          var ret = {
            compiler: this.compilerInfo(),
            main: fn
          };
          if (this.decorators) {
            ret.main_d = this.decorators;
            ret.useDecorators = true;
          }
          var _context = this.context;
          var programs = _context.programs;
          var decorators = _context.decorators;
          for (i = 0, l = programs.length; i < l; i++) {
            if (programs[i]) {
              ret[i] = programs[i];
              if (decorators[i]) {
                ret[i + "_d"] = decorators[i];
                ret.useDecorators = true;
              }
            }
          }
          if (this.environment.usePartial) {
            ret.usePartial = true;
          }
          if (this.options.data) {
            ret.useData = true;
          }
          if (this.useDepths) {
            ret.useDepths = true;
          }
          if (this.useBlockParams) {
            ret.useBlockParams = true;
          }
          if (this.options.compat) {
            ret.compat = true;
          }
          if (!asObject) {
            ret.compiler = JSON.stringify(ret.compiler);
            this.source.currentLocation = { start: { line: 1, column: 0 } };
            ret = this.objectLiteral(ret);
            if (options.srcName) {
              ret = ret.toStringWithSourceMap({ file: options.destName });
              ret.map = ret.map && ret.map.toString();
            } else {
              ret = ret.toString();
            }
          } else {
            ret.compilerOptions = this.options;
          }
          return ret;
        } else {
          return fn;
        }
      },
      preamble: function preamble() {
        this.lastContext = 0;
        this.source = new _codeGen2["default"](this.options.srcName);
        this.decorators = new _codeGen2["default"](this.options.srcName);
      },
      createFunctionContext: function createFunctionContext(asObject) {
        var _this = this;
        var varDeclarations = "";
        var locals = this.stackVars.concat(this.registers.list);
        if (locals.length > 0) {
          varDeclarations += ", " + locals.join(", ");
        }
        var aliasCount = 0;
        Object.keys(this.aliases).forEach(function(alias) {
          var node = _this.aliases[alias];
          if (node.children && node.referenceCount > 1) {
            varDeclarations += ", alias" + ++aliasCount + "=" + alias;
            node.children[0] = "alias" + aliasCount;
          }
        });
        if (this.lookupPropertyFunctionIsUsed) {
          varDeclarations += ", " + this.lookupPropertyFunctionVarDeclaration();
        }
        var params = ["container", "depth0", "helpers", "partials", "data"];
        if (this.useBlockParams || this.useDepths) {
          params.push("blockParams");
        }
        if (this.useDepths) {
          params.push("depths");
        }
        var source = this.mergeSource(varDeclarations);
        if (asObject) {
          params.push(source);
          return Function.apply(this, params);
        } else {
          return this.source.wrap(["function(", params.join(","), ") {\n  ", source, "}"]);
        }
      },
      mergeSource: function mergeSource(varDeclarations) {
        var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = void 0, sourceSeen = void 0, bufferStart = void 0, bufferEnd = void 0;
        this.source.each(function(line) {
          if (line.appendToBuffer) {
            if (bufferStart) {
              line.prepend("  + ");
            } else {
              bufferStart = line;
            }
            bufferEnd = line;
          } else {
            if (bufferStart) {
              if (!sourceSeen) {
                appendFirst = true;
              } else {
                bufferStart.prepend("buffer += ");
              }
              bufferEnd.add(";");
              bufferStart = bufferEnd = void 0;
            }
            sourceSeen = true;
            if (!isSimple) {
              appendOnly = false;
            }
          }
        });
        if (appendOnly) {
          if (bufferStart) {
            bufferStart.prepend("return ");
            bufferEnd.add(";");
          } else if (!sourceSeen) {
            this.source.push('return "";');
          }
        } else {
          varDeclarations += ", buffer = " + (appendFirst ? "" : this.initializeBuffer());
          if (bufferStart) {
            bufferStart.prepend("return buffer + ");
            bufferEnd.add(";");
          } else {
            this.source.push("return buffer;");
          }
        }
        if (varDeclarations) {
          this.source.prepend("var " + varDeclarations.substring(2) + (appendFirst ? "" : ";\n"));
        }
        return this.source.merge();
      },
      lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
        return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
      },
      blockValue: function blockValue(name) {
        var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
        this.setupHelperArgs(name, 0, params);
        var blockName = this.popStack();
        params.splice(1, 0, blockName);
        this.push(this.source.functionCall(blockHelperMissing, "call", params));
      },
      ambiguousBlockValue: function ambiguousBlockValue() {
        var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
        this.setupHelperArgs("", 0, params, true);
        this.flushInline();
        var current = this.topStack();
        params.splice(1, 0, current);
        this.pushSource(["if (!", this.lastHelper, ") { ", current, " = ", this.source.functionCall(blockHelperMissing, "call", params), "}"]);
      },
      appendContent: function appendContent(content) {
        if (this.pendingContent) {
          content = this.pendingContent + content;
        } else {
          this.pendingLocation = this.source.currentLocation;
        }
        this.pendingContent = content;
      },
      append: function append() {
        if (this.isInline()) {
          this.replaceStack(function(current) {
            return [" != null ? ", current, ' : ""'];
          });
          this.pushSource(this.appendToBuffer(this.popStack()));
        } else {
          var local = this.popStack();
          this.pushSource(["if (", local, " != null) { ", this.appendToBuffer(local, void 0, true), " }"]);
          if (this.environment.isSimple) {
            this.pushSource(["else { ", this.appendToBuffer("''", void 0, true), " }"]);
          }
        }
      },
      appendEscaped: function appendEscaped() {
        this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"), "(", this.popStack(), ")"]));
      },
      getContext: function getContext(depth) {
        this.lastContext = depth;
      },
      pushContext: function pushContext() {
        this.pushStackLiteral(this.contextName(this.lastContext));
      },
      lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
        var i = 0;
        if (!scoped && this.options.compat && !this.lastContext) {
          this.push(this.depthedLookup(parts[i++]));
        } else {
          this.pushContext();
        }
        this.resolvePath("context", parts, i, falsy, strict);
      },
      lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
        this.useBlockParams = true;
        this.push(["blockParams[", blockParamId[0], "][", blockParamId[1], "]"]);
        this.resolvePath("context", parts, 1);
      },
      lookupData: function lookupData(depth, parts, strict) {
        if (!depth) {
          this.pushStackLiteral("data");
        } else {
          this.pushStackLiteral("container.data(data, " + depth + ")");
        }
        this.resolvePath("data", parts, 0, true, strict);
      },
      resolvePath: function resolvePath(type, parts, i, falsy, strict) {
        var _this2 = this;
        if (this.options.strict || this.options.assumeObjects) {
          this.push(strictLookup(this.options.strict && strict, this, parts, type));
          return;
        }
        var len = parts.length;
        for (; i < len; i++) {
          this.replaceStack(function(current) {
            var lookup = _this2.nameLookup(current, parts[i], type);
            if (!falsy) {
              return [" != null ? ", lookup, " : ", current];
            } else {
              return [" && ", lookup];
            }
          });
        }
      },
      resolvePossibleLambda: function resolvePossibleLambda() {
        this.push([this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")"]);
      },
      pushStringParam: function pushStringParam(string, type) {
        this.pushContext();
        this.pushString(type);
        if (type !== "SubExpression") {
          if (typeof string === "string") {
            this.pushString(string);
          } else {
            this.pushStackLiteral(string);
          }
        }
      },
      emptyHash: function emptyHash(omitEmpty) {
        if (this.trackIds) {
          this.push("{}");
        }
        if (this.stringParams) {
          this.push("{}");
          this.push("{}");
        }
        this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
      },
      pushHash: function pushHash() {
        if (this.hash) {
          this.hashes.push(this.hash);
        }
        this.hash = { values: {}, types: [], contexts: [], ids: [] };
      },
      popHash: function popHash() {
        var hash = this.hash;
        this.hash = this.hashes.pop();
        if (this.trackIds) {
          this.push(this.objectLiteral(hash.ids));
        }
        if (this.stringParams) {
          this.push(this.objectLiteral(hash.contexts));
          this.push(this.objectLiteral(hash.types));
        }
        this.push(this.objectLiteral(hash.values));
      },
      pushString: function pushString(string) {
        this.pushStackLiteral(this.quotedString(string));
      },
      pushLiteral: function pushLiteral(value) {
        this.pushStackLiteral(value);
      },
      pushProgram: function pushProgram(guid) {
        if (guid != null) {
          this.pushStackLiteral(this.programExpression(guid));
        } else {
          this.pushStackLiteral(null);
        }
      },
      registerDecorator: function registerDecorator(paramSize, name) {
        var foundDecorator = this.nameLookup("decorators", name, "decorator"), options = this.setupHelperArgs(name, paramSize);
        this.decorators.push(["fn = ", this.decorators.functionCall(foundDecorator, "", ["fn", "props", "container", options]), " || fn;"]);
      },
      invokeHelper: function invokeHelper(paramSize, name, isSimple) {
        var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name);
        var possibleFunctionCalls = [];
        if (isSimple) {
          possibleFunctionCalls.push(helper.name);
        }
        possibleFunctionCalls.push(nonHelper);
        if (!this.options.strict) {
          possibleFunctionCalls.push(this.aliasable("container.hooks.helperMissing"));
        }
        var functionLookupCode = ["(", this.itemsSeparatedBy(possibleFunctionCalls, "||"), ")"];
        var functionCall = this.source.functionCall(functionLookupCode, "call", helper.callParams);
        this.push(functionCall);
      },
      itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
        var result = [];
        result.push(items[0]);
        for (var i = 1; i < items.length; i++) {
          result.push(separator, items[i]);
        }
        return result;
      },
      invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
        var helper = this.setupHelper(paramSize, name);
        this.push(this.source.functionCall(helper.name, "call", helper.callParams));
      },
      invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
        this.useRegister("helper");
        var nonHelper = this.popStack();
        this.emptyHash();
        var helper = this.setupHelper(0, name, helperCall);
        var helperName = this.lastHelper = this.nameLookup("helpers", name, "helper");
        var lookup = ["(", "(helper = ", helperName, " || ", nonHelper, ")"];
        if (!this.options.strict) {
          lookup[0] = "(helper = ";
          lookup.push(" != null ? helper : ", this.aliasable("container.hooks.helperMissing"));
        }
        this.push(["(", lookup, helper.paramsInit ? ["),(", helper.paramsInit] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", helper.callParams), " : helper))"]);
      },
      invokePartial: function invokePartial(isDynamic, name, indent) {
        var params = [], options = this.setupParams(name, 1, params);
        if (isDynamic) {
          name = this.popStack();
          delete options.name;
        }
        if (indent) {
          options.indent = JSON.stringify(indent);
        }
        options.helpers = "helpers";
        options.partials = "partials";
        options.decorators = "container.decorators";
        if (!isDynamic) {
          params.unshift(this.nameLookup("partials", name, "partial"));
        } else {
          params.unshift(name);
        }
        if (this.options.compat) {
          options.depths = "depths";
        }
        options = this.objectLiteral(options);
        params.push(options);
        this.push(this.source.functionCall("container.invokePartial", "", params));
      },
      assignToHash: function assignToHash(key) {
        var value = this.popStack(), context = void 0, type = void 0, id = void 0;
        if (this.trackIds) {
          id = this.popStack();
        }
        if (this.stringParams) {
          type = this.popStack();
          context = this.popStack();
        }
        var hash = this.hash;
        if (context) {
          hash.contexts[key] = context;
        }
        if (type) {
          hash.types[key] = type;
        }
        if (id) {
          hash.ids[key] = id;
        }
        hash.values[key] = value;
      },
      pushId: function pushId(type, name, child) {
        if (type === "BlockParam") {
          this.pushStackLiteral("blockParams[" + name[0] + "].path[" + name[1] + "]" + (child ? " + " + JSON.stringify("." + child) : ""));
        } else if (type === "PathExpression") {
          this.pushString(name);
        } else if (type === "SubExpression") {
          this.pushStackLiteral("true");
        } else {
          this.pushStackLiteral("null");
        }
      },
      compiler: JavaScriptCompiler,
      compileChildren: function compileChildren(environment, options) {
        var children = environment.children, child = void 0, compiler = void 0;
        for (var i = 0, l = children.length; i < l; i++) {
          child = children[i];
          compiler = new this.compiler();
          var existing = this.matchExistingProgram(child);
          if (existing == null) {
            this.context.programs.push("");
            var index = this.context.programs.length;
            child.index = index;
            child.name = "program" + index;
            this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
            this.context.decorators[index] = compiler.decorators;
            this.context.environments[index] = child;
            this.useDepths = this.useDepths || compiler.useDepths;
            this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
            child.useDepths = this.useDepths;
            child.useBlockParams = this.useBlockParams;
          } else {
            child.index = existing.index;
            child.name = "program" + existing.index;
            this.useDepths = this.useDepths || existing.useDepths;
            this.useBlockParams = this.useBlockParams || existing.useBlockParams;
          }
        }
      },
      matchExistingProgram: function matchExistingProgram(child) {
        for (var i = 0, len = this.context.environments.length; i < len; i++) {
          var environment = this.context.environments[i];
          if (environment && environment.equals(child)) {
            return environment;
          }
        }
      },
      programExpression: function programExpression(guid) {
        var child = this.environment.children[guid], programParams = [child.index, "data", child.blockParams];
        if (this.useBlockParams || this.useDepths) {
          programParams.push("blockParams");
        }
        if (this.useDepths) {
          programParams.push("depths");
        }
        return "container.program(" + programParams.join(", ") + ")";
      },
      useRegister: function useRegister(name) {
        if (!this.registers[name]) {
          this.registers[name] = true;
          this.registers.list.push(name);
        }
      },
      push: function push(expr) {
        if (!(expr instanceof Literal)) {
          expr = this.source.wrap(expr);
        }
        this.inlineStack.push(expr);
        return expr;
      },
      pushStackLiteral: function pushStackLiteral(item) {
        this.push(new Literal(item));
      },
      pushSource: function pushSource(source) {
        if (this.pendingContent) {
          this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
          this.pendingContent = void 0;
        }
        if (source) {
          this.source.push(source);
        }
      },
      replaceStack: function replaceStack(callback) {
        var prefix = ["("], stack = void 0, createdStack = void 0, usedLiteral = void 0;
        if (!this.isInline()) {
          throw new _exception2["default"]("replaceStack on non-inline");
        }
        var top = this.popStack(true);
        if (top instanceof Literal) {
          stack = [top.value];
          prefix = ["(", stack];
          usedLiteral = true;
        } else {
          createdStack = true;
          var _name = this.incrStack();
          prefix = ["((", this.push(_name), " = ", top, ")"];
          stack = this.topStack();
        }
        var item = callback.call(this, stack);
        if (!usedLiteral) {
          this.popStack();
        }
        if (createdStack) {
          this.stackSlot--;
        }
        this.push(prefix.concat(item, ")"));
      },
      incrStack: function incrStack() {
        this.stackSlot++;
        if (this.stackSlot > this.stackVars.length) {
          this.stackVars.push("stack" + this.stackSlot);
        }
        return this.topStackName();
      },
      topStackName: function topStackName() {
        return "stack" + this.stackSlot;
      },
      flushInline: function flushInline() {
        var inlineStack = this.inlineStack;
        this.inlineStack = [];
        for (var i = 0, len = inlineStack.length; i < len; i++) {
          var entry = inlineStack[i];
          if (entry instanceof Literal) {
            this.compileStack.push(entry);
          } else {
            var stack = this.incrStack();
            this.pushSource([stack, " = ", entry, ";"]);
            this.compileStack.push(stack);
          }
        }
      },
      isInline: function isInline() {
        return this.inlineStack.length;
      },
      popStack: function popStack(wrapped) {
        var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
        if (!wrapped && item instanceof Literal) {
          return item.value;
        } else {
          if (!inline) {
            if (!this.stackSlot) {
              throw new _exception2["default"]("Invalid stack pop");
            }
            this.stackSlot--;
          }
          return item;
        }
      },
      topStack: function topStack() {
        var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
        if (item instanceof Literal) {
          return item.value;
        } else {
          return item;
        }
      },
      contextName: function contextName(context) {
        if (this.useDepths && context) {
          return "depths[" + context + "]";
        } else {
          return "depth" + context;
        }
      },
      quotedString: function quotedString(str) {
        return this.source.quotedString(str);
      },
      objectLiteral: function objectLiteral(obj) {
        return this.source.objectLiteral(obj);
      },
      aliasable: function aliasable(name) {
        var ret = this.aliases[name];
        if (ret) {
          ret.referenceCount++;
          return ret;
        }
        ret = this.aliases[name] = this.source.wrap(name);
        ret.aliasable = true;
        ret.referenceCount = 1;
        return ret;
      },
      setupHelper: function setupHelper(paramSize, name, blockHelper) {
        var params = [], paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
        var foundHelper = this.nameLookup("helpers", name, "helper"), callContext = this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || {})");
        return {
          params,
          paramsInit,
          name: foundHelper,
          callParams: [callContext].concat(params)
        };
      },
      setupParams: function setupParams(helper, paramSize, params) {
        var options = {}, contexts = [], types = [], ids = [], objectArgs = !params, param = void 0;
        if (objectArgs) {
          params = [];
        }
        options.name = this.quotedString(helper);
        options.hash = this.popStack();
        if (this.trackIds) {
          options.hashIds = this.popStack();
        }
        if (this.stringParams) {
          options.hashTypes = this.popStack();
          options.hashContexts = this.popStack();
        }
        var inverse = this.popStack(), program = this.popStack();
        if (program || inverse) {
          options.fn = program || "container.noop";
          options.inverse = inverse || "container.noop";
        }
        var i = paramSize;
        while (i--) {
          param = this.popStack();
          params[i] = param;
          if (this.trackIds) {
            ids[i] = this.popStack();
          }
          if (this.stringParams) {
            types[i] = this.popStack();
            contexts[i] = this.popStack();
          }
        }
        if (objectArgs) {
          options.args = this.source.generateArray(params);
        }
        if (this.trackIds) {
          options.ids = this.source.generateArray(ids);
        }
        if (this.stringParams) {
          options.types = this.source.generateArray(types);
          options.contexts = this.source.generateArray(contexts);
        }
        if (this.options.data) {
          options.data = "data";
        }
        if (this.useBlockParams) {
          options.blockParams = "blockParams";
        }
        return options;
      },
      setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
        var options = this.setupParams(helper, paramSize, params);
        options.loc = JSON.stringify(this.source.currentLocation);
        options = this.objectLiteral(options);
        if (useRegister) {
          this.useRegister("options");
          params.push("options");
          return ["options=", options];
        } else if (params) {
          params.push(options);
          return "";
        } else {
          return options;
        }
      }
    };
    (function() {
      var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" ");
      var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
      for (var i = 0, l = reservedWords.length; i < l; i++) {
        compilerWords[reservedWords[i]] = true;
      }
    })();
    JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
      return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
    };
    function strictLookup(requireTerminal, compiler, parts, type) {
      var stack = compiler.popStack(), i = 0, len = parts.length;
      if (requireTerminal) {
        len--;
      }
      for (; i < len; i++) {
        stack = compiler.nameLookup(stack, parts[i], type);
      }
      if (requireTerminal) {
        return [compiler.aliasable("container.strict"), "(", stack, ", ", compiler.quotedString(parts[i]), ", ", JSON.stringify(compiler.source.currentLocation), " )"];
      } else {
        return stack;
      }
    }
    exports["default"] = JavaScriptCompiler;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars.js
var require_handlebars = __commonJS({
  "node_modules/.pnpm/handlebars@4.7.7/node_modules/handlebars/dist/cjs/handlebars.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _handlebarsRuntime = require_handlebars_runtime();
    var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
    var _handlebarsCompilerAst = require_ast();
    var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
    var _handlebarsCompilerBase = require_base2();
    var _handlebarsCompilerCompiler = require_compiler();
    var _handlebarsCompilerJavascriptCompiler = require_javascript_compiler();
    var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
    var _handlebarsCompilerVisitor = require_visitor();
    var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
    var _handlebarsNoConflict = require_no_conflict();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    var _create = _handlebarsRuntime2["default"].create;
    function create() {
      var hb = _create();
      hb.compile = function(input, options) {
        return _handlebarsCompilerCompiler.compile(input, options, hb);
      };
      hb.precompile = function(input, options) {
        return _handlebarsCompilerCompiler.precompile(input, options, hb);
      };
      hb.AST = _handlebarsCompilerAst2["default"];
      hb.Compiler = _handlebarsCompilerCompiler.Compiler;
      hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2["default"];
      hb.Parser = _handlebarsCompilerBase.parser;
      hb.parse = _handlebarsCompilerBase.parse;
      hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;
      return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2["default"](inst);
    inst.Visitor = _handlebarsCompilerVisitor2["default"];
    inst["default"] = inst;
    exports["default"] = inst;
    module.exports = exports["default"];
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/template_helpers.js
var require_template_helpers = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/template_helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasTextContents = void 0;
    var _handlebars = _interopRequireDefault(require_handlebars());
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _tag = _interopRequireDefault(require_tag());
    var _constants = require_constants();
    var _helpers = require_helpers();
    var _utilities = require_utilities();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var lineHasContents = function lineHasContents2(line) {
      return line.items.some(function(item) {
        return item.isRenderable();
      });
    };
    var hasTextContents = function hasTextContents2(line) {
      return line.items.some(function(item) {
        return item instanceof _chord_lyrics_pair["default"] && item.lyrics || item instanceof _tag["default"] && item.isRenderable() || (0, _utilities.isEvaluatable)(item);
      });
    };
    exports.hasTextContents = hasTextContents;
    _handlebars["default"].registerHelper("isChordLyricsPair", function(item) {
      return item instanceof _chord_lyrics_pair["default"];
    });
    _handlebars["default"].registerHelper("isTag", function(item) {
      return item instanceof _tag["default"];
    });
    _handlebars["default"].registerHelper("isComment", function(item) {
      return item.name === "comment";
    });
    _handlebars["default"].registerHelper("shouldRenderLine", function(line, options) {
      if (options.data.root.renderBlankLines) {
        return true;
      }
      return lineHasContents(line);
    });
    _handlebars["default"].registerHelper("hasChordContents", _utilities.hasChordContents);
    _handlebars["default"].registerHelper("hasTextContents", hasTextContents);
    _handlebars["default"].registerHelper("lineHasContents", lineHasContents);
    _handlebars["default"].registerHelper("lineClasses", function(line) {
      var classes = ["row"];
      if (!lineHasContents(line)) {
        classes.push("empty-line");
      }
      return classes.join(" ");
    });
    _handlebars["default"].registerHelper("toUpperCase", function(line) {
      return line.toUpperCase();
    });
    _handlebars["default"].registerHelper("paragraphClasses", function(paragraph) {
      var classes = ["paragraph"];
      if (paragraph.type !== _constants.INDETERMINATE && paragraph.type !== _constants.NONE) {
        classes.push(paragraph.type);
      }
      return classes.join(" ");
    });
    _handlebars["default"].registerHelper("isEvaluatable", _utilities.isEvaluatable);
    _handlebars["default"].registerHelper("evaluate", function(item, metadata) {
      if (!metadata) {
        throw new Error("cannot evaluate, metadata is null");
      }
      return item.evaluate(metadata);
    });
    _handlebars["default"].registerHelper("renderChord", _helpers.renderChord);
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/text_formatter.js
var require_text_formatter = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/text_formatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _tag = _interopRequireDefault(require_tag());
    var _helpers = require_helpers();
    var _template_helpers = require_template_helpers();
    var _utilities = require_utilities();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TextFormatter = function() {
      function TextFormatter2() {
        _classCallCheck(this, TextFormatter2);
      }
      _createClass(TextFormatter2, [{
        key: "format",
        value: function format(song) {
          this.song = song;
          return [this.formatHeader(), this.formatParagraphs()].join("");
        }
      }, {
        key: "formatHeader",
        value: function formatHeader() {
          var _this$song = this.song, title = _this$song.title, subtitle = _this$song.subtitle;
          var separator = title || subtitle ? "\n" : "";
          return [this.formatTitle(title), this.formatSubTitle(subtitle), separator].join("");
        }
      }, {
        key: "formatParagraphs",
        value: function formatParagraphs() {
          var _this = this;
          var _this$song2 = this.song, bodyParagraphs = _this$song2.bodyParagraphs, metadata = _this$song2.metadata;
          return bodyParagraphs.map(function(paragraph) {
            return _this.formatParagraph(paragraph, metadata);
          }).join("\n\n");
        }
      }, {
        key: "formatParagraph",
        value: function formatParagraph(paragraph, metadata) {
          var _this2 = this;
          return paragraph.lines.filter(function(line) {
            return line.hasRenderableItems();
          }).map(function(line) {
            return _this2.formatLine(line, metadata);
          }).join("\n");
        }
      }, {
        key: "formatLine",
        value: function formatLine(line, metadata) {
          var parts = [this.formatLineTop(line), this.formatLineBottom(line, metadata)];
          return parts.filter(function(i) {
            return i !== null;
          }).map(function(part) {
            return part.trimRight();
          }).join("\n");
        }
      }, {
        key: "formatTitle",
        value: function formatTitle(title) {
          if (title) {
            return "".concat(title.toUpperCase(), "\n");
          }
          return "";
        }
      }, {
        key: "formatSubTitle",
        value: function formatSubTitle(subtitle) {
          if (subtitle) {
            return "".concat(subtitle, "\n");
          }
          return "";
        }
      }, {
        key: "formatLineTop",
        value: function formatLineTop(line) {
          if ((0, _utilities.hasChordContents)(line)) {
            return this.formatLineWithFormatter(line, this.formatItemTop);
          }
          return null;
        }
      }, {
        key: "chordLyricsPairLength",
        value: function chordLyricsPairLength(chordLyricsPair, line) {
          var chords = (0, _helpers.renderChord)(chordLyricsPair.chords, line.key, line.transposeKey, this.song);
          var lyrics = chordLyricsPair.lyrics;
          var chordsLength = (chords || "").length;
          var lyricsLength = (lyrics || "").length;
          if (chordsLength >= lyricsLength) {
            return chordsLength + 1;
          }
          return Math.max(chordsLength, lyricsLength);
        }
      }, {
        key: "formatItemTop",
        value: function formatItemTop(item, metadata, line) {
          if (item instanceof _tag["default"] && item.isRenderable()) {
            return (0, _utilities.padLeft)("", item.value);
          }
          if (item instanceof _chord_lyrics_pair["default"]) {
            var chords = (0, _helpers.renderChord)(item.chords, line.key, line.transposeKey, this.song);
            return (0, _utilities.padLeft)(chords, this.chordLyricsPairLength(item, line));
          }
          return "";
        }
      }, {
        key: "formatLineBottom",
        value: function formatLineBottom(line, metadata) {
          if ((0, _template_helpers.hasTextContents)(line)) {
            return this.formatLineWithFormatter(line, this.formatItemBottom, metadata);
          }
          return null;
        }
      }, {
        key: "formatLineWithFormatter",
        value: function formatLineWithFormatter(line, formatter, metadata) {
          var _this3 = this;
          return line.items.map(function(item) {
            return formatter.call(_this3, item, metadata, line);
          }).join("");
        }
      }, {
        key: "formatItemBottom",
        value: function formatItemBottom(item, metadata, line) {
          if (item instanceof _tag["default"] && item.isRenderable()) {
            return item.value;
          }
          if (item instanceof _chord_lyrics_pair["default"]) {
            return (0, _utilities.padLeft)(item.lyrics, this.chordLyricsPairLength(item, line));
          }
          if (typeof item.evaluate === "function") {
            return item.evaluate(metadata);
          }
          return "";
        }
      }]);
      return TextFormatter2;
    }();
    var _default = TextFormatter;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_formatter.js
var require_html_formatter = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_formatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var HtmlFormatter = function() {
      function HtmlFormatter2() {
        _classCallCheck(this, HtmlFormatter2);
      }
      _createClass(HtmlFormatter2, [{
        key: "formatWithTemplate",
        value: function formatWithTemplate(song, template) {
          return template({
            song
          }, {
            allowedProtoProperties: {
              bodyLines: true,
              bodyParagraphs: true,
              subtitle: true,
              title: true,
              value: true,
              key: true
            }
          });
        }
      }]);
      return HtmlFormatter2;
    }();
    var _default = HtmlFormatter;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/templates/html_table_formatter.js
var require_html_table_formatter = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/templates/html_table_formatter.js"() {
    "use strict";
    var Handlebars = require_handlebars();
    var template = Handlebars.template;
    var templates = Handlebars.templates = Handlebars.templates || {};
    templates["html_table_formatter"] = template({
      "1": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return ((stack1 = lookupProperty(helpers, "if").call(alias1, depth0 != null ? lookupProperty(depth0, "title") : depth0, {
          "name": "if",
          "hash": {},
          "fn": container.program(2, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 11
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, depth0 != null ? lookupProperty(depth0, "subtitle") : depth0, {
          "name": "if",
          "hash": {},
          "fn": container.program(4, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 11
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, depth0 != null ? lookupProperty(depth0, "bodyLines") : depth0, {
          "name": "if",
          "hash": {},
          "fn": container.program(6, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 11
            }
          }
        })) != null ? stack1 : "");
      },
      "2": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<h1>" + container.escapeExpression((helper = (helper = lookupProperty(helpers, "title") || (depth0 != null ? lookupProperty(depth0, "title") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "title",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 19
            }
          }
        }) : helper)) + "</h1>";
      },
      "4": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<h2>" + container.escapeExpression((helper = (helper = lookupProperty(helpers, "subtitle") || (depth0 != null ? lookupProperty(depth0, "subtitle") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "subtitle",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 22
            }
          }
        }) : helper)) + "</h2>";
      },
      "6": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="chord-sheet">' + ((stack1 = lookupProperty(helpers, "each").call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "bodyParagraphs") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(7, data, 1, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 17
            }
          }
        })) != null ? stack1 : "") + "</div>";
      },
      "7": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="' + container.escapeExpression(lookupProperty(helpers, "paragraphClasses").call(alias1, blockParams[0][0], {
          "name": "paragraphClasses",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 13,
              "column": 20
            },
            "end": {
              "line": 13,
              "column": 50
            }
          }
        })) + '">' + ((stack1 = lookupProperty(helpers, "each").call(alias1, depth0 != null ? lookupProperty(depth0, "lines") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(8, data, 1, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 14,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 21
            }
          }
        })) != null ? stack1 : "") + "</div>";
      },
      "8": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "shouldRenderLine").call(alias1, blockParams[0][0], {
          "name": "shouldRenderLine",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 15,
              "column": 19
            },
            "end": {
              "line": 15,
              "column": 42
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(9, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 15,
              "column": 12
            },
            "end": {
              "line": 47,
              "column": 21
            }
          }
        })) != null ? stack1 : "";
      },
      "9": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<table class="' + container.escapeExpression(lookupProperty(helpers, "lineClasses").call(alias1, blockParams[1][0], {
          "name": "lineClasses",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 16,
              "column": 28
            },
            "end": {
              "line": 16,
              "column": 48
            }
          }
        })) + '">' + ((stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "hasChordContents").call(alias1, blockParams[1][0], {
          "name": "hasChordContents",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 17,
              "column": 23
            },
            "end": {
              "line": 17,
              "column": 46
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(10, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 25,
              "column": 25
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, (lookupProperty(helpers, "hasTextContents") || depth0 && lookupProperty(depth0, "hasTextContents") || container.hooks.helperMissing).call(alias1, blockParams[1][0], {
          "name": "hasTextContents",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 27,
              "column": 23
            },
            "end": {
              "line": 27,
              "column": 45
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(14, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 27,
              "column": 16
            },
            "end": {
              "line": 45,
              "column": 25
            }
          }
        })) != null ? stack1 : "") + "</table>";
      },
      "10": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<tr>" + ((stack1 = lookupProperty(helpers, "each").call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "items") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(11, data, 1, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 19,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 31
            }
          }
        })) != null ? stack1 : "") + "</tr>";
      },
      "11": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isChordLyricsPair").call(alias1, blockParams[0][0], {
          "name": "isChordLyricsPair",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 20,
              "column": 29
            },
            "end": {
              "line": 20,
              "column": 53
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(12, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 20,
              "column": 22
            },
            "end": {
              "line": 22,
              "column": 31
            }
          }
        })) != null ? stack1 : "";
      },
      "12": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<td class="chord">' + container.escapeExpression((lookupProperty(helpers, "renderChord") || depth0 && lookupProperty(depth0, "renderChord") || container.hooks.helperMissing).call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "chords") : depth0, (stack1 = blockParams[4][0]) != null ? lookupProperty(stack1, "key") : stack1, (stack1 = blockParams[4][0]) != null ? lookupProperty(stack1, "transposeKey") : stack1, (stack1 = data && lookupProperty(data, "root")) && lookupProperty(stack1, "song"), {
          "name": "renderChord",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 21,
              "column": 42
            },
            "end": {
              "line": 21,
              "column": 102
            }
          }
        })) + "</td>";
      },
      "14": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<tr>" + ((stack1 = lookupProperty(helpers, "each").call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "items") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(15, data, 1, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 29,
              "column": 20
            },
            "end": {
              "line": 43,
              "column": 31
            }
          }
        })) != null ? stack1 : "") + "</tr>";
      },
      "15": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return ((stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isChordLyricsPair").call(alias1, blockParams[0][0], {
          "name": "isChordLyricsPair",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 30,
              "column": 29
            },
            "end": {
              "line": 30,
              "column": 53
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(16, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 30,
              "column": 22
            },
            "end": {
              "line": 32,
              "column": 31
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isTag").call(alias1, blockParams[0][0], {
          "name": "isTag",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 34,
              "column": 29
            },
            "end": {
              "line": 34,
              "column": 41
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(18, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 34,
              "column": 22
            },
            "end": {
              "line": 38,
              "column": 31
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, (lookupProperty(helpers, "isEvaluatable") || depth0 && lookupProperty(depth0, "isEvaluatable") || container.hooks.helperMissing).call(alias1, blockParams[0][0], {
          "name": "isEvaluatable",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 40,
              "column": 29
            },
            "end": {
              "line": 40,
              "column": 49
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(21, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 40,
              "column": 22
            },
            "end": {
              "line": 42,
              "column": 31
            }
          }
        })) != null ? stack1 : "");
      },
      "16": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<td class="lyrics">' + container.escapeExpression((helper = (helper = lookupProperty(helpers, "lyrics") || (depth0 != null ? lookupProperty(depth0, "lyrics") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "lyrics",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 31,
              "column": 43
            },
            "end": {
              "line": 31,
              "column": 53
            }
          }
        }) : helper)) + "</td>";
      },
      "18": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isComment").call(alias1, blockParams[1][0], {
          "name": "isComment",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 35,
              "column": 31
            },
            "end": {
              "line": 35,
              "column": 47
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(19, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 35,
              "column": 24
            },
            "end": {
              "line": 37,
              "column": 33
            }
          }
        })) != null ? stack1 : "";
      },
      "19": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<td class="comment">' + container.escapeExpression((helper = (helper = lookupProperty(helpers, "value") || (depth0 != null ? lookupProperty(depth0, "value") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "value",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 36,
              "column": 46
            },
            "end": {
              "line": 36,
              "column": 55
            }
          }
        }) : helper)) + "</td>";
      },
      "21": function _(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<td class="lyrics">' + container.escapeExpression((lookupProperty(helpers, "evaluate") || depth0 && lookupProperty(depth0, "evaluate") || container.hooks.helperMissing).call(depth0 != null ? depth0 : container.nullContext || {}, blockParams[1][0], (stack1 = depths[4] != null ? lookupProperty(depths[4], "song") : depths[4]) != null ? lookupProperty(stack1, "metadata") : stack1, {
          "name": "evaluate",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 41,
              "column": 43
            },
            "end": {
              "line": 41,
              "column": 86
            }
          }
        })) + "</td>";
      },
      "compiler": [8, ">= 4.3.0"],
      "main": function main(container, depth0, helpers, partials, data, blockParams, depths) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "with").call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "song") : depth0, {
          "name": "with",
          "hash": {},
          "fn": container.program(1, data, 0, blockParams, depths),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 11
            }
          }
        })) != null ? stack1 : "";
      },
      "useData": true,
      "useDepths": true,
      "useBlockParams": true
    });
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_table_formatter.js
var require_html_table_formatter2 = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_table_formatter.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultCss = exports["default"] = void 0;
    exports.scopedCss = scopedCss;
    var _handlebars = _interopRequireDefault(require_handlebars());
    require_template_helpers();
    var _html_formatter = _interopRequireDefault(require_html_formatter());
    require_html_table_formatter();
    var _utilities = require_utilities();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var template = _handlebars["default"].templates.html_table_formatter;
    var defaultCss = {
      h1: {
        fontSize: "1.5em"
      },
      h2: {
        fontSize: "1.1em"
      },
      table: {
        borderSpacing: "0",
        color: "inherit"
      },
      td: {
        padding: "3px 0"
      },
      ".chord:not(:last-child)": {
        paddingRight: "10px"
      },
      ".paragraph": {
        marginBottom: "1em"
      }
    };
    exports.defaultCss = defaultCss;
    function scopedCss(scope) {
      return (0, _utilities.scopeCss)(defaultCss, scope);
    }
    var HtmlTableFormatter = function(_HtmlFormatter) {
      _inherits(HtmlTableFormatter2, _HtmlFormatter);
      var _super = _createSuper(HtmlTableFormatter2);
      function HtmlTableFormatter2() {
        _classCallCheck(this, HtmlTableFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(HtmlTableFormatter2, [{
        key: "format",
        value: function format(song) {
          return this.formatWithTemplate(song, template);
        }
      }], [{
        key: "cssString",
        value: function cssString() {
          var scope = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          return (0, _utilities.scopeCss)(defaultCss, scope);
        }
      }, {
        key: "cssObject",
        value: function cssObject() {
          return defaultCss;
        }
      }]);
      return HtmlTableFormatter2;
    }(_html_formatter["default"]);
    var _default = HtmlTableFormatter;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/templates/html_div_formatter.js
var require_html_div_formatter = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/templates/html_div_formatter.js"() {
    "use strict";
    var Handlebars = require_handlebars();
    var template = Handlebars.template;
    var templates = Handlebars.templates = Handlebars.templates || {};
    templates["html_div_formatter"] = template({
      "1": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return ((stack1 = lookupProperty(helpers, "if").call(alias1, depth0 != null ? lookupProperty(depth0, "title") : depth0, {
          "name": "if",
          "hash": {},
          "fn": container.program(2, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 11
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, depth0 != null ? lookupProperty(depth0, "subtitle") : depth0, {
          "name": "if",
          "hash": {},
          "fn": container.program(4, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 11
            }
          }
        })) != null ? stack1 : "") + '<div class="chord-sheet">' + ((stack1 = lookupProperty(helpers, "each").call(alias1, depth0 != null ? lookupProperty(depth0, "bodyParagraphs") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(6, data, 1, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 15
            }
          }
        })) != null ? stack1 : "") + "</div>";
      },
      "2": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<h1>" + container.escapeExpression((helper = (helper = lookupProperty(helpers, "title") || (depth0 != null ? lookupProperty(depth0, "title") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "title",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 19
            }
          }
        }) : helper)) + "</h1>";
      },
      "4": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return "<h2>" + container.escapeExpression((helper = (helper = lookupProperty(helpers, "subtitle") || (depth0 != null ? lookupProperty(depth0, "subtitle") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "subtitle",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 22
            }
          }
        }) : helper)) + "</h2>";
      },
      "6": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="' + container.escapeExpression(lookupProperty(helpers, "paragraphClasses").call(alias1, blockParams[0][0], {
          "name": "paragraphClasses",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 12,
              "column": 18
            },
            "end": {
              "line": 12,
              "column": 48
            }
          }
        })) + '">' + ((stack1 = lookupProperty(helpers, "each").call(alias1, depth0 != null ? lookupProperty(depth0, "lines") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(7, data, 1, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 19
            }
          }
        })) != null ? stack1 : "") + "</div>";
      },
      "7": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "shouldRenderLine").call(alias1, blockParams[0][0], {
          "name": "shouldRenderLine",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 14,
              "column": 17
            },
            "end": {
              "line": 14,
              "column": 40
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(8, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 14,
              "column": 10
            },
            "end": {
              "line": 32,
              "column": 19
            }
          }
        })) != null ? stack1 : "";
      },
      "8": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="' + container.escapeExpression(lookupProperty(helpers, "lineClasses").call(alias1, blockParams[1][0], {
          "name": "lineClasses",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 15,
              "column": 24
            },
            "end": {
              "line": 15,
              "column": 44
            }
          }
        })) + '">' + ((stack1 = lookupProperty(helpers, "each").call(alias1, depth0 != null ? lookupProperty(depth0, "items") : depth0, {
          "name": "each",
          "hash": {},
          "fn": container.program(9, data, 1, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 16,
              "column": 14
            },
            "end": {
              "line": 30,
              "column": 25
            }
          }
        })) != null ? stack1 : "") + "</div>";
      },
      "9": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return ((stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isChordLyricsPair").call(alias1, blockParams[0][0], {
          "name": "isChordLyricsPair",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 17,
              "column": 23
            },
            "end": {
              "line": 17,
              "column": 47
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(10, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 19,
              "column": 25
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isTag").call(alias1, blockParams[0][0], {
          "name": "isTag",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 21,
              "column": 23
            },
            "end": {
              "line": 21,
              "column": 35
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(12, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 21,
              "column": 16
            },
            "end": {
              "line": 25,
              "column": 25
            }
          }
        })) != null ? stack1 : "") + ((stack1 = lookupProperty(helpers, "if").call(alias1, (lookupProperty(helpers, "isEvaluatable") || depth0 && lookupProperty(depth0, "isEvaluatable") || container.hooks.helperMissing).call(alias1, blockParams[0][0], {
          "name": "isEvaluatable",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 27,
              "column": 23
            },
            "end": {
              "line": 27,
              "column": 43
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(15, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 27,
              "column": 16
            },
            "end": {
              "line": 29,
              "column": 25
            }
          }
        })) != null ? stack1 : "");
      },
      "10": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, helper, alias1 = depth0 != null ? depth0 : container.nullContext || {}, alias2 = container.hooks.helperMissing, alias3 = container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="column"><div class="chord">' + alias3((lookupProperty(helpers, "renderChord") || depth0 && lookupProperty(depth0, "renderChord") || alias2).call(alias1, depth0 != null ? lookupProperty(depth0, "chords") : depth0, (stack1 = blockParams[3][0]) != null ? lookupProperty(stack1, "key") : stack1, (stack1 = blockParams[3][0]) != null ? lookupProperty(stack1, "transposeKey") : stack1, (stack1 = data && lookupProperty(data, "root")) && lookupProperty(stack1, "song"), {
          "name": "renderChord",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 18,
              "column": 57
            },
            "end": {
              "line": 18,
              "column": 117
            }
          }
        })) + '</div><div class="lyrics">' + alias3((helper = (helper = lookupProperty(helpers, "lyrics") || (depth0 != null ? lookupProperty(depth0, "lyrics") : depth0)) != null ? helper : alias2, typeof helper === "function" ? helper.call(alias1, {
          "name": "lyrics",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 18,
              "column": 143
            },
            "end": {
              "line": 18,
              "column": 153
            }
          }
        }) : helper)) + "</div></div>";
      },
      "12": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, alias1 = depth0 != null ? depth0 : container.nullContext || {}, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "if").call(alias1, lookupProperty(helpers, "isComment").call(alias1, blockParams[1][0], {
          "name": "isComment",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 22,
              "column": 25
            },
            "end": {
              "line": 22,
              "column": 41
            }
          }
        }), {
          "name": "if",
          "hash": {},
          "fn": container.program(13, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 22,
              "column": 18
            },
            "end": {
              "line": 24,
              "column": 27
            }
          }
        })) != null ? stack1 : "";
      },
      "13": function _(container, depth0, helpers, partials, data) {
        var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="comment">' + container.escapeExpression((helper = (helper = lookupProperty(helpers, "value") || (depth0 != null ? lookupProperty(depth0, "value") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {
          "name": "value",
          "hash": {},
          "data": data,
          "loc": {
            "start": {
              "line": 23,
              "column": 41
            },
            "end": {
              "line": 23,
              "column": 50
            }
          }
        }) : helper)) + "</div>";
      },
      "15": function _(container, depth0, helpers, partials, data, blockParams) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return '<div class="column"><div class="chord"></div><div class="lyrics">' + container.escapeExpression((lookupProperty(helpers, "evaluate") || depth0 && lookupProperty(depth0, "evaluate") || container.hooks.helperMissing).call(depth0 != null ? depth0 : container.nullContext || {}, blockParams[1][0], (stack1 = (stack1 = data && lookupProperty(data, "root")) && lookupProperty(stack1, "song")) && lookupProperty(stack1, "metadata"), {
          "name": "evaluate",
          "hash": {},
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 28,
              "column": 83
            },
            "end": {
              "line": 28,
              "column": 120
            }
          }
        })) + "</div></div>";
      },
      "compiler": [8, ">= 4.3.0"],
      "main": function main(container, depth0, helpers, partials, data, blockParams) {
        var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return void 0;
        };
        return (stack1 = lookupProperty(helpers, "with").call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? lookupProperty(depth0, "song") : depth0, {
          "name": "with",
          "hash": {},
          "fn": container.program(1, data, 0, blockParams),
          "inverse": container.noop,
          "data": data,
          "blockParams": blockParams,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 11
            }
          }
        })) != null ? stack1 : "";
      },
      "useData": true,
      "useBlockParams": true
    });
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_div_formatter.js
var require_html_div_formatter2 = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/html_div_formatter.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _handlebars = _interopRequireDefault(require_handlebars());
    require_template_helpers();
    var _html_formatter = _interopRequireDefault(require_html_formatter());
    require_html_div_formatter();
    var _utilities = require_utilities();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var template = _handlebars["default"].templates.html_div_formatter;
    var defaultCss = {
      ".chord:not(:last-child)": {
        paddingRight: "10px"
      },
      ".paragraph": {
        marginBottom: "1em"
      },
      ".row": {
        display: "flex"
      },
      ".chord:after": {
        content: "'\\200b'"
      },
      ".lyrics:after": {
        content: "'\\200b'"
      }
    };
    var HtmlDivFormatter = function(_HtmlFormatter) {
      _inherits(HtmlDivFormatter2, _HtmlFormatter);
      var _super = _createSuper(HtmlDivFormatter2);
      function HtmlDivFormatter2() {
        _classCallCheck(this, HtmlDivFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(HtmlDivFormatter2, [{
        key: "format",
        value: function format(song) {
          return this.formatWithTemplate(song, template);
        }
      }], [{
        key: "cssString",
        value: function cssString() {
          var scope = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          return (0, _utilities.scopeCss)(defaultCss, scope);
        }
      }, {
        key: "cssObject",
        value: function cssObject() {
          return defaultCss;
        }
      }]);
      return HtmlDivFormatter2;
    }(_html_formatter["default"]);
    var _default = HtmlDivFormatter;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/chord_pro_formatter.js
var require_chord_pro_formatter = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/formatter/chord_pro_formatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _tag = _interopRequireDefault(require_tag());
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _ternary = _interopRequireDefault(require_ternary());
    var _literal = _interopRequireDefault(require_literal());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NEW_LINE = "\n";
    var ChordProFormatter = function() {
      function ChordProFormatter2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$evaluate = _ref.evaluate, evaluate = _ref$evaluate === void 0 ? false : _ref$evaluate;
        _classCallCheck(this, ChordProFormatter2);
        this.evaluate = evaluate === true;
      }
      _createClass(ChordProFormatter2, [{
        key: "format",
        value: function format(song) {
          var _this = this;
          var lines = song.lines, metadata = song.metadata;
          return lines.map(function(line) {
            return _this.formatLine(line, metadata);
          }).join(NEW_LINE);
        }
      }, {
        key: "formatLine",
        value: function formatLine(line, metadata) {
          var _this2 = this;
          return line.items.map(function(item) {
            return _this2.formatItem(item, metadata);
          }).join("");
        }
      }, {
        key: "formatItem",
        value: function formatItem(item, metadata) {
          if (item instanceof _tag["default"]) {
            return this.formatTag(item);
          }
          if (item instanceof _chord_lyrics_pair["default"]) {
            return this.formatChordLyricsPair(item);
          }
          if (typeof item.evaluate === "function") {
            return this.formatOrEvaluateItem(item, metadata);
          }
          throw new Error("Don't know how to format a ".concat(item.constructor.name));
        }
      }, {
        key: "formatOrEvaluateItem",
        value: function formatOrEvaluateItem(item, metadata) {
          if (this.evaluate) {
            return item.evaluate(metadata);
          }
          if (item instanceof _ternary["default"]) {
            return this.formatTernary(item);
          }
          if (item instanceof _literal["default"]) {
            return item.evaluate();
          }
          throw new Error("Don't know how to format a ".concat(item.constructor.name));
        }
      }, {
        key: "formatTernary",
        value: function formatTernary(ternary) {
          var variable = ternary.variable, valueTest = ternary.valueTest, trueExpression = ternary.trueExpression, falseExpression = ternary.falseExpression;
          return ["%{", variable || "", this.formatValueTest(valueTest), this.formatExpressionRange(trueExpression), this.formatExpressionRange(falseExpression), "}"].join("");
        }
      }, {
        key: "formatValueTest",
        value: function formatValueTest(valueTest) {
          if (!valueTest) {
            return "";
          }
          return "=".concat(valueTest);
        }
      }, {
        key: "formatExpressionRange",
        value: function formatExpressionRange(expressionRange) {
          var _this3 = this;
          if (!expressionRange) {
            return "";
          }
          return "|".concat(expressionRange.map(function(expression) {
            return _this3.formatExpression(expression);
          }).join(""));
        }
      }, {
        key: "formatExpression",
        value: function formatExpression(expression) {
          if (expression instanceof _ternary["default"]) {
            return this.formatTernary(expression);
          }
          if (expression instanceof _literal["default"]) {
            return expression.string;
          }
          return "";
        }
      }, {
        key: "formatTag",
        value: function formatTag(tag) {
          if (tag.hasValue()) {
            return "{".concat(tag.originalName, ": ").concat(tag.value, "}");
          }
          return "{".concat(tag.originalName, "}");
        }
      }, {
        key: "formatChordLyricsPair",
        value: function formatChordLyricsPair(chordLyricsPair) {
          return [this.formatChordLyricsPairChords(chordLyricsPair), this.formatChordLyricsPairLyrics(chordLyricsPair)].join("");
        }
      }, {
        key: "formatChordLyricsPairChords",
        value: function formatChordLyricsPairChords(chordLyricsPair) {
          if (chordLyricsPair.chords) {
            return "[".concat(chordLyricsPair.chords, "]");
          }
          return "";
        }
      }, {
        key: "formatChordLyricsPairLyrics",
        value: function formatChordLyricsPairLyrics(chordLyricsPair) {
          return chordLyricsPair.lyrics || "";
        }
      }]);
      return ChordProFormatter2;
    }();
    var _default = ChordProFormatter;
    exports["default"] = _default;
  }
});

// node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/chordsheetjs@6.1.0/node_modules/chordsheetjs/lib/index.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "CHORUS", {
      enumerable: true,
      get: function get() {
        return _constants.CHORUS;
      }
    });
    Object.defineProperty(exports, "Chord", {
      enumerable: true,
      get: function get() {
        return _chord["default"];
      }
    });
    Object.defineProperty(exports, "ChordLyricsPair", {
      enumerable: true,
      get: function get() {
        return _chord_lyrics_pair["default"];
      }
    });
    Object.defineProperty(exports, "ChordProFormatter", {
      enumerable: true,
      get: function get() {
        return _chord_pro_formatter["default"];
      }
    });
    Object.defineProperty(exports, "ChordProParser", {
      enumerable: true,
      get: function get() {
        return _chord_pro_parser["default"];
      }
    });
    Object.defineProperty(exports, "ChordSheetParser", {
      enumerable: true,
      get: function get() {
        return _chord_sheet_parser["default"];
      }
    });
    Object.defineProperty(exports, "ChordSheetSerializer", {
      enumerable: true,
      get: function get() {
        return _chord_sheet_serializer["default"];
      }
    });
    Object.defineProperty(exports, "Comment", {
      enumerable: true,
      get: function get() {
        return _comment["default"];
      }
    });
    Object.defineProperty(exports, "Composite", {
      enumerable: true,
      get: function get() {
        return _composite["default"];
      }
    });
    Object.defineProperty(exports, "HtmlDivFormatter", {
      enumerable: true,
      get: function get() {
        return _html_div_formatter["default"];
      }
    });
    Object.defineProperty(exports, "HtmlTableFormatter", {
      enumerable: true,
      get: function get() {
        return _html_table_formatter["default"];
      }
    });
    Object.defineProperty(exports, "INDETERMINATE", {
      enumerable: true,
      get: function get() {
        return _constants.INDETERMINATE;
      }
    });
    Object.defineProperty(exports, "Key", {
      enumerable: true,
      get: function get() {
        return _key["default"];
      }
    });
    Object.defineProperty(exports, "Line", {
      enumerable: true,
      get: function get() {
        return _line["default"];
      }
    });
    Object.defineProperty(exports, "Literal", {
      enumerable: true,
      get: function get() {
        return _literal["default"];
      }
    });
    Object.defineProperty(exports, "Metadata", {
      enumerable: true,
      get: function get() {
        return _metadata["default"];
      }
    });
    Object.defineProperty(exports, "NONE", {
      enumerable: true,
      get: function get() {
        return _constants.NONE;
      }
    });
    Object.defineProperty(exports, "NUMERIC", {
      enumerable: true,
      get: function get() {
        return _constants.NUMERIC;
      }
    });
    Object.defineProperty(exports, "Paragraph", {
      enumerable: true,
      get: function get() {
        return _paragraph["default"];
      }
    });
    Object.defineProperty(exports, "SYMBOL", {
      enumerable: true,
      get: function get() {
        return _constants.SYMBOL;
      }
    });
    Object.defineProperty(exports, "Song", {
      enumerable: true,
      get: function get() {
        return _song["default"];
      }
    });
    Object.defineProperty(exports, "TAB", {
      enumerable: true,
      get: function get() {
        return _constants.TAB;
      }
    });
    Object.defineProperty(exports, "Tag", {
      enumerable: true,
      get: function get() {
        return _tag["default"];
      }
    });
    Object.defineProperty(exports, "Ternary", {
      enumerable: true,
      get: function get() {
        return _ternary["default"];
      }
    });
    Object.defineProperty(exports, "TextFormatter", {
      enumerable: true,
      get: function get() {
        return _text_formatter["default"];
      }
    });
    Object.defineProperty(exports, "UltimateGuitarParser", {
      enumerable: true,
      get: function get() {
        return _ultimate_guitar_parser["default"];
      }
    });
    Object.defineProperty(exports, "VERSE", {
      enumerable: true,
      get: function get() {
        return _constants.VERSE;
      }
    });
    exports["default"] = void 0;
    Object.defineProperty(exports, "parseChord", {
      enumerable: true,
      get: function get() {
        return _chord.parseChord;
      }
    });
    var _chord_pro_parser = _interopRequireDefault(require_chord_pro_parser());
    var _chord_sheet_parser = _interopRequireDefault(require_chord_sheet_parser());
    var _ultimate_guitar_parser = _interopRequireDefault(require_ultimate_guitar_parser());
    var _text_formatter = _interopRequireDefault(require_text_formatter());
    var _html_table_formatter = _interopRequireDefault(require_html_table_formatter2());
    var _html_div_formatter = _interopRequireDefault(require_html_div_formatter2());
    var _chord_pro_formatter = _interopRequireDefault(require_chord_pro_formatter());
    var _chord_lyrics_pair = _interopRequireDefault(require_chord_lyrics_pair());
    var _line = _interopRequireDefault(require_line());
    var _song = _interopRequireDefault(require_song());
    var _tag = _interopRequireDefault(require_tag());
    var _comment = _interopRequireDefault(require_comment());
    var _metadata = _interopRequireDefault(require_metadata());
    var _paragraph = _interopRequireDefault(require_paragraph());
    var _ternary = _interopRequireDefault(require_ternary());
    var _composite = _interopRequireDefault(require_composite());
    var _literal = _interopRequireDefault(require_literal());
    var _chord_sheet_serializer = _interopRequireDefault(require_chord_sheet_serializer());
    var _constants = require_constants();
    var _chord = _interopRequireWildcard(require_chord());
    var _key = _interopRequireDefault(require_key());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = {
      ChordProParser: _chord_pro_parser["default"],
      ChordSheetParser: _chord_sheet_parser["default"],
      UltimateGuitarParser: _ultimate_guitar_parser["default"],
      TextFormatter: _text_formatter["default"],
      HtmlTableFormatter: _html_table_formatter["default"],
      HtmlDivFormatter: _html_div_formatter["default"],
      ChordProFormatter: _chord_pro_formatter["default"],
      ChordLyricsPair: _chord_lyrics_pair["default"],
      Line: _line["default"],
      Song: _song["default"],
      Tag: _tag["default"],
      Comment: _comment["default"],
      Metadata: _metadata["default"],
      Paragraph: _paragraph["default"],
      Ternary: _ternary["default"],
      Composite: _composite["default"],
      Literal: _literal["default"],
      ChordSheetSerializer: _chord_sheet_serializer["default"],
      CHORUS: _constants.CHORUS,
      INDETERMINATE: _constants.INDETERMINATE,
      TAB: _constants.TAB,
      VERSE: _constants.VERSE,
      NONE: _constants.NONE
    };
    exports["default"] = _default;
  }
});

// dep:chordsheetjs
var chordsheetjs_default = require_lib();
export {
  chordsheetjs_default as default
};
//# sourceMappingURL=chordsheetjs.js.map
